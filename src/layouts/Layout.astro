---
import { SITE } from "src/config";
import { ViewTransitions } from "astro:transitions";
import NavMenu from "../components/NavMenu/index.svelte";
// import { ModeWatcher, setMode } from "mode-watcher";
import "../styles/base.css";

// setMode("dark");

const googleSiteVerification = import.meta.env.PUBLIC_GOOGLE_SITE_VERIFICATION;

export interface Props {
  title?: string;
  author?: string;
  description?: string;
  ogImage?: string;
}

const {
  title = SITE.title,
  author = SITE.author,
  description = SITE.description,
  ogImage = SITE.ogImage,
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const socialImageURL = new URL(
  ogImage ? ogImage : SITE.ogImage,
  Astro.url.origin
).href;

const fallbackImageURL = new URL(SITE.ogImage, Astro.url.origin).href;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/ico" href="/favicon.ico" />
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />

    <!-- General Meta Tags -->
    <title>{title}</title>
    <ViewTransitions />
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={author} />

    <!-- Open Graph / Facebook -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={socialImageURL} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta
      property="twitter:image"
      content={socialImageURL.endsWith(".svg")
        ? fallbackImageURL
        : socialImageURL}
    />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <!-- <link href="https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@300;400;500&display=swap" rel="stylesheet"> -->

    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-NV80H5X8DD"
    ></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());

      gtag("config", "G-NV80H5X8DD");
    </script>
    {
      // If PUBLIC_GOOGLE_SITE_VERIFICATION is set in the environment variable,
      // include google-site-verification tag in the heading
      // Learn more: https://support.google.com/webmasters/answer/9008080#meta_tag_verification&zippy=%2Chtml-tag
      googleSiteVerification && (
        <meta
          name="google-site-verification"
          content={googleSiteVerification}
        />
      )
    }
    <script>
      let base = 0;
      let timestamp = 0;

      function animate(time: number) {
        if (time - timestamp >= 240) {
          base += 6;
          let t: string = ((0.5 * base + 120) % 360) + "";
          let o: string = ((0.5 * base + 240) % 360) + "";
          let n: string = ((0.5 * base + 360) % 360) + "";
          let l = "hsl("
            .concat(t, "deg, ")
            .concat("40", "%, ")
            .concat("96", "%)");
          let i = "hsl("
            .concat(o, "deg, ")
            .concat("40", "%, ")
            .concat("96", "%)");
          let c = "hsl("
            .concat(n, "deg, ")
            .concat("40", "%, ")
            .concat("96", "%)");
          let s = "linear-gradient(20deg, "
            .concat(l, ", ")
            .concat(i, ", ")
            .concat(c, ")");
          let u = "hsl(".concat(o, "deg, 80%, 70%)");
          let d = "hsl(".concat(o, "deg, 30%, 10%)");

          let body = document.body;
          body.style.backgroundImage = s;
          body.style.setProperty("--fontColor", d);
          body.style.setProperty("--artForeground", i);
          body.style.setProperty("--highlightColor", u);

          timestamp = time;
        }

        window.requestAnimationFrame(animate);
      }

      window.requestAnimationFrame(animate);
    </script>
  </head>
  <body class="antialiased">
    <div class="main-wrapper max-w-[1728px] w-full mx-auto">
      <div class="gridLayout">
        <slot />
      </div>
    </div>
    <NavMenu client:load />
  </body>
</html>
