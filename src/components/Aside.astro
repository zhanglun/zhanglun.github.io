---
import clsx from "clsx";
import { LOGO_IMAGE, SITE, MENU } from "src/config";
import LinkButton from "./LinkButton.astro";
import {
  Moon,
  Search,
  Sun,
  FileText,
  Presentation,
  Github,
ArrowUpRight,
} from "lucide-react";
import AsideNavLink from "@components/AsideNavLink.astro";
import getUniqueTags from "@utils/getUniqueTags";
import type { Frontmatter } from "src/types";
import Icon from "src/assets/icon.png";

export interface Props {
  activeNav?:
    | "search"
    | "blogs"
    | "categories"
    | "archives"
    | "tags"
    | "about"
    | "labs";
}

const pathname = new URL(Astro.request.url).pathname;
const currentPath = pathname.slice(1); // remove the first "/"
console.log("%c Line:26 üçâ currentPath", "color:#6ec1c2", currentPath);
---

<aside
  class="fixed w-full h-screen overflow-auto overflow-x-hidden top-[0] z-50 px-8 py-10 -left-[calc(100vw)] sm:w-2/4 md:left-[0] md:top-auto md:bg-transparent md:py-4 md:pb-1 transition-[width,height,padding] duration-[700ms] ease-in-out md:w-60 md:px-8 md:h-[calc(100vh-96px)] flex flex-col justify-between"
>
  <div class="">
    <a href="/" class="flex gap-4 flex-row">
      <img class="w-10 h-10 rounded-lg" src={Icon.src} width={Icon.width} height={Icon.height} alt="" />
      <div class="flex gap-1 justify-center flex-col whitespace-nowrap">
        <h1 class="text-sm font-bold">Âº†Â∞è‰º¶ÁöÑÁΩëÁªúÊó•Âøó</h1>
        <h2 class="text-xs">zhanglun.github.io</h2>
      </div>
    </a>
  </div>
  <ol class="list-none p-0 m-0 -ml-2 mt-2">
    <li class="block text-sm group">
      <AsideNavLink
        href="/blogs"
        count={1}
        className={clsx('bg-red', {
          'bg-white font-bold': currentPath.indexOf("blogs") > -1,
        })}
      >
        <FileText size={16} />Writing
      </AsideNavLink>
    </li>
    <li class="block text-sm group">
      <AsideNavLink
        href="/labs"
        count={1}
        className={clsx({
          active: currentPath === "laboratory",
        })}
      >
        <Presentation size={16} />Laboratory
      </AsideNavLink>
    </li>
    {
      (MENU || []).map((item: any) => (
        <li class="block text-sm group">
          <AsideNavLink href={import.meta.env.BASE_URL.slice(0, -1) + item.url}>
            <span class="">{item.name}</span>
          </AsideNavLink>
        </li>
      ))
    }
  </ol>
  <ol>
    <li class="block text-sm group">
      <AsideNavLink href="github.com/zhanglun">
        <Github size={16} />Github
      </AsideNavLink>
    </li>
  </ol>
  <div class="flex items-center gap-4">
    <LinkButton
      href={import.meta.env.BASE_URL.slice(0, -1) + "/search"}
      className={clsx("focus-outline p-3 sm:p-1", {
        active: currentPath === "search",
      })}
      ariaLabel="search"
      title="Search"
    >
      <Search size={18} strokeWidth={2} />
    </LinkButton>
    {
      SITE.lightAndDarkMode && (
        <button
          id="theme-btn"
          class="focus-outline"
          title="Toggles light & dark"
          aria-label="auto"
          aria-live="polite"
        >
          <Moon id="moon-svg" size={18} strokeWidth={2} />
          <Sun id="sun-svg" size={18} strokeWidth={2} />
        </button>
      )
    }
  </div>
</aside>

<style>
  /* nav ul li before:after {
    content: "";
    display: block;
    position: absolute;
    top: 100%;
    width: 0.25rem;
    height: 0.25rem;
    left: 50%;
    margin-top: 0.5rem;
    border-radius: 1rem;
    background-color: currentColor;
    transform: translateX(-50%) scale(0.2);
    opacity: 0;
    @apply transition-all;
  }

  nav ul li a:hover::before,
  nav ul li a.active:before {
    transform: translateX(-50%);
    opacity: 1;
  } */

  nav ul li a.active {
    color: var(--color-text-base);
  }

  #theme-btn {
    @apply p-3 sm:p-1;
  }
  #theme-btn svg {
    @apply hover:rotate-12 scale-125 sm:scale-100;
  }

  .icon-container {
    @apply w-6 h-5 flex-col justify-between items-end;
  }
  .icon-container div {
    @apply bg-skin-inverted h-0.5 transition-all;
  }
  #first-line {
    @apply w-full;
  }
  #second-line {
    @apply w-3/4;
  }
  #third-line {
    @apply w-1/2;
  }
</style>

<script>
  const primaryColorScheme = ""; // "light" | "dark"

  // Get theme data from local storage
  const currentTheme = localStorage.getItem("theme");

  function getPreferTheme() {
    // return theme value in local storage if it is set
    if (currentTheme) return currentTheme;

    // return primary color scheme if it is set
    if (primaryColorScheme) return primaryColorScheme;

    // return user device's prefer color scheme
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  }

  let themeValue = getPreferTheme();

  function setPreference() {
    localStorage.setItem("theme", themeValue);
    reflectPreference();
  }

  function reflectPreference() {
    document.firstElementChild?.setAttribute("data-theme", themeValue);

    document
      .querySelector("#theme-btn")
      ?.setAttribute("aria-label", themeValue);
  }

  // set early so no page flashes / CSS is made aware
  reflectPreference();

  window.onload = () => {
    // set on load so screen readers can get the latest value on the button
    reflectPreference();

    // now this script can find and listen for clicks on the control
    document.querySelector("#theme-btn")?.addEventListener("click", () => {
      themeValue = themeValue === "light" ? "dark" : "light";
      setPreference();
    });
  };

  const nav = document.querySelector("#nav");
  const header = document.querySelector("#header");
  const headerHeight = header?.getBoundingClientRect().height;
  const options = {
    rootMargin: `${0}px 0px 0px 0px`,
    threshold: 1,
  };
  const observer = new IntersectionObserver(([entry]) => {
    console.log("%c Line:289 üç© entry", "color:#33a5ff", entry);
    if (entry.intersectionRatio <= 1) {
      nav?.classList.add("fix");
    } else {
      nav?.classList.remove("fix");
    }
  }, options);

  header && observer.observe(header);

  // sync with system changes
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", ({ matches: isDark }) => {
      themeValue = isDark ? "dark" : "light";
      setPreference();
    });

  // Toggle menu
  const menuBtn = document.querySelector(".hamburger-menu");
  const menuItems = document.querySelector("#menu-items")?.classList;

  const iconContainer = document.querySelector(".icon-container")?.classList;
  const firstLine = document.querySelector("#first-line")?.classList;
  const secondLine = document.querySelector("#second-line ")?.classList;
  const thirdLine = document.querySelector("#third-line")?.classList;

  menuBtn!.addEventListener("click", function (event) {
    const menuExpanded = menuBtn?.getAttribute("aria-expanded");
    if (menuExpanded === "false") {
      menuBtn?.setAttribute("aria-expanded", "true");
      menuBtn?.setAttribute("aria-label", "Close Menu");
      menuItems?.remove("display-none");

      // icon animation
      iconContainer?.remove("flex");
      iconContainer?.add("relative");
      firstLine?.add("rotate-45", "absolute", "bottom-1/2");
      thirdLine?.add("display-none");
      secondLine?.add("!w-full", "-rotate-45", "absolute", "bottom-1/2");
    } else {
      menuBtn?.setAttribute("aria-expanded", "false");
      menuBtn?.setAttribute("aria-label", "Open Menu");
      menuItems?.add("display-none");

      // icon animation
      iconContainer?.add("flex");
      iconContainer?.remove("relative");
      firstLine?.remove("rotate-45", "absolute", "bottom-1/2");
      thirdLine?.remove("display-none");
      secondLine?.remove("!w-full", "-rotate-45", "absolute", "bottom-1/2");
    }
  });
</script>
