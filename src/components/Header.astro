---
import { LOGO_IMAGE, SITE, MENU } from "src/config";
import logoPNG from "src/assets/icon.png";
import clsx from "clsx";

export interface Props {
  activeNav?:
    | "search"
    | "blogs"
    | "categories"
    | "archives"
    | "tags"
    | "about"
    | "projects";
}

const { activeNav } = Astro.props;
---

<header class="w-full" id="header">
  <div class="w-full h-[56px] flex items-center justify-between" id="nav">
    <a href="/" class="flex items-center gap-2 text-base">
      {
        LOGO_IMAGE.enable && (
          <img
            src={logoPNG.src}
            alt="Logo"
            width={LOGO_IMAGE.width}
            height={LOGO_IMAGE.height}
            class="rounded-md"
          />
        )
      }
       {SITE.title}
    </a>
    <nav id="nav-menu">
      <ul id="menu-items" class="display-none sm:flex gap-1">
        {
          (MENU || []).map((item: any) => (
            <li>
              <a
                class={clsx("px-3 py-2 rounded-lg leading-tight hover:bg-neutral-100", { "bg-neutral-100": activeNav === item.id })}
                href={import.meta.env.BASE_URL.slice(0, -1) + item.url}
              >
                <span class="font-medium text-sm">{item.name}</span>
              </a>
            </li>
          ))
        }
        <!-- <li class="ml-4">
          <LinkButton
            href={import.meta.env.BASE_URL.slice(0, -1) + "/search"}
            className={`focus-outline p-3 sm:p-1 ${
              activeNav === "search" ? "active" : ""
            }`}
            ariaLabel="search"
            title="Search"
          >
            <Search size={18} strokeWidth={2} />
          </LinkButton>
        </li>
        <li>
          {
            SITE.lightAndDarkMode && (
              <button
                id="theme-btn"
                class="focus-outline"
                title="Toggles light & dark"
                aria-label="auto"
                aria-live="polite"
              >
                <Moon id="moon-svg" size={18} strokeWidth={2} />
                <Sun id="sun-svg" size={18} strokeWidth={2} />
              </button>
            )
          }
        </li> -->
      </ul>
    </nav>
  </div>
</header>

<script>
  const primaryColorScheme = ""; // "light" | "dark"

  // Get theme data from local storage
  const currentTheme = localStorage.getItem("theme");

  function getPreferTheme() {
    // return theme value in local storage if it is set
    if (currentTheme) return currentTheme;

    // return primary color scheme if it is set
    if (primaryColorScheme) return primaryColorScheme;

    // return user device's prefer color scheme
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  }

  let themeValue = getPreferTheme();

  function setPreference() {
    localStorage.setItem("theme", themeValue);
    reflectPreference();
  }

  function reflectPreference() {
    document.firstElementChild?.setAttribute("data-theme", themeValue);

    document
      .querySelector("#theme-btn")
      ?.setAttribute("aria-label", themeValue);
  }

  // set early so no page flashes / CSS is made aware
  reflectPreference();

  window.onload = () => {
    // set on load so screen readers can get the latest value on the button
    reflectPreference();

    // now this script can find and listen for clicks on the control
    document.querySelector("#theme-btn")?.addEventListener("click", () => {
      themeValue = themeValue === "light" ? "dark" : "light";
      setPreference();
    });
  };

  const nav = document.querySelector("#nav");
  const header = document.querySelector("#header");
  const headerHeight = header?.getBoundingClientRect().height;
  const options = {
    rootMargin: `${0}px 0px 0px 0px`,
    threshold: 1,
  };
  const observer = new IntersectionObserver(([entry]) => {
    console.log("%c Line:289 üç© entry", "color:#33a5ff", entry);
    if (entry.intersectionRatio <= 1) {
      nav?.classList.add("fix");
    } else {
      nav?.classList.remove("fix");
    }
  }, options);
  
  header && observer.observe(header);

  // sync with system changes
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", ({ matches: isDark }) => {
      themeValue = isDark ? "dark" : "light";
      setPreference();
    });

  // Toggle menu
  const menuBtn = document.querySelector(".hamburger-menu");
  const menuItems = document.querySelector("#menu-items")?.classList;

  const iconContainer = document.querySelector(".icon-container")?.classList;
  const firstLine = document.querySelector("#first-line")?.classList;
  const secondLine = document.querySelector("#second-line ")?.classList;
  const thirdLine = document.querySelector("#third-line")?.classList;

  menuBtn!.addEventListener("click", function (event) {
    const menuExpanded = menuBtn?.getAttribute("aria-expanded");
    if (menuExpanded === "false") {
      menuBtn?.setAttribute("aria-expanded", "true");
      menuBtn?.setAttribute("aria-label", "Close Menu");
      menuItems?.remove("display-none");

      // icon animation
      iconContainer?.remove("flex");
      iconContainer?.add("relative");
      firstLine?.add("rotate-45", "absolute", "bottom-1/2");
      thirdLine?.add("display-none");
      secondLine?.add("!w-full", "-rotate-45", "absolute", "bottom-1/2");
    } else {
      menuBtn?.setAttribute("aria-expanded", "false");
      menuBtn?.setAttribute("aria-label", "Open Menu");
      menuItems?.add("display-none");

      // icon animation
      iconContainer?.add("flex");
      iconContainer?.remove("relative");
      firstLine?.remove("rotate-45", "absolute", "bottom-1/2");
      thirdLine?.remove("display-none");
      secondLine?.remove("!w-full", "-rotate-45", "absolute", "bottom-1/2");
    }
  });
</script>
