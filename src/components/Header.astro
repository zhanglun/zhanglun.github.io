---
import { LOGO_IMAGE, SITE, MENU } from "src/config";
import LinkButton from "./LinkButton.astro";

import logoPNG from "/assets/logo.png";
import logoSVG from "/assets/logo.svg";
import { Moon, Search, Sun } from "lucide-react";

export interface Props {
  activeNav?:
    | "search"
    | "blogs"
    | "categories"
    | "archives"
    | "tags"
    | "about"
    | "labs";
}

const { activeNav } = Astro.props;
---

<header class="bg-opacity-95 flex items-center justify-center h-[56px]" id="header">
  <a id="skip-to-content" href="#main-content">Skip to content</a>
  <div class="context nav-container" id="nav">
    <div class="top-nav-wrap">
      <a href="/" class="logo font-sans">
        {
          LOGO_IMAGE.enable ? (
            <img
              src={LOGO_IMAGE.svg ? logoSVG : logoPNG}
              alt="AstroPaper Logo"
              width={LOGO_IMAGE.width}
              height={LOGO_IMAGE.height}
            />
          ) : (
            SITE.title
          )
        }
      </a>
      <nav id="nav-menu">
        <button
          class="hamburger-menu focus-outline"
          aria-label="Open Menu"
          aria-expanded="false"
          aria-controls="menu-items"
        >
          <div class="icon-container flex">
            <div id="first-line"></div>
            <div id="second-line"></div>
            <div id="third-line"></div>
          </div>
        </button>
        <ul id="menu-items" class="display-none sm:flex">
          {
            (MENU || []).map((item: any) => (
              <li>
                <a
                  class={activeNav === item.id ? "active" : ""}
                  href={import.meta.env.BASE_URL.slice(0, -1) + item.url}
                >
                  <span class="font-bold">{item.name}</span>
                </a>
              </li>
            ))
          }
          <li class="ml-4">
            <LinkButton
              href={import.meta.env.BASE_URL.slice(0, -1) + "/search"}
              className={`focus-outline p-3 sm:p-1 ${
                activeNav === "search" ? "active" : ""
              }`}
              ariaLabel="search"
              title="Search"
            >
              <Search size={18} strokeWidth={2} />
            </LinkButton>
          </li>
          <li>
            {
              SITE.lightAndDarkMode && (
                <button
                  id="theme-btn"
                  class="focus-outline"
                  title="Toggles light & dark"
                  aria-label="auto"
                  aria-live="polite"
                >
                  <Moon id="moon-svg" size={18} strokeWidth={2} />
                  <Sun id="sun-svg" size={18} strokeWidth={2} />
                </button>
              )
            }
          </li>
        </ul>
      </nav>
    </div>
  </div>
</header>

<style>
  #skip-to-content {
    @apply bg-skin-accent text-skin-inverted py-2 px-3 absolute -top-full focus:top-4 left-16 z-50 transition-all;
  }
  .nav-container {
    @apply max-w-screen-2xl mx-auto flex flex-col sm:flex-row justify-between items-center;
  }
  .top-nav-wrap {
    @apply relative w-full flex justify-between items-start sm:py-2 sm:items-center text-base;
  }

  #nav.fix {
    position: fixed;
    top: 0;
    backdrop-filter: saturate(180%) blur(20px);
    background: rgba(255, 255, 255, 0.48);
    --playerDropShadow2: rgba(0, 0, 0, 0.07);
    --playerInnerShadow: rgba(255, 255, 255, 0.45);
    background-image: linear-gradient(274deg,transparent, rgba(0, 0, 0, 0.07) 50%, transparent);
    background-position: 0 bottom;
    background-size: 100% 1px;
    background-repeat: no-repeat;
  }

  .logo {
    @apply absolute sm:static font-semibold text-xl sm:text-2xl py-1 shrink-0;
  }
  .hamburger-menu {
    @apply self-end p-2 sm:hidden;
  }
  .hamburger-menu svg {
    @apply fill-skin-base w-6 h-6 scale-125;
  }

  nav {
    @apply w-full sm:py-0 sm:ml-2 flex flex-col items-center sm:justify-end sm:flex-row sm:space-x-4;
  }
  nav ul {
    @apply mt-4 w-44 grid grid-rows-4 grid-cols-2 gap-y-2 gap-x-2 sm:gap-y-0 sm:mt-0 sm:ml-0 sm:w-auto sm:gap-x-2;
  }
  nav ul li {
    @apply col-span-2 flex justify-center items-center;
  }
  nav ul li a {
    @apply px-3 py-2 w-full text-center sm:px-2 sm:py-1 sm:my-0 font-medium hover:text-skin-accent relative text-skin-base;
  }
  nav ul li a:after {
    content: "";
    display: block;
    position: absolute;
    top: 100%;
    width: 0.25rem;
    height: 0.25rem;
    left: 50%;
    margin-top: 0.5rem;
    border-radius: 1rem;
    background-color: currentColor;
    transform: translateX(-50%) scale(0.2);
    opacity: 0;
    @apply transition-all;
  }

  nav ul li a:hover::after,
  nav ul li a.active:after {
    transform: translateX(-50%);
    opacity: 1;
  }

  nav ul li a.active {
    color: var(--color-text-base);
  }

  nav ul li:nth-child(4) a {
    @apply w-auto;
  }
  nav ul li:nth-child(4),
  nav ul li:nth-child(5) {
    @apply col-span-1;
  }
  nav a.active {
  }
  nav a:hover {
    @apply text-neutral-600 !important;
  }
  nav a.active svg {
    @apply fill-skin-accent;
  }

  nav button {
    @apply p-1;
  }
  nav button svg {
    @apply w-6 h-6 fill-skin-base hover:fill-skin-accent;
  }
  #theme-btn {
    @apply p-3 sm:p-1;
  }
  #theme-btn svg {
    @apply hover:rotate-12 scale-125 sm:scale-100;
  }

  .icon-container {
    @apply w-6 h-5 flex-col justify-between items-end;
  }
  .icon-container div {
    @apply bg-skin-inverted h-0.5 transition-all;
  }
  #first-line {
    @apply w-full;
  }
  #second-line {
    @apply w-3/4;
  }
  #third-line {
    @apply w-1/2;
  }
</style>

<script>
  const primaryColorScheme = ""; // "light" | "dark"

  // Get theme data from local storage
  const currentTheme = localStorage.getItem("theme");

  function getPreferTheme() {
    // return theme value in local storage if it is set
    if (currentTheme) return currentTheme;

    // return primary color scheme if it is set
    if (primaryColorScheme) return primaryColorScheme;

    // return user device's prefer color scheme
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  }

  let themeValue = getPreferTheme();

  function setPreference() {
    localStorage.setItem("theme", themeValue);
    reflectPreference();
  }

  function reflectPreference() {
    document.firstElementChild?.setAttribute("data-theme", themeValue);

    document
      .querySelector("#theme-btn")
      ?.setAttribute("aria-label", themeValue);
  }

  // set early so no page flashes / CSS is made aware
  reflectPreference();

  window.onload = () => {
    // set on load so screen readers can get the latest value on the button
    reflectPreference();

    // now this script can find and listen for clicks on the control
    document.querySelector("#theme-btn")?.addEventListener("click", () => {
      themeValue = themeValue === "light" ? "dark" : "light";
      setPreference();
    });
  };

  const nav = document.querySelector("#nav");
  const header = document.querySelector("#header");
  const headerHeight = header?.getBoundingClientRect().height;
  const options = {
    rootMargin: `${0}px 0px 0px 0px`,
    threshold: 1,
  };
  const observer = new IntersectionObserver(([entry]) => {
    console.log("%c Line:289 üç© entry", "color:#33a5ff", entry);
    if (entry.intersectionRatio <= 1) {
      nav?.classList.add("fix");
    } else {
      nav?.classList.remove("fix");
    }
  }, options);
  
  header && observer.observe(header);

  // sync with system changes
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", ({ matches: isDark }) => {
      themeValue = isDark ? "dark" : "light";
      setPreference();
    });

  // Toggle menu
  const menuBtn = document.querySelector(".hamburger-menu");
  const menuItems = document.querySelector("#menu-items")?.classList;

  const iconContainer = document.querySelector(".icon-container")?.classList;
  const firstLine = document.querySelector("#first-line")?.classList;
  const secondLine = document.querySelector("#second-line ")?.classList;
  const thirdLine = document.querySelector("#third-line")?.classList;

  menuBtn!.addEventListener("click", function (event) {
    const menuExpanded = menuBtn?.getAttribute("aria-expanded");
    if (menuExpanded === "false") {
      menuBtn?.setAttribute("aria-expanded", "true");
      menuBtn?.setAttribute("aria-label", "Close Menu");
      menuItems?.remove("display-none");

      // icon animation
      iconContainer?.remove("flex");
      iconContainer?.add("relative");
      firstLine?.add("rotate-45", "absolute", "bottom-1/2");
      thirdLine?.add("display-none");
      secondLine?.add("!w-full", "-rotate-45", "absolute", "bottom-1/2");
    } else {
      menuBtn?.setAttribute("aria-expanded", "false");
      menuBtn?.setAttribute("aria-label", "Open Menu");
      menuItems?.add("display-none");

      // icon animation
      iconContainer?.add("flex");
      iconContainer?.remove("relative");
      firstLine?.remove("rotate-45", "absolute", "bottom-1/2");
      thirdLine?.remove("display-none");
      secondLine?.remove("!w-full", "-rotate-45", "absolute", "bottom-1/2");
    }
  });
</script>
