---
import Layout from "@layouts/Layout.astro";
import Tag from "@components/Tag.astro";
import Datetime from "@components/Datetime";
import SectionContainer from "@components/SectionContainer.astro";
import getPageNumbers from "@utils/getPageNumbers";
import type { MarkdownInstance } from "astro";
import type { Frontmatter } from "src/types";
import { getCollection } from "astro:content";
import type { InferGetStaticParamsType, InferGetStaticPropsType, GetStaticPaths } from 'astro';

type PostResult = {
  params: {
    slug: string | number;
  };
  props?: {
    entry: any;
  };
}[];

type PagePaths = {
  params: {
    slug: string;
  };
}[];

export async function getStaticPaths() {
  const posts = await getCollection("blogs");
  const posts2 = await getCollection("notion");
  const filteredPosts = [...posts, ...posts2].filter(({ data }) => !data.draft);

  let postResult:PostResult = filteredPosts.map(entry => {
    return {
      params: {
        slug: entry.slug,
      },
      props: {
        entry,
      },
    };
  });

  const pagePaths: PagePaths = getPageNumbers(filteredPosts.length).map(
    pageNum => ({
      params: { slug: String(pageNum) },
    })
  );

  return [...postResult, ...pagePaths];
}

getStaticPaths satisfies GetStaticPaths;

export type Params = InferGetStaticParamsType<typeof getStaticPaths>;
export type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { entry } = Astro.props as Props;
const { title, author, description, ogImage, date, tags } = entry.data;
const ogUrl = new URL(ogImage ? ogImage : `${title}.svg`, Astro.url.origin)
  .href;

const { Content } = await entry.render();

---

<Layout title={title} author={author} description={description} ogImage={ogUrl}>
  <SectionContainer>
    <div class="mt-5 mb-12 mx-auto pt-10 py-8 max-w-6xl">
      <h1 class="leading-tight text-2xl text-center text-[var(--color-accent)] font-bold">{title}</h1>
      <Datetime datetime={date} size="sm" className="mt-4 mb-2 mx-auto" />
      {
        tags && (
          <ul class="gap-x-3 gap-y-1 flex items-center justify-center">
            {tags.map(tag => (
              <Tag name={tag} hideCount />
            ))}
          </ul>
        )
      }
    </div>
    <main id="main-content">
      <article id="article" role="article" class="mx-auto max-w-3xl mt-8 prose">
       <Content />
      </article>
    </main>
  </SectionContainer>
</Layout>

