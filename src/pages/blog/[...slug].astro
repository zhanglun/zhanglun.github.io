---
import Layout from "@layouts/Layout.astro";
import Tag from "@components/Tag.astro";
import Datetime from "@components/Datetime";
import SectionContainer from "@components/SectionContainer.svelte";
import BlogDetail from "@components/BlogDetail.svelte";
import getPageNumbers from "@utils/getPageNumbers";
import { getCollection } from "astro:content";
import type {
  InferGetStaticParamsType,
  InferGetStaticPropsType,
  GetStaticPaths,
} from "astro";

type PostResult = {
  params: {
    slug: string | number;
  };
  props?: {
    entry: any;
  };
}[];

type PagePaths = {
  params: {
    slug: string;
  };
}[];

export async function getStaticPaths() {
  const posts = await getCollection("blogs");
  const posts2 = await getCollection("notion");
  const filteredPosts = [...posts, ...posts2].filter(({ data }) => !data.draft);

  let postResult: PostResult = filteredPosts.map(entry => {
    return {
      params: {
        slug: entry.slug,
      },
      props: {
        entry,
      },
    };
  });

  return [...postResult];
}

getStaticPaths satisfies GetStaticPaths;

export type Params = InferGetStaticParamsType<typeof getStaticPaths>;
export type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { entry } = Astro.props as Props;
const { title, author, description, ogImage, date, tags, categories } =
  entry.data;
console.log("ðŸš€ ~ entry:", entry);
const ogUrl = new URL(ogImage ? ogImage : `${title}.svg`, Astro.url.origin)
  .href;

const { Content, remarkPluginFrontmatter } = await entry.render();
---

<Layout title={title} author={author} description={description} ogImage={ogUrl}>
  <BlogDetail
    title={title}
    date={date}
    tags={tags}
    categories={categories}
    post={entry.data}
  >
    <Content />
  </BlogDetail>

  <!-- <SectionContainer>
    <div class="mt-5 mb-12 mx-auto pt-10 py-8 max-w-6xl">
      <h1 class="leading-tight text-2xl text-center text-[var(--color-accent)] font-bold mb-6">{title}</h1>
      <div class="flex gap-3 items-center justify-center my-3">
      <Datetime datetime={date} size="sm" />
      <span class="text-sm">{remarkPluginFrontmatter.minutesRead}</span>
      </div>
        <ul class="gap-x-1.5 gap-y-1 flex items-center justify-center">
          {categories.map(category => (
            <span class="px-2.5 py-1 rounded-lg text-xs bg-zinc-50">{category}</span>
          ))}
          
          {tags.map(tag => (
            <Tag name={tag} hideCount />
          ))}
        </ul>
    </div>
    <main id="main-content">
      <article id="article" role="article" class="mx-auto max-w-3xl mt-8 prose">
       <Content />
      </article>
    </main>
  </SectionContainer> -->
</Layout>
