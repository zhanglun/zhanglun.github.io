---
import { SITE } from "src/config";
import Blogs from "@layouts/Blogs.astro";
import PostDetails from "@layouts/PostDetails.astro";
import getSortedPosts from "@utils/getSortedPosts";
import getPageNumbers from "@utils/getPageNumbers";
import type { MarkdownInstance } from "astro";
import type { Frontmatter } from "src/types";
import slugify from "@utils/slugify";

import { Client } from "@notionhq/client";
import { NotionAPI } from "notion-client";
import { getAllPagesInSpace } from "notion-utils";
import Layout from "@layouts/Layout.astro";
import { NotionRenderer } from "react-notion-x";

export interface Props {
  post: MarkdownInstance<Frontmatter>;
}

type PostResult = {
  params: {
    slug: string | number;
  };
  props?: {
    post: MarkdownInstance<Record<string, any>>;
  };
}[];

type PagePaths = {
  params: {
    slug: string;
  };
}[];

export async function getStaticPaths() {
  const notion = new NotionAPI();

  async function getPage(pageId: string) {
    const recordMap = await notion.getPage(pageId);

    return recordMap;
  }
  // const posts = await Astro.glob<Frontmatter>("../../../contents/{blogs,notion}/**/*.md");
  const posts = await getAllPagesInSpace(
    "WebRTC-34cff195717442f7bdc32ce899830655",
    undefined,
    getPage,
    {
      traverseCollections: false,
    }
  );

  let postResult = Object.keys(posts).map(postId => {
    return {
      params: {
        id: `/notion/${postId}`,
      },
      props: {
        recordMap: posts[postId],
      },
    };
  });
  console.log("ðŸš€ ~ file: [id].astro:64 ~ postResult ~ postResult:", postResult)

  return [...postResult];
}

const { id } = Astro.params;

console.log(id);
const { recordMap } = Astro.props;
---

<Layout>
  <NotionRenderer recordMap={recordMap} fullPage={true} darkMode={false} />
</Layout>
