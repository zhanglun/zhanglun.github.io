{"version":3,"file":"component---src-pages-archives-tsx-ddc2637e6d877197950e.js","mappings":"2KAOaA,EAAW,SAACC,GACvB,IAAQC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,SAEf,OACEC,EAAAA,cAAAA,MAAAA,CAAKC,UCVc,kCDWjBD,EAAAA,cAAAA,MAAAA,CAAKC,UCVQ,8BDWXD,EAAAA,cAAAA,KAAAA,CAAIC,UCTO,8BDSmBH,GAC9BE,EAAAA,cAAAA,IAAAA,CAAGC,UCXW,iCDWkBF,O,iFEiGxC,UApFA,YAG2C,IAAD,MAFxCG,EAEwC,EAFxCA,KACAC,EACwC,EADxCA,SAEMC,GAAY,UAAAF,EAAKG,KAAKC,oBAAV,eAAwBR,QAAS,QAC7CS,EAAYL,EAAKM,kBAAkBC,MAAMC,MAAM,GAAGC,UAClDC,GAAW,UAAAV,EAAKG,KAAKC,oBAAV,eAAwBO,OAAQ,GAC3CC,GAAc,UAAAZ,EAAKG,KAAKC,oBAAV,eAAwBQ,cAAe,GAmB3D,OAjBAC,QAAQC,IAAIT,GAGZA,EAAUU,SAAQ,SAACR,GACjB,IAAQS,EAAUT,EAAVS,MAERT,EAAMS,MAAQA,EAAMC,MAAK,SAACC,EAAGC,GAI3B,OAHcD,EAAEE,YAAYC,MAAQ,KACtBF,EAAEC,YAAYC,MAAQ,KAG1B,EAEH,QAIc,IAArBhB,EAAUiB,OAEVxB,EAAAA,cAACyB,EAAAA,EAAD,CACEtB,SAAUA,EACVL,MAAOM,EACPS,KAAMD,EACNE,YAAaA,GAEbd,EAAAA,cAAC0B,EAAAA,EAAD,CAAK5B,MAAM,cACXE,EAAAA,cAAAA,IAAAA,KAAAA,uBAMJA,EAAAA,cAACyB,EAAAA,EAAD,CACEtB,SAAUA,EACVL,MAAOM,EACPS,KAAMD,EACNE,YAAaA,GAEbd,EAAAA,cAAC0B,EAAAA,EAAD,CAAK5B,MAAM,2BACXE,EAAAA,cAAAA,UAAAA,CAASC,UAAU,gBACjBD,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,2BACbD,EAAAA,cAACJ,EAAAA,EAAD,CAAUE,MAAM,KAAKC,SAAS,gBAC7BQ,EAAUoB,KAAI,SAACC,GAAD,OACb5B,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,kBAAkB4B,IAAKD,EAAQE,YAC5C9B,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,yBACbD,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,yBAAyB2B,EAAQE,aAElD9B,EAAAA,cAAAA,KAAAA,CAAIC,UAAU,iBACX2B,EAAQV,MAAMS,KAAI,SAACI,GAClB,IAAMR,GAAU,GAAGQ,EAAKC,OAAOC,OAAQC,SACrC,EACA,KAFQ,KAGL,GAAGH,EAAKC,OAAOG,KAAMD,SAAS,EAAG,KAEtC,OACElC,EAAAA,cAAAA,KAAAA,CAAI6B,IAAKE,EAAKC,OAAOI,KAAMnC,UAAU,uBACnCD,EAAAA,cAAAA,KAAAA,CAAIC,UAAU,4BACZD,EAAAA,cAACqC,EAAAA,KAAD,CAAMC,GAAIP,EAAKC,OAAOI,MACnBL,EAAKT,YAAYxB,QAGtBE,EAAAA,cAAAA,OAAAA,CAAMC,UAAU,2BAA2BsB,GAC3CvB,EAAAA,cAAAA,IAAAA,CAAGC,UAAU,8BAA8B8B,EAAKQ","sources":["webpack://zhanglun.github.io/./src/components/PageHero/index.tsx","webpack://zhanglun.github.io/./src/components/PageHero/index.module.css","webpack://zhanglun.github.io/./src/pages/archives.tsx"],"sourcesContent":["import React from 'react';\nimport * as styles from './index.module.css';\n\nexport interface PageHeroProps {\n  title: string;\n  subTitle: string;\n}\nexport const PageHero = (props: PageHeroProps) => {\n  const { title, subTitle } = props;\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.inner}>\n        <h1 className={styles.title}>{title}</h1>\n        <p className={styles.subTitle}>{subTitle}</p>\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport var container = \"index-module--container--MsrZ9\";\nexport var inner = \"index-module--inner--Qy-hx\";\nexport var subTitle = \"index-module--subTitle--Sf0CJ\";\nexport var title = \"index-module--title--k4zZ7\";","import * as React from 'react';\nimport { Link, graphql, PageProps } from 'gatsby';\nimport Layout from '../components/layout';\nimport Seo from '../components/seo';\nimport { PageHero } from '../components/PageHero';\n\ntype DataProps = {\n  site: {\n    siteMetadata: {\n      title: string;\n      menu?: any[];\n      description?: string;\n    };\n  };\n  allMarkdownRemark: {\n    nodes: any[];\n    group: {\n      nodes: any[];\n    }[];\n  };\n};\n\ntype PageContextType = {\n  currentPage: number;\n  numPages: number;\n};\n\nfunction ArchivePage({\n  data,\n  location,\n}: PageProps<DataProps, PageContextType>) {\n  const siteTitle = data.site.siteMetadata?.title || 'Title';\n  const postGroup = data.allMarkdownRemark.group.slice(0).reverse();\n  const siteMenu = data.site.siteMetadata?.menu || [];\n  const description = data.site.siteMetadata?.description || '';\n\n  console.log(postGroup);\n\n  // Gatsby group不支持sort，先在逻辑中排序。\n  postGroup.forEach((group) => {\n    const { nodes } = group;\n\n    group.nodes = nodes.sort((a, b) => {\n      const aDate = a.frontmatter.date || '';\n      const bDate = b.frontmatter.date || '';\n\n      if (aDate > bDate) {\n        return -1;\n      }\n      return 1;\n    });\n  });\n\n  if (postGroup.length === 0) {\n    return (\n      <Layout\n        location={location}\n        title={siteTitle}\n        menu={siteMenu}\n        description={description}\n      >\n        <Seo title=\"All posts\" />\n        <p>No category found.</p>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout\n      location={location}\n      title={siteTitle}\n      menu={siteMenu}\n      description={description}\n    >\n      <Seo title=\"花有重开日，人无再少年·Archive·归档\" />\n      <section className=\"archive-page\">\n        <div className=\"archive-page__container\">\n          <PageHero title=\"归档\" subTitle=\"花有重开日，人无再少年\" />\n          {postGroup.map((archive) => (\n            <div className=\"archive-section\" key={archive.fieldValue}>\n              <div className=\"archive-section__head\">\n                <div className=\"archive-section__year\">{archive.fieldValue}</div>\n              </div>\n              <ul className=\"archive-posts\">\n                {archive.nodes.map((node) => {\n                  const date = `${`${node.fields.month}`.padStart(\n                    2,\n                    '0',\n                  )}-${`${node.fields.day}`.padStart(2, '0')}`;\n\n                  return (\n                    <li key={node.fields.slug} className=\"archive-posts__item\">\n                      <h3 className=\"archive-page__post-title\">\n                        <Link to={node.fields.slug}>\n                          {node.frontmatter.title}\n                        </Link>\n                      </h3>\n                      <span className=\"archive-page__post-date\">{date}</span>\n                      <p className=\"archive-page__post-excerpt\">{node.excerpt}</p>\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n          ))}\n        </div>\n      </section>\n    </Layout>\n  );\n}\n\nexport default ArchivePage;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n        menu {\n          id\n          name\n          url\n        }\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      group(field: fields___year) {\n        fieldValue\n        totalCount\n        nodes {\n          frontmatter {\n            date\n            title\n            status\n            categories\n          }\n          fields {\n            slug\n            year\n            month\n            day\n          }\n          excerpt(truncate: true, pruneLength: 80)\n        }\n      }\n    }\n  }\n`;\n"],"names":["PageHero","props","title","subTitle","React","className","data","location","siteTitle","site","siteMetadata","postGroup","allMarkdownRemark","group","slice","reverse","siteMenu","menu","description","console","log","forEach","nodes","sort","a","b","frontmatter","date","length","Layout","Seo","map","archive","key","fieldValue","node","fields","month","padStart","day","slug","Link","to","excerpt"],"sourceRoot":""}