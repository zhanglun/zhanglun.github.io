{"version":3,"file":"component---src-pages-archives-tsx-dcf0017b07c06f96f923.js","mappings":"+KAmFA,UA7EA,YAA0C,IAAD,MAAlBA,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SACrBC,GAAY,UAAAF,EAAKG,KAAKC,oBAAV,eAAwBC,QAAS,QAC7CC,EAAYN,EAAKO,kBAAkBC,MAAMC,MAAM,GAAGC,UAClDC,GAAW,UAAAX,EAAKG,KAAKC,oBAAV,eAAwBQ,OAAQ,GAC3CC,GAAc,UAAAb,EAAKG,KAAKC,oBAAV,eAAwBS,cAAe,GAmB3D,OAjBAC,QAAQC,IAAIT,GAGZA,EAAUU,SAAQ,SAACR,GACjB,IAAQS,EAAUT,EAAVS,MAERT,EAAMS,MAAQA,EAAMC,MAAK,SAACC,EAAGC,GAI3B,OAHcD,EAAEE,YAAYC,MAAQ,KACtBF,EAAEC,YAAYC,MAAQ,KAG1B,EAEH,QAIc,IAArBhB,EAAUiB,OAEVC,EAAAA,cAACC,EAAAA,EAAD,CACExB,SAAUA,EACVI,MAAOH,EACPU,KAAMD,EACNE,YAAaA,GAEbW,EAAAA,cAACE,EAAAA,EAAD,CAAKrB,MAAM,cACXmB,EAAAA,cAAAA,IAAAA,KAAAA,4JAUJA,EAAAA,cAACC,EAAAA,EAAD,CACExB,SAAUA,EACVI,MAAOH,EACPU,KAAMD,EACNE,YAAaA,GAEbW,EAAAA,cAACE,EAAAA,EAAD,CAAKrB,MAAM,cACXmB,EAAAA,cAAAA,UAAAA,CAASG,UAAU,QACjBH,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,eACdrB,EAAUsB,KAAI,SAACC,GAAD,OACbL,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,eAAeG,IAAKD,EAAQE,YACzCP,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,qBACbH,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,gBAAgBE,EAAQE,aAEzCP,EAAAA,cAAAA,KAAAA,CAAIG,UAAU,qBACXE,EAAQZ,MAAMW,KAAI,SAACI,GAClB,IAAMV,GAAW,GAAGU,EAAKC,OAAOC,OAASC,SAAS,EAAG,KAA3C,KAAoD,GACzDH,EAAKC,OAAOG,KACfD,SAAS,EAAG,KAEd,OACEX,EAAAA,cAAAA,KAAAA,CAAIM,IAAKE,EAAKC,OAAOI,MACnBb,EAAAA,cAAAA,OAAAA,CAAMG,UAAU,gBAAgBL,GAChCE,EAAAA,cAACc,EAAAA,KAAD,CAAMC,GAAIP,EAAKC,OAAOI,MAAOL,EAAKX,YAAYhB,oB,6CCnDlE,IAjBA,YAEI,IADFJ,EACC,EADDA,SAAUuC,EACT,EADSA,SAAUnC,EACnB,EADmBA,MAAOO,EAC1B,EAD0BA,KAGrB6B,GAFL,EADgC5B,YAEnB,MACKZ,EAASyC,UAE5B,OACE,uBACEf,UAAS,mBAAoBc,EAAa,OAAS,IACnD,oBAAmBA,GAEnB,gBAAC,IAAD,CAAUpC,MAAOA,EAAOO,KAAMA,IAC7B4B","sources":["webpack://zhanglun.github.io/./src/pages/archives.tsx","webpack://zhanglun.github.io/./src/components/layout.js"],"sourcesContent":["import * as React from 'react';\nimport { Link, graphql } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport Seo from '../components/seo';\n\nfunction ArchivePage({ data, location }) {\n  const siteTitle = data.site.siteMetadata?.title || 'Title';\n  const postGroup = data.allMarkdownRemark.group.slice(0).reverse();\n  const siteMenu = data.site.siteMetadata?.menu || [];\n  const description = data.site.siteMetadata?.description || '';\n\n  console.log(postGroup);\n\n  // Gatsby group不支持sort，先在逻辑中排序。\n  postGroup.forEach((group) => {\n    const { nodes } = group;\n\n    group.nodes = nodes.sort((a, b) => {\n      const aDate = a.frontmatter.date || '';\n      const bDate = b.frontmatter.date || '';\n\n      if (aDate > bDate) {\n        return -1;\n      }\n      return 1;\n    });\n  });\n\n  if (postGroup.length === 0) {\n    return (\n      <Layout\n        location={location}\n        title={siteTitle}\n        menu={siteMenu}\n        description={description}\n      >\n        <Seo title=\"All posts\" />\n        <p>\n          No category found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout\n      location={location}\n      title={siteTitle}\n      menu={siteMenu}\n      description={description}\n    >\n      <Seo title=\"All posts\" />\n      <section className=\"main\">\n        <div className=\"page-title\" />\n        {postGroup.map((archive) => (\n          <div className=\"archive-item\" key={archive.fieldValue}>\n            <div className=\"archive-item-head\">\n              <div className=\"archive-year\">{archive.fieldValue}</div>\n            </div>\n            <ul className=\"archive-item-list\">\n              {archive.nodes.map((node) => {\n                const date = `${(`${node.fields.month}`).padStart(2, '0')}-${(\n                  `${node.fields.day}`\n                ).padStart(2, '0')}`;\n\n                return (\n                  <li key={node.fields.slug}>\n                    <span className=\"archive-date\">{date}</span>\n                    <Link to={node.fields.slug}>{node.frontmatter.title}</Link>\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        ))}\n      </section>\n    </Layout>\n  );\n}\n\nexport default ArchivePage;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n        menu {\n          id\n          name\n          url\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      group(field: fields___year) {\n        fieldValue\n        totalCount\n        nodes {\n          frontmatter {\n            date\n            title\n            status\n            categories\n          }\n          fields {\n            slug\n            year\n            month\n            day\n          }\n        }\n      }\n    }\n  }\n`;\n","import * as React from 'react';\nimport { SideMenu } from './SideMenu';\n\nfunction Layout({\n  location, children, title, menu, description,\n}) {\n  const rootPath = `${__PATH_PREFIX__}/`;\n  const isRootPath = location.pathname === rootPath;\n\n  return (\n    <div\n      className={`global-wrapper ${isRootPath ? 'root' : ''}`}\n      data-is-root-path={isRootPath}\n    >\n      <SideMenu title={title} menu={menu} />\n      {children}\n    </div>\n  );\n}\n\nexport default Layout;\n"],"names":["data","location","siteTitle","site","siteMetadata","title","postGroup","allMarkdownRemark","group","slice","reverse","siteMenu","menu","description","console","log","forEach","nodes","sort","a","b","frontmatter","date","length","React","Layout","Seo","className","map","archive","key","fieldValue","node","fields","month","padStart","day","slug","Link","to","children","isRootPath","pathname"],"sourceRoot":""}