{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blogs/高性能网站优化-整合异步脚本/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"blog","name":"博文","url":"/blogs"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"lab","name":"实验室","url":"/labs"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"68c61a56-930b-5fb2-a4d2-41a2e2a6c9d5","html":"<blockquote class=\"quote\">\n<p class=\"para\">《高性能网站建设进阶指南》</p>\n</blockquote>\n<!--more-->\n<p class=\"para\">脚本如果按照常规方式加载，不仅会阻塞页面中其他内容的下载，还会阻塞脚本后面所有元素的渲染。异步加载脚本可以避免这种阻塞现象，从而提高页面加载速度。但是性能的提升是要付出代价的。代码的异步执行可能会出现竞争状态。简单地说就是页面内部的脚本需要的标示符如果是在外部文件中定义的，而当外部文件异步加载的时候，如果没有保证外部文件和内部脚本执行顺序，很有可能会出现未定义标示符的错误</p>\n<p class=\"para\">当异步加载的外部脚本与行内脚本之间存在代码依赖时，就需要通过一种保证执行顺序的方法来整合这两个脚本。</p>\n<h2 class=\"heading subtitle heading\" id=\"如何保证执行顺序\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F\" aria-label=\"如何保证执行顺序 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何保证执行顺序</h2>\n<p class=\"para\">当外部脚本按常规方式加载时，他会阻塞行内代码的执行，不会出现因为竞争状态而导致的未定义标示符错误。有几个技术可以帮助我们保证执行顺序。</p>\n<ul>\n<li>硬编码回调 (Hardcoded Callback)</li>\n<li>Window Onlad</li>\n<li>定时器 (Timer)</li>\n<li>Degrading Script Tags</li>\n</ul>\n<h3 class=\"heading\" id=\"方法1硬编码回调-Hardcoded-Callback\" style=\"position:relative;\"><a href=\"#%E6%96%B9%E6%B3%951%E7%A1%AC%E7%BC%96%E7%A0%81%E5%9B%9E%E8%B0%83-Hardcoded-Callback\" aria-label=\"方法1硬编码回调 Hardcoded Callback permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>方法1：硬编码回调 (Hardcoded Callback)</h3>\n<p class=\"para\">让外部的脚本调用内部脚本的函数，以确保代码的顺序执行。例如<a href=\"http://stevesouders.com/efws/hardcoded-callback.php?t=1398050691\" class=\"link-underline\">link</a></p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">//行内代码\nfunction init() {\n  createMenu(&#39;examples&#39;);\n}\nvar domscript = document.createElement(&#39;script&#39;);\ndomscript.src = &quot;menu-with-init.js&quot;;\ndocument.getElementsByTagName(&#39;head&#39;)[0].appendChild(domscript);\n\n//外部文件\nfunction createMenu(id) {\n  [...]\n}\n// callback to the main page\ninit();\n`&lt;/pre&gt;\n\n如果开发人员可以同时控制主页面和外部脚本，这种技术是可行的的。但是我们常常会调用第三方的 JavaScript ，比如： jQuery ，我们不可能降回调添加在 jQuery 的文件中。而且这种方法也不太灵活，一旦改变了回调函数需要同时修改外部脚本。  \n\n### 方法2： Window Onload\n\n通过监听 Window 的 onload 事件来触发行内代码的执行。这使得只要确保外部脚本在 window.onload 之前下载执行就能保证执行顺序。有些异步加载技术确保在 window.onload  触发之前加载外部脚步：</code>\n        </deckgo-highlight-code>\n<ul>\n<li>\n<p class=\"para\"><a href=\"http://zhanglun.github.io/2014/03/30/%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%AB%99%E4%BC%98%E5%8C%96-%E6%97%A0%E9%98%BB%E5%A1%9E%E5%8A%A0%E8%BD%BD%E8%84%9A%E6%9C%AC/#Script_in_Iframe\" class=\"link-underline\">Script in Iframe</a> 在IE、Firefox、Safari、Chrome 和 Opera 中保持顺序执行</p>\n</li>\n<li>\n<p class=\"para\"><a href=\"http://zhanglun.github.io/2014/03/30/%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%AB%99%E4%BC%98%E5%8C%96-%E6%97%A0%E9%98%BB%E5%A1%9E%E5%8A%A0%E8%BD%BD%E8%84%9A%E6%9C%AC/#Script_DOM_Element\" class=\"link-underline\">Script DOM</a> 在Firefox、Safari 和 Chrome 中保持顺序执行</p>\n<p class=\"para\">使用其中一种技术，再通过 window.onload 触发行内脚本就可以实现并行下载的同时保证执行顺序。<a href=\"%22http://stevesouders.com/efws/window-onload.php?t=1398076365%22\" class=\"link-underline\">查看官网demo</a>。这个例子使用了 Script in Iframe 方法加载外部脚本，几乎在所有的浏览器中它都会阻塞onload事件。外部脚本被嵌入在 menu.php 中，然后用 iframe 加载它而不是直接加载 menu.js 。依据浏览器的差异选用 addEventListener 或者 attachEvent 比简单的地使用 window.onload() 好一些。<a href=\"%22http://blog.moocss.com/tutorials/javascript-tutorials/526.html%22\" class=\"link-underline\">关于window.onload加载的多种解决方案 »</a></p>\n<p class=\"para\">Window Onload 整合技术有两个缺点：首先，必须确定异步脚本是通过阻塞 onload 事件的方式加载的。其次，可能会造成行内代码的延迟执行。如果页面还有很多其他的资源，比如图片等，那么外部脚本加载执行结束之后， window.onload内部的代码必须等到页面完全加载之后才能够执行。通常行内脚本最好在外部脚本下载和执行之后立即调用。</p>\n<h3 class=\"heading\" id=\"方法3定时器Timer\" style=\"position:relative;\"><a href=\"#%E6%96%B9%E6%B3%953%E5%AE%9A%E6%97%B6%E5%99%A8Timer\" aria-label=\"方法3定时器Timer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>方法3：定时器(Timer)</h3>\n<p class=\"para\">定时器技术指的是使用轮询方法来保证在行内代码执行之，前所依赖的外部脚本已经加载。《高性能网站建设进阶优化》一书给出的demo中可以看到<a href=\"%22http://stevesouders.com/efws/timer.php?t=1398076380%22\" class=\"link-underline\">link</a>。修改行内代码，添加一个新函数 initTimer ，负责检查依赖的命名空间和标示符是否存在。如果存在，则调用需要调用的函数；如果不存在，就在指定的时间段之后再次调用 initTimer 函数检查命名空间和标示符。</p>\n<pre>`function initTimer() {\n    if ( \"undefined\" === typeof(EFWS) ) {\n        setTimeout(initTimer, 300);\n    }\n    else {\n        init();\n    }\n}\n`</pre>\n<p class=\"para\">这个技术也有它的缺点。如果setTimeout方法中设置的事件间隔太小，可能会增加页面的开销。相反，如果设置太大，又可能造成外部脚本加载完成和行内代码开始执行之间的延迟。就上面的例子来说，如果外部脚本加载失败，即行内脚本永远无法检测到指定的命名空间，轮询将会无限进行下去。同时稍微增加了维护的成本，如果外部文件的命名空间和标示符变了，行内代码也要更新。</p>\n<h3 class=\"heading\" id=\"方法4Script-Onload\" style=\"position:relative;\"><a href=\"#%E6%96%B9%E6%B3%954Script-Onload\" aria-label=\"方法4Script Onload permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>方法4：Script Onload</h3>\n<p class=\"para\">前面的那些整合技术会增加页面的脆弱性，开销，导致页面的延迟。Script Onload 方法通过监听脚本的 onload 事件解决了所有的这些问题。<a href=\"%22http://stevesouders.com/efws/script-onload.php?t=1398081543%22\" class=\"link-underline\">link</a>。考虑到浏览器之间的差异，添加了 script 元素的 onload 和 onreadystatechange 事件处理程序。onload 在其他浏览器中有效，Opera 两者都有效。</p>\n<pre>`var DOMScript=document.createElement(\"script\");\nDOMScript.src=\"someting.js\";\nDOMScript.onloadDone=false;\nDOMScript.onload=function(){\n    DOMScript.onloadDone=true;\n    init();\n}\nDOMScript.onreadystatechange=function(){\n    if((\"loaded\" === DOMScript.readyState || \"complete\" === DOMScript.readyState) && ! DOMScript.onloadDone){\n        DOMScript.onloadDone=true;\n        init();\n    }\n}\n\n\n</li>\n</ul>\n<p class=\"para\"><strong>Script Onload 是整合异步加载外部脚本和行内脚本的首选</strong>。不引用任何外部的标示符，所以维护简单。行内脚本可以在外部脚本加载之后立即执行。同时事件处理也很简单</p>\n<p class=\"para\">……未完待续……</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F\">如何保证执行顺序</a></p>\n<ul>\n<li><a href=\"#%E6%96%B9%E6%B3%951%E7%A1%AC%E7%BC%96%E7%A0%81%E5%9B%9E%E8%B0%83-hardcoded-callback\">方法1：硬编码回调 (Hardcoded Callback)</a></li>\n</ul>\n</li>\n</ul>","headings":[{"id":"如何保证执行顺序","depth":2,"value":"如何保证执行顺序"},{"id":"方法1硬编码回调-Hardcoded-Callback","depth":3,"value":"方法1：硬编码回调 (Hardcoded Callback)"},{"id":"方法3定时器Timer","depth":3,"value":"方法3：定时器(Timer)"},{"id":"方法4Script-Onload","depth":3,"value":"方法4：Script Onload"}],"frontmatter":{"title":"高性能网站优化-确保异步加载脚本时保持执行顺序","date":"2014-04-10","cover":null,"description":null,"categories":["前端"],"tags":["web优化"]}},"previous":{"fields":{"slug":"/blogs/Node学习笔记-Node.js介绍/"},"frontmatter":{"title":"Node.js入门-Node.js 介绍"}},"next":{"fields":{"slug":"/blogs/hello-hexo/"},"frontmatter":{"title":"Hello hexo","tags":["随笔"],"categories":["随笔"],"status":null}}},"pageContext":{"id":"68c61a56-930b-5fb2-a4d2-41a2e2a6c9d5","previousPostId":"a1cb3dcf-96f7-58e5-9727-5ee493865cae","nextPostId":"6837452c-b2fa-5b22-8590-5d3f3b18de16"}},
    "staticQueryHashes": ["2841359383"]}