{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blogs/2014-03-10-Sass语法/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"blog","name":"博文","url":"/blogs"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"lab","name":"实验室","url":"/labs"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"26c36308-171a-594f-a8e5-2910797e67fc","html":"<p class=\"para\">sass是一种基于ruby语言开发的CSS预处理器。它可以使用变量，嵌套，混入，继承，运算，函数等编程语言具有的特性进行CSS的开发，使得CSS的开发变得简单粗暴清晰可维护。<br>\nsass有两种后缀文件格式：一种是sass后缀形式；一种是scss后缀形式。我选择的后缀是scss</p>\n<!--more-->\n<h2 class=\"heading subtitle heading\" id=\"注释\" style=\"position:relative;\"><a href=\"#%E6%B3%A8%E9%87%8A\" aria-label=\"注释 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>注释</h2>\n<p class=\"para\">sass有两种注释方式：一种是”/* */“，标准的CSS注释；还有一种是双斜杠形式”//“。<br>\n前者在编译之后会作为注释在CSS文件中出现，但是后者不会。</p>\n<h2 class=\"heading subtitle heading\" id=\"变量variable\" style=\"position:relative;\"><a href=\"#%E5%8F%98%E9%87%8Fvariable\" aria-label=\"变量variable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>变量(variable)</h2>\n<p class=\"para\">sass可以像编程一样编写CSS。在sass中可以声明变量，并在整个样式表中调用，是不是很酷？你可以在文件的任意位置声明变量，但是必须先声明才能使用。</p>\n<p class=\"para\">变量的声明必须是**$开头**，后面接着变量名，（就像php一样），而变量名和变量值之间则用：连接（就像写CSS一样）。在值的后面加上**!default**表示默认值。如果变量需要镶嵌在字符串之中，就必须需要写在#{}之中。</p>\n<deckgo-highlight-code language=\"sass\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">\t//单行注释，不会被编译在CSS文件上\r\n\t/*基本样式定义*/\r\n\r\n\t//这里是声明变量\r\n\t$globalFontSize:1em;\r\n\t$headerH1:1.5em;\r\n\t$bodyBgRed:red;\r\n\t$textColor:#343 !default;//默认值\r\n\t$SIZE:size;\r\n\r\n\t//这里调用变量，先声明才能调用\r\n\tbody{\r\n\t\tfont-#{$SIZE}:$globalFontSize;\r\n\t\tbackground:$bodyBgRed;\r\n\t\tcolor:$textColor;\r\n\t}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"css\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">//编译后得到的CSS\r\n/*基本样式定义*/\r\nbody {\r\n\tfont-size: 1em;\r\n\tbackground: red;\r\n\tcolor: #334433; \r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">也可以在写CSS部分的时候重新定义属性值，这样我们就不用修改引用的文件，只要重新定义需要修改的变量就可以了。</p>\n<deckgo-highlight-code language=\"css\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">//这里重新定义属性值\r\nbody{\r\n\tfont-size:$globalFontSize;\r\n\tbackground:$bodyBgRed;\r\n\tcolor:#999;//重新定义了color的值\r\n}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">------------\r\n\r\n//编译后得到的CSS\r\nbody {\r\n  font-size: 1em;\r\n  background: red;\r\n  color: #999; \r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">一个变量也可以设置多个值，通过**nth($variables,index)**来调用其中的值,<strong>其中index从1开始，不是0。</strong></p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">//声明变量\r\n$textColor:#343434 #f00 #fff #456 !default;\r\n//调用\r\nbody{\r\n\tcolor:nth($textColor,1);//选择了$textColor的第一个值#343434\r\n}\r\na{\r\n\tcolor:nth($textColor,2);//选择了$textColor的第二个值#f00\r\n}\r\np{\r\n\tcolor:$textColor;\r\n}\r\n\r\n----------\r\n\r\n//编译后得到的CSS\r\nbody {\r\n    color: #343434;\r\n}\r\na {\r\n    color: red;\r\n}\r\np {\r\n    color: #343434 red white #445566;\r\n}\r\n\r\n//**p部分编译之后color的属性值包括了$textColor所有的值；**\r\n//color:#343434 #f00 #fff #456;</code>\n        </deckgo-highlight-code>\n<p class=\"para\">##嵌套(nesting)\r\nsass分两种嵌套：一种是<strong>选择器嵌套</strong>；一种是<strong>属性嵌套</strong>。<br>\n###选择器嵌套\r\n通过在一个选择器中嵌套另一个选择器实现继承。在嵌套过程中。可以用&#x26;表示父元素选择器。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">//sass\r\n$float:left right;\r\n$navBg:#345;\r\n.nav{\r\n\tpadding:10px;\r\n\twidth:960px;\r\n\tbackground:$navBg;\r\n\tli{\r\n\t\tfloat:nth($float,1);\r\n\t}\r\n\ta{\r\n\t\tdisplay:block;\r\n\t\tpadding:5px 10px;\r\n\t\tcolor:#fff;\r\n\t\t&amp;{\r\n\t\t\t/*写在a的内部第一层*/\t\t\t\r\n\t\t\tfont-size:30px;\r\n\t\t}\r\n\t}\r\n\t&amp;{\r\n\t\t/*写在a的外部，.nav的内部第一层*/\r\n\t\tfont-size:30px;\r\n\t}\r\n}\r\n\r\n--------\r\n//编译后的CSS\t\r\n .nav {\r\n    padding: 10px;\r\n    width: 960px;\r\n    background: #334455;\r\n}\r\n.nav li {\r\n    float: left;\r\n}\r\n.nav a {\r\n    display: block;\r\n    padding: 5px 10px;\r\n    color: #fff;\r\n}\r\n.nav a {\r\n    /*写在a的内部第一层*/\r\n    font-size: 30px;\r\n}\r\n.nav {\r\n    /*写在a的外部，.nav的内部第一层*/\r\n    font-size: 30px;\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">###属性嵌套\r\n有些CSS属性有相同的单词开头，如background，可以利用属性嵌套来编写。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">//sass\r\nbody{\r\n\tbackground:{\r\n\t\tcolor:#343;\r\n\t\timage:url(../images/bg.png);\r\n\t\trepeat:repeat;\r\n\t\tposition:left top;\r\n\t\tattachment:scroll;\r\n\t\tclip:content-box;\r\n\t\tsize:50%;\r\n\t}\r\n}\r\n\r\n-------\r\n\r\n//编译后的CSS\r\n\r\nbody {\r\n  background-color: #343;\r\n  background-image: url(../images/bg.png);\r\n  background-repeat: repeat;\r\n  background-position: left top;\r\n  background-attachment: scroll;\r\n  background-clip: content-box;\r\n  background-size: 50%;\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">##混合(mixin)\r\n估计mixin可以算是sass中最强大的特性，利用mixin可以将一部分CSS从代码中抽出，定义成一个模块重复使用。可以在公用的样式中定义一个mixin模块，需要的时候直接调用就好了。同时，mixin还可以传递参数，尼玛越来越向编程了……\r\n####声明一个mixin模块\r\n使用**@mixin<strong>声明一个mixin，后面紧接着mixin的名，可以传递参数，同时给参数设定一个默认值。 但是要注意，参数也是要用$开始，而且参数名和参数值是用</strong>冒号**分开。如果一个属性有多个值，比如box-shadow等，那参数就用变量名加上三个点表示” <strong>$variable…</strong> ” 。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">//声明一个mixin模块\r\n//boxRect\r\n@mixin boxRect($W:20px,$H:20px){\r\n\twidth:$W;\r\n\theight:$H;\r\n}\r\n//box-shadow\r\n@mixin shadow($shadow...){\r\n\t-webkit-box-shadow:$shadow;\r\n\t-moz-box-shadow:$shadow;\r\n\t-o-box-shadow:$shadow;\r\n\tbox-shadow:$shadow;\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">上述代码简单的声明了两个mixin模块。</p>\n<p class=\"para\">####调用声明的mixin模块</p>\n<p class=\"para\">用**@include**调用已经声明的模块。<br>\n在@include之后紧接着mixin模块名，就像调用函数一样（尼玛简直就是在编程啊），如果模块有默认参数。模块后面的括号可以省略。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">//sass\r\n.boxRect400{\r\n\t@include boxRect();//不加参数，使用默认参数，可以省略括号,也可以留着\r\n}\r\n.boxRect200{\r\n\t/*调用了boxRect模块*/\r\n\t@include boxRect(20px,10px);\r\n}\r\n.shadow{\r\n\t/*调用了shadow模块*/\r\n\t@include shadow(0 1px 1px rgba(0,0,0,0.5));\r\n}\t\r\n.nav{\r\n\t@include boxRect(10px,10px);\r\n\t@include shadow(0 1px 1px rgba(0,0,0,0.5));\r\n\t&amp;:hover{\r\n\t\t@include shadow(0 2px 3px rgba(0,0,0,0.7));\r\n\t}\r\n} \r\n\r\n-------\r\n\r\n//编译后的CSS\r\n .boxRect400 {\r\n    width: 20px;\r\n    height: 20px;\r\n}\r\n.boxRect200 {\r\n    /*调用了boxRect模块*/\r\n    width: 20px;\r\n    height: 10px;\r\n}\r\n.shadow {\r\n    /*调用了shadow模块*/\r\n    -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, 0.5);\r\n    -moz-box-shadow: 0 1px 1px rgba(0, 0, 0, 0.5);\r\n    -o-box-shadow: 0 1px 1px rgba(0, 0, 0, 0.5);\r\n    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.5);\r\n}\r\n.nav {\r\n    width: 10px;\r\n    height: 10px;\r\n    -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, 0.5);\r\n    -moz-box-shadow: 0 1px 1px rgba(0, 0, 0, 0.5);\r\n    -o-box-shadow: 0 1px 1px rgba(0, 0, 0, 0.5);\r\n    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.5);\r\n}\r\n.nav:hover {\r\n    -webkit-box-shadow: 0 2px 3px rgba(0, 0, 0, 0.7);\r\n    -moz-box-shadow: 0 2px 3px rgba(0, 0, 0, 0.7);\r\n    -o-box-shadow: 0 2px 3px rgba(0, 0, 0, 0.7);\r\n    box-shadow: 0 2px 3px rgba(0, 0, 0, 0.7);\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">####@content的诞生\r\n为了解决CSS3中@media带来的麻烦，sass引入了**@content**使得mixin可以接受一整块的样式。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">//声明模块\r\n//这个模块包含了要定义的属性，和前面的讲到的使用是一样的\r\n@mixin mediaContent(){\r\n\twidth:200px;\r\n\theight:100px;\r\n\tcolor:#345;\r\n\tfont-size:20px;\r\n}\r\n//使用@content来引入一整块样式\r\n@mixin max-screen($max){\r\n\t@media screen and (max-width:$max){\r\n\t\t@content;//接受的样式块从这里开始\r\n\t}\r\n}\r\n//调用模块\r\n@include max-screen(720px){\r\n\tbody{\r\n\t\t@include mediaContent();\r\n\t}\r\n}\r\n\r\n-------\r\n\r\n//编译后的CSS\r\n@media screen and (max-width: 720px) {\r\n  body {\r\n    width: 200px;\r\n    height: 100px;\r\n    color: #345;\r\n    font-size: 20px;\r\n  }\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">##继承(extend)</p>\n<p class=\"para\">@extend可以复制一个class或者ID中的属性，然后将它们添加到另一个class或者ID的属性列中。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">//sass\r\n//sass\r\n.blue_button{\r\n\tbackground:#336699;\r\n\tfont-weight:bold;\r\n\tcolor:white;\r\n\tpadding:5px;\r\n}\r\n.org_button{\r\n\tborder-color:orange;\r\n}\r\n//对比一下@include\r\n@mixin red_button(){\r\n\tbackground:#f00;\r\n\tfont-weight:bold;\r\n\tcolor:white;\r\n\tpadding:5px;\r\n}\r\n@mixin org_button(){\r\n\tborder-color:orange;\r\n}\r\n.checkout_button{\r\n\t//继承了两个class\r\n\t@extend .blue_button;\r\n\t@extend .org_button;\r\n\t//引用了两个模块\r\n\t@include red_button();\r\n\t@include org_button();\r\n}\r\n\r\n\r\n-------\r\n\r\n//编译之后的CSS\r\n.blue_button, .checkout_button {\r\n    background: #336699;\r\n    font-weight: bold;\r\n    color: white;\r\n    padding: 5px;\r\n}\r\n.checkout_button {\r\n    background: #f00;\r\n    font-weight: bold;\r\n    color: white;\r\n    padding: 5px;\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">可以看到，使用@include即引用模块时，其实是以复制的形式添加目标的属性，而使用@extend即\r\n继承时，则是将被继承的对象和自身联合，在文件中一起声明一次，大家都叫“联合声明”。\r\n####占位选择器\r\n从3.2。0之后可以定义占位选择器%。<br>\n假设在基础文件中定义了很多基础的样式，然后实际上不管是否使用@extend继承相应的样式，所有的代码都会编译解析成CSS，这样一来就会有很多多余的CSS。占位选择器的诞生很好的解决了这个问题。添加了占位选择器之后，只有被继承了的部分才会被解析出来。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">//sass\r\n%bgRed{\r\n\tbackground:red;\r\n}\r\nbgBlue{\r\n\tbackground:blue;\r\n}\r\n%bgYellow{\r\n\tbackground:yellow;\r\n}\r\nbody{\r\n\t@extend %bgRed;\r\n}\r\n\r\n-------\r\n\r\n//编译之后的CSS\r\nbody {\r\n    background: red;\r\n}\r\n.bgBlue {\r\n    background: blue;\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">定义了两个占位选择器%bgRed和%bgYellow，但是%bgYellow没有调用，所以在解析的时候便不会包含bgYellow部分。\r\n占位选择器可以使CSS文件更加精炼简洁。一般用在定义基础的样式定义上。</p>\n<p class=\"para\">##运算\r\nsass可以对数值进行加减乘除四则运算。注意运算符前面要加上一个空格。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$baseFontSize:14px;\r\n$baseWidth:200;\r\n\r\n//\r\n$baseHeight:($baseFontSize *$baseWidth)/2+30;\r\nbody{\r\n\theight:$baseHeight;\r\n}\r\n\r\n-------\r\n\r\n//编译之后的CSS\r\nbody {\r\n  height: 1430px;\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">值得注意的是：在运算表达式中，如果有多个变量，最好保证只有一个带单位的变量，不然很有可能报错。上述的代码中，如果将$baaeWidth中的”200”改成”200px”,就有多个单位，将会报错，无法通过编译。</p>\n<p class=\"para\">##函数\r\nsass定义了一些很多函数可以使用，同时也可以自己定义函数，@function。\r\n使用函数的方法也很简单，使用函数名加上括号就可以了，有参数的话就带上参数。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">//sass\r\n@function pxToRem($px){\r\n\t@return $px / $baseFontSize *1rem;\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">#####sass几个常见用的颜色函数\r\nLighten/Darken函数，修改亮度</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">#page{\r\n\tcolor:lighten(#336699,20%);\r\n}\r\n//编译后的CSS\r\n#page{\r\n\tcolor:#6699cc;\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">Saturate/Desaturate函数，修改饱和度</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$main_color:#336699;\r\n#page{\r\n\tcolor:saturate($main_color,30%);\r\n}\r\n//编译后的CSS\r\n#page{\r\n\tcolor:#1466b8;\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">adjust-hue函数，修改色度</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$main_color:#336699;\r\n#page{\r\n\tcolor:adjust-hue($main_color,180);\r\n}\r\n#page{\r\n\tcolor:adjust-hue(desaturate($main_color,10%),90);\r\n}\r\n\r\n//编译之后的CSS\r\n#page {\r\n  color: #996633; }\r\n\r\n#page {\r\n  color: #8f3d8f; \r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">grayscale函数，100%\\降低饱和度，这个方法与下面代码是一样的效果。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">desaturate(#336699,100%);</code>\n        </deckgo-highlight-code>\n<p class=\"para\">Mix函数，混合颜色</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">#page{\r\n\tcolor:mix(#336699,#993266);\r\n}\r\n//编译后的CSS\r\n#page {\r\n    color: #664c7f;\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">##选择和循环\r\n条件判断\r\nsass真的就是将CSS当成编程语言来折腾了。提供<strong>判断</strong>和<strong>循环</strong>来编写CSS。\r\n####选择\r\n<strong>@if</strong>可可以和**@else**结合多条件使用，就像写程序一样。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">//sass\r\n$type: monster;\r\np {\r\n  @if $type == ocean {\r\n    color: blue;\r\n  } @else if $type == matador {\r\n    color: red;\r\n  } @else if $type == monster {\r\n    color: green;\r\n  } @else {\r\n    color: black;\r\n  }\r\n}\r\n\r\n-------\r\n//编译之后的CSS\r\np {\r\n  color: green; \r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">####for循环</p>\n<p class=\"para\">for循环有两种形式，分别为：</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">@for $var from &lt;start&gt; through &lt;end&gt;</code>\n        </deckgo-highlight-code>\n<p class=\"para\">和</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">@for $var from &lt;start&gt; to &lt;end&gt;。</code>\n        </deckgo-highlight-code>\n<p class=\"para\">$i表示变量，start表示起始值，end表示结束值，这<strong>两个的区别</strong>是关键字<strong>through</strong>表示<strong>包括end</strong>这个数，而<strong>to</strong>则<strong>不包括end</strong>这个数。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">//sass\r\n@for $i from 1 through 3 {\r\n\t.item-#{$i} { width: 2em * $i; }\r\n}\r\n\r\n-------\r\n//编译之后的CSS\r\n.item-1 {\r\n  width: 2em; \r\n}\r\n.item-2 {\r\n  width: 4em; \r\n}\r\n.item-3 {\r\n  width: 6em; \r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">####sass中的三目运算\r\nif($condition, $if_true, $if_false) 。<br>\n三个参数分别表示条件，条件为真的值，条件为假的值。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">if(true, 1px, 2px) =&gt; 1px\r\nif(false, 1px, 2px) =&gt; 2px</code>\n        </deckgo-highlight-code>\n<hr>\n<blockquote class=\"quote\">\n<p class=\"para\">基本语法结束，在学习过程中感觉到了sass的魅力。编写CSS变得有趣，而且简单粗暴！！！！！</p>\n</blockquote>","tableOfContents":"<ul>\n<li><a href=\"#%E6%B3%A8%E9%87%8A\">注释</a></li>\n<li><a href=\"#%E5%8F%98%E9%87%8Fvariable\">变量(variable)</a></li>\n</ul>","headings":[{"id":"注释","depth":2,"value":"注释"},{"id":"变量variable","depth":2,"value":"变量(variable)"}],"frontmatter":{"title":"Sass基本语法","date":"2014-03-10","cover":null,"description":null,"categories":["前端"],"tags":["CSS","Sass"]}},"previous":{"fields":{"slug":"/blogs/高性能网站优化-创建快速响应的web/"},"frontmatter":{"title":"高性能网站优化-创建快速响应的Web"}},"next":null},"pageContext":{"id":"26c36308-171a-594f-a8e5-2910797e67fc","previousPostId":"9a21001a-7549-5923-b6a3-81627d512d5b","nextPostId":null}},
    "staticQueryHashes": ["2841359383"]}