{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blogs/2016-08-13-输入框插入表情的实现/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"blog","name":"博文","url":"/blogs"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"lab","name":"实验室","url":"/labs"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"074202c8-ea93-5b02-bab6-cf5c58269207","html":"<p class=\"para\">在普通的 textarea 中，只能显示普通的文本。如果简单的输入文本，textarea 便足以胜任。但是实际情况往往要复杂得多。</p>\n<!--more-->\n<h3 class=\"heading\" id=\"简单版本的插入表情\" style=\"position:relative;\"><a href=\"#%E7%AE%80%E5%8D%95%E7%89%88%E6%9C%AC%E7%9A%84%E6%8F%92%E5%85%A5%E8%A1%A8%E6%83%85\" aria-label=\"简单版本的插入表情 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>简单版本的插入表情</h3>\n<p class=\"para\">常见的版本一般都是使用 textarea，然后表情使用某种约定的文本格式代替，比如“你好啊[微笑]”。在呈现的时候，通过固定的文本解析方法将内容中的表情文本替换成图片。新浪微博中发微博的输入框就是如此。但是，在这有一点需要注意，如果只是简单的在文本的最后插入表情之类的预定好的文本格式，只需获取到到 textarea 的 value 然后做加法即可。</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">let editor = document.querySelect(&#39;#editor&#39;);\neditor.value += &#39;[微笑]&#39;;</code>\n        </deckgo-highlight-code>\n<h3 class=\"heading\" id=\"没你想的这么简单\" style=\"position:relative;\"><a href=\"#%E6%B2%A1%E4%BD%A0%E6%83%B3%E7%9A%84%E8%BF%99%E4%B9%88%E7%AE%80%E5%8D%95\" aria-label=\"没你想的这么简单 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>没你想的这么简单</h3>\n<p class=\"para\">但实际情况却没有这么简单，因为用户可以自己选择光标的位置。当用户在某一段文本中间插入光标之后，可不是简单的加法了。在这种情况下，需要获取到光标所在位置，在这个位置上插入用来代替表情的文本，然后将光标设置到表情文本的后面。在这需要两个额外的方法：<code>getCaretPosition</code>和 <code>setCaretPosition</code> 。</p>\n<h3 class=\"heading\" id=\"getCaretPositionsetCaretPosition\" style=\"position:relative;\"><a href=\"#getCaretPositionsetCaretPosition\" aria-label=\"getCaretPositionsetCaretPosition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getCaretPosition/setCaretPosition</h3>\n<p class=\"para\">浏览器并没有提供直接获取光标位置的方法，需要我们变通的处理。浏览器基本上都支持文本框的<code>select()</code>方法，这个方法用于选中文本框中所有的文本，但是只能乖乖的拿到返回的所有文本。HTML5 添加了两个属性：selectionStart 和 selectionEnd 帮助我们更加顺利地获取选择的文本。这两个属性中保存的是基于0的数值，表示所选择的文本的范围，分别表示文本选区（选中的文本）开头和结尾相对整个文本内容的偏移量（在整个文本内容中的位置）。例如：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">let editor = document.querySelector(&#39;#editor&#39;);\n// 从第一个字符开始，选中三个字符\neditor.selectionStart = 0;\neditor.selectionEnd = 1;\n\n// 从第三个字符开始选中三个字符\neditor.selectionStart = 2;\neditor.selectionEnd = 5;\n</code>\n        </deckgo-highlight-code>\n<p class=\"para\">说到这你可能要问了，这个光标有啥关系啊？别急，听我慢慢说。既然上述两个设置不同数字可以选择文本，那如果两个值设置成相同的数字，会怎么样呢？</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">// 从第三个字符开始选中零个字符\neditor.selectionStart = 2;\neditor.selectionEnd = 2;\n</code>\n        </deckgo-highlight-code>\n<p class=\"para\">起点和终点重合了！那么换个角度来描述就是：当我们在获取光标位置的时候，其实就是选中的文本范围起点和重点重合，相当于文本范围的起点偏移量其实就是光标所在的位置偏移量，所以此时<code>selectionStart</code>的返回值就是我们需要的结果。</p>\n<p class=\"para\">更关键的是，当 End 和 Start 设置成相同值时，选区也是空的，起点和重点充电，就好像是设置了光标的位置。其实有一个简便的方法 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange\" class=\"link-underline\">setSelectionRange(start, end)</a>，原理相同。</p>\n<p class=\"para\">当然有兴趣你也可以试试 End小于 Start的情况。上述这些在现代浏览器和 IE9+ 上都支持。</p>\n<p class=\"para\">前端向来麻烦的还是浏览器的兼容问题。在低版本的 IE 中只能使用 <code>document.selection</code> 对象来模拟光标定位了。<code>document.selection</code> 只存在于 IE8 及更早的版本（可以使用 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/getSelection\" class=\"link-underline\">window.getSelection</a> 代替），保存着用户在整个文档范围内选择的文本信息，但是无法确定用户选择的是页面中哪个部位的文本。要想取得选择的文本，首先需要创建一个范围（Range，IE9+ 支持 DOM Range API，但是 IE8及之前的版本不支持，但是有类似的概念，text range。这是 IE 专有的特性）。可使用 <code>document.selection.createTextRange</code> 来创建我们所需要的 text range。然后利用<a href=\"https://msdn.microsoft.com/en-us/library/ms536623(v=vs.85).aspx\" class=\"link-underline\">moveStart()</a>将文本的范围的起点从当前位置（当前位置起点和重点是重合的）移动到文本的开头，然后计算选中文本的长度，这个长度值可以用来代替当前光标的位置。</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">let range = document.selection.createRange();\nrange.moveStart(&quot;character&quot;, editor.value.length);\ncursurPosition = range.text.length;</code>\n        </deckgo-highlight-code>\n<p class=\"para\">设置光标位置思路类似，但是代码稍有不同：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">let range = editor.createTextRange();\nrange.collapse(true);\nrange.moveEnd(&#39;character&#39;, pos);\nrange.moveStart(&#39;character&#39;, pos);\nrange.select();</code>\n        </deckgo-highlight-code>\n<p class=\"para\">总的来说，在 textarea 中获取和设置光标位置还是蛮简单的。讲到这里了，我想插入表情应该是很轻松的一件事情了</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">获取光标位置（文本范围前后重叠） -&gt; 修改文本范围（或者手动拼接） -&gt; 重新设置光标位置 </code>\n        </deckgo-highlight-code>\n<p class=\"para\">至此，表情插入功能的基本实现。</p>\n<h3 class=\"heading\" id=\"还没结束\" style=\"position:relative;\"><a href=\"#%E8%BF%98%E6%B2%A1%E7%BB%93%E6%9D%9F\" aria-label=\"还没结束 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>还没结束</h3>\n<p class=\"para\">上述例子中，在输入框中表情只能以文本的形式呈现。如果想在输入框中呈现输入的表情，该怎么办呢？使用 contenteditable 属性为 true 的容器代替 textarea 是必须的，因为 textarea 中只能显示文本。但是这就足够了吗？不，显然不够。没有了 textarea 则以为这没有了 setSelectionRange, selectionStart 和 selectionEnd。但是好在原理也是类似，依旧使用 Range API 或者 Text Range(IE8及其更低版本)。具体的可以参考这篇：<a href=\"https://segmentfault.com/a/1190000005869372\" class=\"link-underline\">html元素contenteditable属性如何定位光标和设置光标</a>和这篇<a href=\"http://www.xiaomlove.com/2015/10/14/%E5%9C%A8%E5%8F%AF%E7%BC%96%E8%BE%91%E7%9A%84div%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/\" class=\"link-underline\">在可编辑的div中插入图片</a>。 具体实现代码我就不贴了，大家可以自己思考捋一捋。举一反三，如果你真真正正地知道如何正确插入图片，那么插入复杂的 DOM 结构对你来说也是轻而易举。</p>","tableOfContents":"<ul>\n<li><a href=\"#%E7%AE%80%E5%8D%95%E7%89%88%E6%9C%AC%E7%9A%84%E6%8F%92%E5%85%A5%E8%A1%A8%E6%83%85\">简单版本的插入表情</a></li>\n<li><a href=\"#%E6%B2%A1%E4%BD%A0%E6%83%B3%E7%9A%84%E8%BF%99%E4%B9%88%E7%AE%80%E5%8D%95\">没你想的这么简单</a></li>\n<li><a href=\"#getcaretpositionsetcaretposition\">getCaretPosition/setCaretPosition</a></li>\n<li><a href=\"#%E8%BF%98%E6%B2%A1%E7%BB%93%E6%9D%9F\">还没结束</a></li>\n</ul>","headings":[{"id":"简单版本的插入表情","depth":3,"value":"简单版本的插入表情"},{"id":"没你想的这么简单","depth":3,"value":"没你想的这么简单"},{"id":"getCaretPositionsetCaretPosition","depth":3,"value":"getCaretPosition/setCaretPosition"},{"id":"还没结束","depth":3,"value":"还没结束"}],"frontmatter":{"title":"输入框插入表情的实现","date":"2016-08-13","cover":null,"description":null,"categories":["前端"],"tags":["JavaScript"]}},"previous":{"fields":{"slug":"/blogs/2016-09-25-实现一个稍微复杂的simplelist/"},"frontmatter":{"title":"实现一个稍微复杂的simplelist"}},"next":{"fields":{"slug":"/blogs/2016-08-05-Electron 开发的 gulp 配置/"},"frontmatter":{"title":"Electron 开发的 gulp 配置","tags":["electron"],"categories":["前端"],"status":null}}},"pageContext":{"id":"074202c8-ea93-5b02-bab6-cf5c58269207","previousPostId":"c9476842-70de-5256-b70d-39c555374739","nextPostId":"555f9de2-fc40-5a78-a55c-2e52ce59ad80"}},
    "staticQueryHashes": ["2841359383"]}