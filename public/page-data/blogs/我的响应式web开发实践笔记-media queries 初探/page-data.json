{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blogs/我的响应式web开发实践笔记-media queries 初探/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"blog","name":"博文","url":"/blogs"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"lab","name":"实验室","url":"/labs"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"4e82c1ff-76be-567c-a3d2-c1ce921e3b1a","html":"<blockquote class=\"quote\">\n<p class=\"para\">很久以前就接触到了响应式Web开发这回事，自己也玩弄过一阵。当时没有整理成笔记，现在在重构自己的在线简历以及hexo主题制作过程中涉及到，就顺手整理成一个系列吧。</p>\n</blockquote>\n<p class=\"para\">响应式web设计并非新的技术，只不过将已有的开发技巧（弹性布局、弹性图片和媒体查询等）整合在了一起，</p>\n<h3 class=\"heading\" id=\"先来说说媒体查询Media-Queries\" style=\"position:relative;\"><a href=\"#%E5%85%88%E6%9D%A5%E8%AF%B4%E8%AF%B4%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2Media-Queries\" aria-label=\"先来说说媒体查询Media Queries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>先来说说媒体查询（Media Queries）</h3>\n<p class=\"para\">早在 HTML4 和 CSS2 的时代，就已经支持采用不同的样式表来适配不同的媒体设备类型。比如，一个文档在屏幕上和打印时可能使用不同的样式表。在 HTML4中，可以这么写：</p>\n<deckgo-highlight-code language=\"html\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen&quot; href=&quot;sans-serif.css&quot;&gt;\r\n&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;print&quot; href=&quot;serif.css&quot;&gt;</code>\n        </deckgo-highlight-code>\n<p class=\"para\">在内联的 CSS 样式中，可以像这样指定一部分CSS样式块应用在指定的媒体设备上：</p>\n<deckgo-highlight-code language=\"css\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">@media screen {\r\n    * { font-family: sans-serif }\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">媒体类型就不在此列举了。如果想让多个媒体设备采用同一套样式，只需在media属性中添加媒体类型的名称，用逗号分开就可以了：</p>\n<deckgo-highlight-code language=\"html\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen, print, resolution &gt; 90dpi&quot; href=&quot;serif.css&quot;&gt;\r\n&lt;style&gt;\r\n    @media screen {\r\n      * { font-family: sans-serif }\r\n    }\r\n&lt;/style&gt;</code>\n        </deckgo-highlight-code>\n<p class=\"para\">而CSS3 中的媒体查询（Media Queries）就是建立在 HTML4 的媒体查询的语法机制之上，其语法符合 HTML4 中保留的媒体类型语法。HTML4 中的 <code>media</code> 属性同样存在于 XHTML 和 一般的 XML 中。但是，媒体查询的解析规则不兼容 HTML4 的解析规则，因此，适用于 CSS 中的媒体查询。</p>\n<p class=\"para\">CSS3 中的媒体查询一个媒体类型和零个或者多个检查特定媒体功能的状况的表达式组成。\r\n这些表达式会被解析成真或假。如果媒体查询中的媒体类型与文档要展示的设备相符则查询结果为真，并且媒体查询中的所有表达式为真。媒体类型默认情况是 <code>all</code></p>\n<deckgo-highlight-code language=\"html\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (max-width: 800px)&quot; href=&quot;example.css&quot; /&gt;\r\n\r\n@import url(color.css) screen and (color);\r\n\r\n&lt;style&gt;\r\n    @media screen and (max-width: 600px) {\r\n      .facet_sidebar {\r\n        display: none;\r\n      }\r\n    }\r\n&lt;/style&gt;</code>\n        </deckgo-highlight-code>\n<p class=\"para\">当媒体查询为真时，相关的样式表或样式规则就会按照正常的级联规则被应用。即使媒体查询返回假， &#x3C;\\link> 标签上带有媒体查询的样式表 仍将被下载 （只不过不会被应用）。</p>\n<p class=\"para\">可以这么理解：媒体查询无非就是检查当前用户代理是何种设备，设备的某些参数：媒体类型（media type） + CSS属性。</p>\n<h3 class=\"heading\" id=\"Media-Queries支持的属性\" style=\"position:relative;\"><a href=\"#Media-Queries%E6%94%AF%E6%8C%81%E7%9A%84%E5%B1%9E%E6%80%A7\" aria-label=\"Media Queries支持的属性 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Media Queries支持的属性</h3>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>MIN/MAX</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>color</td>\n<td>整数</td>\n<td>yes</td>\n<td>每种色彩的字节数</td>\n</tr>\n<tr>\n<td>color-index</td>\n<td>整数</td>\n<td>yes</td>\n<td>色彩表中的色彩数</td>\n</tr>\n<tr>\n<td>device-aspect-ratio</td>\n<td>整数/整数</td>\n<td>yes</td>\n<td>宽高比例</td>\n</tr>\n<tr>\n<td>device-height</td>\n<td>length</td>\n<td>yes</td>\n<td>设备屏幕的输出高度</td>\n</tr>\n<tr>\n<td>device-width</td>\n<td>length</td>\n<td>yes</td>\n<td>设备屏幕的输出宽度</td>\n</tr>\n<tr>\n<td>height</td>\n<td>length</td>\n<td>yes</td>\n<td>渲染界面的高度</td>\n</tr>\n<tr>\n<td>width</td>\n<td>length</td>\n<td>yes</td>\n<td>渲染界面的宽度</td>\n</tr>\n<tr>\n<td>grid</td>\n<td>整数</td>\n<td>no</td>\n<td>是否是基于格栅的设备</td>\n</tr>\n<tr>\n<td>monochrome</td>\n<td>整数</td>\n<td>yes</td>\n<td>单色帧缓冲器中每像素字节</td>\n</tr>\n<tr>\n<td>resolution</td>\n<td>分辨率(“dpi/dpcm”)</td>\n<td>yes</td>\n<td>分辨率</td>\n</tr>\n<tr>\n<td>scan</td>\n<td>Progressive interlaced</td>\n<td>no</td>\n<td>tv媒体类型的扫描方式</td>\n</tr>\n<tr>\n<td>orientation</td>\n<td>Portrait/landscape</td>\n<td>no</td>\n<td>横屏或竖屏</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"heading\" id=\"best-breakpoints\" style=\"position:relative;\"><a href=\"#best-breakpoints\" aria-label=\"best breakpoints permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>best breakpoints</h3>\n<p class=\"para\">我现在需要解决的问题是：针对不同屏幕大小的设备的的代码块的媒体查询判断条件该如何书写，在 stackoverflow 上看到的<a href=\"http://stackoverflow.com/questions/6370690/media-queries-how-to-target-desktop-tablet-and-mobile\" class=\"link-underline\">回答</a>，the best breakpoints:</p>\n<deckgo-highlight-code language=\"html\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">&lt;style&gt;\r\n    @media (min-width:320px) { /* smartphones, iPhone, portrait 480x320 phones */ }\r\n    @media (min-width:481px) { /* portrait e-readers (Nook/Kindle), smaller tablets @ 600 or @ 640 wide. */ }\r\n    @media (min-width:641px) { /* portrait tablets, portrait iPad, landscape e-readers, landscape 800x480 or 854x480 phones */ }\r\n    @media (min-width:961px) { /* tablet, landscape iPad, lo-res laptops ands desktops */ }\r\n    @media (min-width:1025px) { /* big landscape tablets, laptops, and desktops */ }\r\n    @media (min-width:1281px) { /* hi-res laptops and desktops */ }\r\n&lt;/style&gt;</code>\n        </deckgo-highlight-code>\n<h3 class=\"heading\" id=\"如何在-sass-中使用编写媒体查询模块\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95%E5%9C%A8-sass-%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%BC%96%E5%86%99%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%E6%A8%A1%E5%9D%97\" aria-label=\"如何在 sass 中使用编写媒体查询模块 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何在 sass 中使用编写媒体查询模块</h3>\n<p class=\"para\">可以参考这篇文章：<a href=\"http://thesassway.com/intermediate/responsive-web-design-in-sass-using-media-queries-in-sass-32\" class=\"link-underline\">Responsive Web Design in Sass: Using media queries in Sass 3.2</a>\r\n首先，最简单的是使用 CSS 的语法：</p>\n<deckgo-highlight-code language=\"sass\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">// set a variable for the font size\r\n$h1-size: 36px\r\n\r\nh1 {\r\n  font-size: $h1-size;\r\n}\r\n\r\n// this will only affect wide screens\r\n@media screen and (min-width: 1024px) {\r\n  h1 {\r\n    font-size: $h1-size * 1.5;\r\n  }\r\n}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"css\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">// 编译后：\r\nh1 {\r\n  font-size: 36px;\r\n}\r\n@media screen and (min-width: 1024px) {\r\n  h1 {\r\n    font-size: 54px;\r\n  }\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">同时，sass 为 CSS 的书写提供了是一个相当杀手级功能：当你在其它选择器中嵌套 <code>@media</code> 时，如果在嵌套的 @media 中添加的属性，sass 会向上一层层查找选择器，将@media中添加的属属性应用在查找到的选择器上，并将其插入到 @media 的代码块中：</p>\n<deckgo-highlight-code language=\"sass\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">.profile-pic {\r\n    float: left;\r\n    width: 250px;\r\n    a {\r\n        color: black;\r\n        @media screen and (max-width: 320px) {\r\n            width: 100px;\r\n            color: red;\r\n        }\r\n        @media screen and (min-width: 1200px) {\r\n            float: none;\r\n            color: blue;\r\n        }\r\n    }\r\n}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"css\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">// 编译后：\r\n.profile-pic {\r\n    float: left;\r\n    width: 250px\r\n}\r\n.profile-pic a {\r\n    color: black\r\n}\r\n@media screen and (max-width: 320px) {\r\n    .profile-pic a {\r\n        width: 100px;\r\n        color: red\r\n    }\r\n}\r\n@media screen and (min-width: 1200px) {\r\n    .profile-pic a {\r\n        float: none;\r\n        color: blue\r\n    }\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">其实这个东西也是很好理解的，就不过多解释了，省得啰嗦。但是要记住：还有很多种变化的写法，比如在query中使用变量，在代码块中使用 <code>@extend</code>.etc。多用用就好了</p>\n<h3 class=\"heading\" id=\"关于-min-widthmin-height-和-max-widthmax-height-的补充20141018\" style=\"position:relative;\"><a href=\"#%E5%85%B3%E4%BA%8E-min-widthmin-height-%E5%92%8C-max-widthmax-height-%E7%9A%84%E8%A1%A5%E5%85%8520141018\" aria-label=\"关于 min widthmin height 和 max widthmax height 的补充20141018 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>关于 min-width/min-height 和 max-width/max-height 的补充：2014/10/18</h3>\n<p class=\"para\">min-width(height): 最小宽度(高度)；在媒体查询中作为检查条件时，指的是渲染界面的最小宽度（高度）。也就是说当宽度（高度）大于给定的数值时才使用这一块代码块（没有使用的 Media Queries 代码块也会加载）；相反地，max-width(height) 意思就是：当宽度（高度）小于给定的数值时才使用这一块代码块。指定的数值是一个临界值。</p>\n<p class=\"para\">有意思的东西来了！</p>\n<p class=\"para\">看下面的代码：</p>\n<deckgo-highlight-code language=\"css\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">.container{\r\n    background:white;\r\n}\r\n@media screen and (min-width:320px) { \r\n    .container{\r\n        background:red;\r\n    }\r\n}\r\n@media screen and (min-width:481px) { \r\n    .container{\r\n        background:blue;\r\n    }\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">根据CSS的解析规则，过程如下：</p>\n<ol>\n<li>container的背景色为white；</li>\n<li>当宽度大于320px时，container的背景色为red；</li>\n<li>当宽度大于481px时，container的背景色为blue；</li>\n</ol>\n<p class=\"para\">这可能是你想要的顺序，但是如果 你这样：</p>\n<deckgo-highlight-code language=\"css\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">.container{\r\n    background:white;\r\n}\r\n@media screen and (max-width:320px) { \r\n    .container{\r\n        background:red;\r\n    }\r\n}\r\n@media screen and (max-width:481px) { \r\n    .container{\r\n        background:blue;\r\n    }\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">根据CSS的解析规则，过程如下：</p>\n<ol>\n<li>container的背景色为white；</li>\n<li>当宽度小于320px时，container的背景色为red；</li>\n<li>当宽度小于481px时，container的背景色为blue；</li>\n</ol>\n<p class=\"para\">好问题来了，小于320 不就是 小于 481 了嘛？后面样式直接覆盖了前面的啊！所以在小于481px的渲染宽度中，颜色都是blue。</p>\n<p class=\"para\">同样的问题：</p>\n<deckgo-highlight-code language=\"css\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">.container{\r\n    background:white;\r\n}\r\n@media screen and (min-width:481px) { \r\n    .container{\r\n        background:blue;\r\n    }\r\n}\r\n\r\n\r\n@media screen and (min-width:321px) { \r\n    .container{\r\n        background:red;\r\n    }\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">根据CSS的解析规则，过程如下：</p>\n<ol>\n<li>container的背景色为white；</li>\n<li>当宽度大于481px时，container的背景色为blue；</li>\n<li>当宽度大于321px时，container的背景色为red；</li>\n</ol>\n<p class=\"para\">其结果显而易见，后面的样式（当宽度大于321px时）直接覆盖了前面的（当宽度大于481px时），所以在大于321px的渲染宽度中，颜色都是red。这也是我们不想看到的结果。</p>\n<p class=\"para\">为了避免出现上面这混乱的结果，我个人认为可以酱紫：</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">max大的。min小的。  \r\n\r\n使用max时，值从大到小，依次是，`小于1024px`, `小于961px`, `小于641px`.etc。这是一种桌面端优先的方式，先考虑渲染宽度大的设备。\r\n\r\n使用min时，值从小到大，依次是，`大于320px`, `大于481px`, `小于641px`.etc。这是一种移动端优先的方式，先考虑渲染宽度小的设备。\r\n\r\n如果这样理解的话，我感觉自己不会混乱了~~</code>\n        </deckgo-highlight-code>\n<p class=\"para\">参考：</p>\n<p class=\"para\">css3-mediaqueries<a href=\"http://www.w3.org/TR/css3-mediaqueries/\" class=\"link-underline\">http://www.w3.org/TR/css3-mediaqueries/</a><br>\n前端观察<a href=\"http://www.qianduan.net/media-type-and-media-query.html\" class=\"link-underline\">http://www.qianduan.net/media-type-and-media-query.html</a><br>\nW3cPlus<a href=\"http://www.w3cplus.com/content/css3-media-queries\" class=\"link-underline\">http://www.w3cplus.com/content/css3-media-queries</a></p>","tableOfContents":"<ul>\n<li><a href=\"#%E5%85%88%E6%9D%A5%E8%AF%B4%E8%AF%B4%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2media-queries\">先来说说媒体查询（Media Queries）</a></li>\n<li><a href=\"#media-queries%E6%94%AF%E6%8C%81%E7%9A%84%E5%B1%9E%E6%80%A7\">Media Queries支持的属性</a></li>\n<li><a href=\"#best-breakpoints\">best breakpoints</a></li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E5%9C%A8-sass-%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%BC%96%E5%86%99%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%E6%A8%A1%E5%9D%97\">如何在 sass 中使用编写媒体查询模块</a></li>\n<li><a href=\"#%E5%85%B3%E4%BA%8E-min-widthmin-height-%E5%92%8C-max-widthmax-height-%E7%9A%84%E8%A1%A5%E5%85%8520141018\">关于 min-width/min-height 和 max-width/max-height 的补充：2014/10/18</a></li>\n</ul>","headings":[{"id":"先来说说媒体查询Media-Queries","depth":3,"value":"先来说说媒体查询（Media Queries）"},{"id":"Media-Queries支持的属性","depth":3,"value":"Media Queries支持的属性"},{"id":"best-breakpoints","depth":3,"value":"best breakpoints"},{"id":"如何在-sass-中使用编写媒体查询模块","depth":3,"value":"如何在 sass 中使用编写媒体查询模块"},{"id":"关于-min-widthmin-height-和-max-widthmax-height-的补充20141018","depth":3,"value":"关于 min-width/min-height 和 max-width/max-height 的补充：2014/10/18"}],"frontmatter":{"title":"我的响应式web开发实践笔记-Media Queries 初探","date":"2014-10-10","cover":null,"description":null,"categories":["前端"],"tags":["CSS"]}},"previous":{"fields":{"slug":"/blogs/规范之路-重新认识了Float/"},"frontmatter":{"title":"规范之路-重新认识了Float"}},"next":{"fields":{"slug":"/blogs/使用python抓取知乎日报的api数据/"},"frontmatter":{"title":"使用python抓取知乎日报的API数据","tags":["Python","笔记"],"categories":["Python"],"status":null}}},"pageContext":{"id":"4e82c1ff-76be-567c-a3d2-c1ce921e3b1a","previousPostId":"fce9dcca-84b1-5a5c-8ca2-c95cb04054e3","nextPostId":"a0fcd692-847e-5543-8b26-1f3291adbace"}},
    "staticQueryHashes": ["2841359383"]}