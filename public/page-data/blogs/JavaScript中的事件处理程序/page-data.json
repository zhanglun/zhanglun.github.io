{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blogs/JavaScript中的事件处理程序/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"blog","name":"博文","url":"/blogs"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"lab","name":"实验室","url":"/labs"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"f80ca7f0-313e-5813-a8f3-23cfb73f59f8","html":"<p class=\"para\">JavaScript和HTML之间的交互是通过事件实现的。事件，就是文档或者浏览器窗口中发生的一些特定的交互瞬间。可以使用事件处理程序来预订事件，以便在事件发生的时候执行响应的代码。这种观察者模式的模型，使得JavaScript代码与HTML和CSS代码之间形成了松散耦合。</p>\n<!--more-->\n<p class=\"para\">##事件流\r\n事件流描述的是从页面中接受事件的顺序。但是值得注意的是，在当年的浏览器大战中的主角们采用的是几乎完全相反的事件流概念。IE的事件流是<strong>事件冒泡流</strong>，而Netscape Communicator的事件流是<strong>事件捕获流</strong>。\r\n###事件冒泡\r\nIE的事件流叫做<strong>事件冒泡</strong>（event bubbing），即事件右最具体的元素接受，然后逐级向上传播到不具体的元素，以下面的代码为例：</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">&lt;html&gt;\r\n&lt;head&gt;\r\n\t&lt;title&gt;Document&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\t&lt;div id=&quot;btn&quot;&gt;点我&lt;/div&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code>\n        </deckgo-highlight-code>\n<p class=\"para\">如果你单击了#btn，那么在IE的页面中，这个事件会如下传播：</p>\n<blockquote class=\"quote\">\n<p class=\"para\">div->body->html->document</p>\n</blockquote>\n<p class=\"para\">可以看到，事件首先在div上发生，div就是我们单击的元素。然后事件沿着DOM树向上传播，一直到document对象。\r\n所有的现代浏览器都支持事件冒泡。IE9，Firefox，Chrome和Safari则将事件一直冒泡到window对象。</p>\n<p class=\"para\">###事件捕获</p>\n<p class=\"para\">事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该是最后接收到事件。事件捕获的顾名思义就是在事件到达预定的目标之间捕获它。以上面的代码作为例子，那么单击div的时候会按照与冒泡相反的顺序触发事件。</p>\n<blockquote class=\"quote\">\n<p class=\"para\">div->body->html->document</p>\n</blockquote>\n<p class=\"para\">在这个过程中，document对象先接收到click事件，然后事件沿着DOM树依次向下，一直传递到目标元素。\r\nIE9，Firefox，Chrome和Safari都支持事件捕获。“DOM2级事件”规范要求事件应该从document对象开始传播，但实际上这些浏览器都是从window对象开始捕获事件。</p>\n<p class=\"para\">###DOM事件流</p>\n<p class=\"para\">DOM事件流比事件毛婆和事件捕获稍微复杂一点点。它规定的事件流包括三个阶段：事件捕获阶段，处于目标阶段和事件冒泡阶段。</p>\n<p class=\"para\">以前面的代码为例。单击div</p>\n<blockquote class=\"quote\">\n<p class=\"para\">document->html->body->div->body->html->document</p>\n</blockquote>\n<p class=\"para\">在DOM事件流中，实际的目标在捕获阶段不会接收到事件。也就是说在捕获阶段中，事件从document到&#x3C;html>再到&#x3C;body>后就停止了。下一个阶段是“处于目标”阶段，于是事件在目标元素上面发生，并且在事件处理中被看成了冒泡阶段的一部分。紧接着冒泡阶段发生，事件传回文档\r\n##事件处理程序\r\n###HTML事件处理程序</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">&lt;input type=&quot;button&quot; value=&quot;Click&quot; id=&quot;go&quot; onclick=&quot;showMessage()&quot; /&gt;</code>\n        </deckgo-highlight-code>\n<p class=\"para\">这玩意儿就是传说中的HTML事件处理程序。最明显的缺点就是：HTML与JavaScript代码紧密耦合。如果要更换事件处理程序，就要同时修改HTML和JavaScript代码。\r\n###DOM0级事件处理程序\r\n通过JavaScript制定事件处理程序的传统方法，就是讲一个函数赋值给一个叫做“事件处理程序”的属性。每个元素都有自己的事件处理程序属性，这些属性通常全部都是小写，例如onclick。将事件处理程序设置为一个函数，就可以指定事件处理程序。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">var btn=document.getElementById(&quot;myBtn&quot;);\t\r\nbtn.onclick=function(){\r\n\talert(&quot;Clicked!&quot;);\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">要使用JavaScript指定事件处理程序，必须先获得对象元素的引用，然后为其指定事件处理程序的函数。\r\n事件处理程序是在元素的作用域中运行的，也就是说程序中的this指向的是当前元素。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">var btn=document.getElementById(&quot;myBtn&quot;);\t\r\nbtn.onclick=function(){\r\n\talert(this.id);//&quot;myBtn&quot;\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">以这种当时添加的事件处理程序会在事件流的冒泡阶段被处理。\r\n通过将事件处理程序属性的值设置成null就可以删除事件处理程序。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">btn.onclick=null;\t</code>\n        </deckgo-highlight-code>\n<p class=\"para\">###DOM2级事件处理程序\r\n“DOM2级事件”规定了两个方法用于操作事件处理程序：addEventListener()和removeEventListener()。所有的节点都包含这两个方法，接收三个参数：要处理的事件名，作为事件处理程序的函数和一个布尔值。最后的参数如果是true，表示在事件捕获阶段调用事件处理程序，如果是false，表示在事件冒泡阶段调用事件处理程序。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">var btn=document.getElementById(&quot;myBtn&quot;);\t\r\nbtn.addEventListener(&quot;click&quot;,function(){\r\n\talert(this.id);\r\n},false);</code>\n        </deckgo-highlight-code>\n<p class=\"para\">DOM0级事件处理程序只能为一个元素添加唯一的某一个事件的处理程序。如果为一个元素添加了两个click的处理程序，后定义的程序会覆盖掉之前定义的程序，其实也就是给变量a多次赋值一样。使用DOM2级事件处理程序的好处之一就是：可以添加多个添加多个事件处理程序。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">var btn=document.getElementById(&quot;myBtn&quot;);\r\nbtn.addEventListener(&quot;click&quot;,function(){\r\n\talert(this.id);\r\n},false);\r\nbtn.addEventListener(&quot;click&quot;,function(){\r\n\talert(&quot;hello,world&quot;);\r\n},false);</code>\n        </deckgo-highlight-code>\n<p class=\"para\">这两个事件处理程序会按照添加的顺序触发。</p>\n<p class=\"para\">通过addEventListener()添加的事件处理程序只能使用removeEventListener()来移除。通过addEventListener()添加的匿名函数无法移除，因为移除是传入的参数一添加处理程序时使用的参数<strong>必须相同</strong>。</p>\n<p class=\"para\">为了最大限度地兼容浏览器，建议在大多数情况下豆浆事件处理程序添加到事件流的冒泡阶段。</p>\n<p class=\"para\">###IE中的事件处理程序</p>\n<p class=\"para\">IE中有类似于DOM的两个方法：attachEvent()和detachEvent()。这两个方法接受两个参数：事件处理程序名称和事件处理程序函数。attachEvent()添加的事件处理程序都会添加到冒泡阶段</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">var btn=document.getElementById(&quot;myBtn&quot;);\r\nbtn.attachEvent(&quot;onclick&quot;,function(){\r\n\talert(&quot;alert&quot;);\r\n});</code>\n        </deckgo-highlight-code>\n<p class=\"para\">要注意哟，第一个参数是“onclick”而不是“click”。前面说到，在DOM0级事件中，事件处理程序的作用域是元素的作用域，而在使用attachEvent()时，作用域变成了全局作用域，此时this等于window</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">var btn=document.getElementById(&quot;myBtn&quot;);\r\nbtn.attachEvent(&quot;onclick&quot;,function(){\r\n\talert(this==widnow);//&quot;true&quot;\r\n});</code>\n        </deckgo-highlight-code>\n<p class=\"para\">与addEventListener()一样，attachEvent()也可以用来为一个元素天剑多个事件处理程序，不过与DOM方法不同的是，事件处理程序不是按照添加的顺序执行，而是以相反的顺序执行。\r\n可以使用detachEvent()移除使用attachEvent()添加的事件处理程序。与DOM方法一样必须提供相同的参数，添加的匿名函数不能被移除。</p>\n<p class=\"para\">因此跨浏览器的事件处理程序可以这么写： （来自《JavaScript高级程序设计》）</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">var EventUtil = {\r\n    addHandler: function (element, type, handler) {\r\n        if (element.addEventListener) {\r\n            element.addEventListener(type, handler, false);\r\n        } else if (element.attachEvent) {\r\n            element.attachEvent(&quot;on&quot; + type, handler);\r\n        } else {\r\n            element[&quot;on&quot; + type] = handler;\r\n        }\r\n    },\r\n    removeHandler: function (element, type, handler) {\r\n        if (element.removeEventListener) {\r\n            element.removeEventListener(type, handler, false);\r\n        } else if (element.detachEvent) {\r\n            element.detachEvent(&quot;on&quot; + type, handler);\r\n        } else {\r\n            element[&quot;on&quot; + type] = null;\r\n        }\r\n    }\r\n};\r\nvar btn = document.getElementById(&quot;myBtn&quot;);\r\nvar handler = function () {\r\n        alert(&quot;Clicked&quot;);\r\n    };\r\nEventUtil.addHandler(btn, &quot;click&quot;, handler);\r\nEventUtil.removeHandler(btn, &quot;click&quot;, handler);</code>\n        </deckgo-highlight-code>\n<h2 class=\"heading subtitle heading\" id=\"参考资料\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\" aria-label=\"参考资料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考资料</h2>\n<ul>\n<li>《JavaScript高级程序设计》</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\">参考资料</a></li>\n</ul>","headings":[{"id":"参考资料","depth":2,"value":"参考资料"}],"frontmatter":{"title":"JavaScript中的事件处理程序","date":"2014-04-06","cover":null,"description":null,"categories":["前端"],"tags":["JavaScript"]}},"previous":{"fields":{"slug":"/blogs/hello-hexo/"},"frontmatter":{"title":"Hello hexo"}},"next":{"fields":{"slug":"/blogs/高性能网站优化-无阻塞加载脚本/"},"frontmatter":{"title":"高性能网站优化-无阻塞加载脚本","tags":["web优化"],"categories":["前端"],"status":null}}},"pageContext":{"id":"f80ca7f0-313e-5813-a8f3-23cfb73f59f8","previousPostId":"6837452c-b2fa-5b22-8590-5d3f3b18de16","nextPostId":"af036023-daf0-5718-b898-614ae3795ee1"}},
    "staticQueryHashes": ["2841359383"]}