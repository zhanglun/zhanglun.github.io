{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blogs/git使用笔记(一)/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"blog","name":"博文","url":"/blogs"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"lab","name":"实验室","url":"/labs"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"3ffa5f00-9101-5bf7-8e31-69205c8d5aa4","html":"<h3 class=\"heading\" id=\"一般处理\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E8%88%AC%E5%A4%84%E7%90%86\" aria-label=\"一般处理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一般处理</h3>\n<p class=\"para\">初始化:</p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git init </code>\n        </deckgo-highlight-code>\n<p class=\"para\">这样就会在当前目录创建版本库.</p>\n<h4 class=\"heading\" id=\"常用指令\" style=\"position:relative;\"><a href=\"#%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4\" aria-label=\"常用指令 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>常用指令:</h4>\n<p class=\"para\">添加文件：</p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git add FILENAME</code>\n        </deckgo-highlight-code>\n<p class=\"para\">删除文件索引,<strong>并且删除文件</strong>：</p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git rm FILENAME</code>\n        </deckgo-highlight-code>\n<p class=\"para\">重命名：</p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git mv OLDFILENAME NEWFILENAME</code>\n        </deckgo-highlight-code>\n<p class=\"para\">提交更新,全部：</p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git commit -a</code>\n        </deckgo-highlight-code>\n<p class=\"para\">查看日志.</p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git log</code>\n        </deckgo-highlight-code>\n<p class=\"para\">查看指定版本日志.</p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git show xxxxx</code>\n        </deckgo-highlight-code>\n<p class=\"para\">切换分支.</p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git checkout BRANCHNAME</code>\n        </deckgo-highlight-code>\n<p class=\"para\">创建新的分支.</p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git branch BRANCHNAME</code>\n        </deckgo-highlight-code>\n<p class=\"para\">就近创建一个分支,转移所有目前修改到此分支中， 其实就是<strong>创建分支和切换分支的合并操作</strong></p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git checkout -b BRANCHNAME</code>\n        </deckgo-highlight-code>\n<p class=\"para\">实验完毕,发现可行提交后,直接返回主分支中进行合并.</p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git commit -a \r\n$ git checkout master \r\n$ git merge BRANCHNAME</code>\n        </deckgo-highlight-code>\n<p class=\"para\">分支合并,切换到需要合并的分支中,然后执行merge就能够合并.</p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git merge TARGETBRANCH</code>\n        </deckgo-highlight-code>\n<p class=\"para\">更多时候我们需要远程操作.除了直接clone出来一个完整的仓库,需要追加更新.</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git fetch git://xxxx.xxxx master:LOCALBRANCH</code>\n        </deckgo-highlight-code>\n<p class=\"para\">将远程仓库中的分支fetch到本临时分支后(例子中为origin:master),如果指定了分支,则会保存到指定分支中去(例子中为LOCALBRANCH).然后进行代码审核,最后再merge到主分支中去.</p>\n<p class=\"para\">当然,也有的时候我们对远程仓库中的代码有绝对信心,或者仅仅只是你一个人在维护,那么就可以直接获取并且合并.</p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git pull git://xxx.xxxx master</code>\n        </deckgo-highlight-code>\n<h3 class=\"heading\" id=\"Git-记录的方式\" style=\"position:relative;\"><a href=\"#Git-%E8%AE%B0%E5%BD%95%E7%9A%84%E6%96%B9%E5%BC%8F\" aria-label=\"Git 记录的方式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git 记录的方式</h3>\n<p class=\"para\">Git 是一种分布式版本控制系统，客户端并不只提取最新版本的文件快照，而是把代码仓库完整</p>\n<p class=\"para\"><img src=\"http://git-scm.com/figures/18333fig0103-tn.png\" alt=\"image\"></p>\n<p class=\"para\">图片来源：<a href=\"http://git-scm.com/figures/18333fig0103-tn.png\" class=\"link-underline\">http://git-scm.com/figures/18333fig0103-tn.png</a></p>\n<p class=\"para\">每次修改之后，Git 并不是保存这些修改之后的差异变化，实际上就像一个照相机一样，将修改后的文件拍下作为文件快照，记录在一个微型的文件系统中。每次提交更新时，检查一遍所有文件的信息</p>\n<p class=\"para\">对于任何一个文件，在 Git 内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。已提交表示该文件已经被安全地保存在本地数据库中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。</p>\n<p class=\"para\">Git 管理项目时，文件流转的三个工作区域：Git 的<strong>工作目录</strong>，<strong>暂存区域</strong>，以及<strong>本地仓库</strong>。</p>\n<p class=\"para\"><img src=\"http://git-scm.com/figures/18333fig0106-tn.png\" alt=\"image\"></p>\n<p class=\"para\">图片来源：<a href=\"http://git-scm.com/figures/18333fig0106-tn.png\" class=\"link-underline\">http://git-scm.com/figures/18333fig0106-tn.png</a></p>\n<p class=\"para\"><strong>工作区</strong>：就是电脑中可以看到的目录。<br>\n<strong>版本库</strong>：工作区中有一个隐藏目录 “.git” ，这个不算做是工作区，而是 Git 的版本库。</p>\n<p class=\"para\">基本的 Git 工作流程如下：</p>\n<p class=\"para\">第一步是用 <code>git add</code> 把文件添加进去，实际上就是把文件修改添加到暂存区（对修改后的文件进行快照，然后保存到暂存区域。）；<br>\n第二步是用 <code>git commit</code> 提交更改，实际上就是把暂存区的所有内容提交到当前分支；<br>\n第三步是用 <code>git push</code> 推送更改，将保存在暂存区域的文件快照永久转储到 Git 目录中。</p>\n<p class=\"para\">如果是 Git 目录中保存着的特定版本文件，就属于<strong>已提交状态</strong>；如果作了修改并已<strong>放入暂存区域</strong>，就属于<strong>已暂存状态</strong>；如果自上次取出后，作了修改但还没有放到暂存区域，<strong>就是已修改状态</strong>。</p>\n<p class=\"para\">图片来源：\u001c<img src=\"http://rogerdudler.github.io/git-guide/img/trees.png\" alt=\"image\">\r\n<a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" class=\"link-underline\">git简明教程</a></p>\n<h3 class=\"heading\" id=\"分支\" style=\"position:relative;\"><a href=\"#%E5%88%86%E6%94%AF\" aria-label=\"分支 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>分支</h3>\n<p class=\"para\">分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。</p>\n<p class=\"para\">从开发主线上分离开来，形成的分支可以在不影响主线的同时继续工作。git中的分支，不会创建源代码目录的完整备份，它的操作几乎在瞬间完成，在不同分支之间切换也很轻松 <code>git checkout brachname</code> 。</p>\n<p class=\"para\"><img src=\"http://rogerdudler.github.io/git-guide/img/branches.png\" alt=\"image\">\r\n图片来源：<a href=\"http://rogerdudler.github.io/git-guide/img/branches.png\" class=\"link-underline\">http://rogerdudler.github.io/git-guide/img/branches.png</a> <a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" class=\"link-underline\">git简明教程</a></p>\n<p class=\"para\">创建一个叫做“feature_x”的分支，并切换过去：</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git checkout -b feature_x</code>\n        </deckgo-highlight-code>\n<p class=\"para\">切换回主分支：</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git checkout master</code>\n        </deckgo-highlight-code>\n<p class=\"para\">再把新建的分支删掉：</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git branch -d feature_x</code>\n        </deckgo-highlight-code>\n<p class=\"para\">除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git push origin &lt;branch&gt;</code>\n        </deckgo-highlight-code>\n<h3 class=\"heading\" id=\"取消跟踪文件\" style=\"position:relative;\"><a href=\"#%E5%8F%96%E6%B6%88%E8%B7%9F%E8%B8%AA%E6%96%87%E4%BB%B6\" aria-label=\"取消跟踪文件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>取消跟踪文件</h3>\n<p class=\"para\">在项目中有很多文件不需要提交，比如IDE生成的项目文件，自动化工具 grunt等。在使用 <code>git status</code> 时，这些文件会列举在 Untracked files 中，有时候为了方便而使用 <code>git add -A</code> 命令的时候，会将这些没有被跟踪的文件添加到索引。</p>\n<p class=\"para\">如果一个不小心将某个不需要提交的修改添加到了暂存区（git add *），即：staged。如果这时进行 commit 操作，这个不想提交的修改也会一同提交到本地仓库的 HEAD 中，当然只有 push 之后修改才会提交到远端的仓库。在 commit 之前，使用</p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git rm --cached filename</code>\n        </deckgo-highlight-code>\n<p class=\"para\">便可以把它从暂存区中删除，保留源文件。</p>\n<p class=\"para\">这条命令只是在暂存区中将文件快照删除而已，并不会将源文件从项目中删除。如果想连同源文件一起删除可以使用这条命令</p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git rm filename</code>\n        </deckgo-highlight-code>\n<h3 class=\"heading\" id=\"比较提交---git-diff\" style=\"position:relative;\"><a href=\"#%E6%AF%94%E8%BE%83%E6%8F%90%E4%BA%A4---git-diff\" aria-label=\"比较提交   git diff permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>比较提交 - git diff</h3>\n<p class=\"para\">使用 <code>git diff</code> 查看文件被修改的具体内容：</p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git diff filename</code>\n        </deckgo-highlight-code>\n<p class=\"para\">也可以用来比较项目中任意两个版本的差异，比如比较两个分支之间的差异：</p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git diff brach1..brach2 </code>\n        </deckgo-highlight-code>\n<p class=\"para\">你可能还会看到下面这条看起来非常相似的命令：</p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git diff brach1...brach2 </code>\n        </deckgo-highlight-code>\n<p class=\"para\">不同之处在于：两个分支名之间的点的个数，后面这条也就是三个”.”的命令将显示出 brach1 和 brach2 共有父分支和 brach2 之间的差异。</p>\n<p class=\"para\">你通常用git diff来找你当前工作目录和上次提交与本地索引间的差异。</p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git diff</code>\n        </deckgo-highlight-code>\n<p class=\"para\">上面的命令会显示在当前的工作目录里的，没有 modified (添加到索引中)，且在下次提交时 不会被提交的修改。如果你要看在下次提交时要提交的内容(staged,添加到索引中),你可以运行：</p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git diff --cached</code>\n        </deckgo-highlight-code>\n<p class=\"para\">上面的命令会显示你当前的索引和上次提交间的差异；这些内容在不带”-a”参数运行 “git commit”命令时就会被提交。</p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ git diff HEAD</code>\n        </deckgo-highlight-code>\n<p class=\"para\">上面这条命令会显示你工作目录与上次提交时之间的所有差别，这条命令所显示的 内容都会在执行”git commit -a”命令时被提交。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E4%B8%80%E8%88%AC%E5%A4%84%E7%90%86\">一般处理</a></p>\n<ul>\n<li><a href=\"#%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4\">常用指令:</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#git-%E8%AE%B0%E5%BD%95%E7%9A%84%E6%96%B9%E5%BC%8F\">Git 记录的方式</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%88%86%E6%94%AF\">分支</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%8F%96%E6%B6%88%E8%B7%9F%E8%B8%AA%E6%96%87%E4%BB%B6\">取消跟踪文件</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%AF%94%E8%BE%83%E6%8F%90%E4%BA%A4---git-diff\">比较提交 - git diff</a></p>\n</li>\n</ul>","headings":[{"id":"一般处理","depth":3,"value":"一般处理"},{"id":"常用指令","depth":4,"value":"常用指令:"},{"id":"Git-记录的方式","depth":3,"value":"Git 记录的方式"},{"id":"分支","depth":3,"value":"分支"},{"id":"取消跟踪文件","depth":3,"value":"取消跟踪文件"},{"id":"比较提交---git-diff","depth":3,"value":"比较提交 - git diff"}],"frontmatter":{"title":"Git 使用笔记(一)-入门级的操作","date":"2014-07-16","cover":null,"description":null,"categories":[],"tags":["Git","笔记"]}},"previous":{"fields":{"slug":"/blogs/踩坑日记-ie下a标签的虚线框/"},"frontmatter":{"title":"踩坑日记-IE下 A 标签的虚线框和必须要会用的 CSS 选择器"}},"next":{"fields":{"slug":"/blogs/利用pip安装django/"},"frontmatter":{"title":"利用pip安装Django","tags":["Python"],"categories":["Python"],"status":null}}},"pageContext":{"id":"3ffa5f00-9101-5bf7-8e31-69205c8d5aa4","previousPostId":"99f79f48-120a-59b5-b2a8-010c64019001","nextPostId":"6763422f-533d-5578-a174-e3d3991ec1af"}},
    "staticQueryHashes": ["2841359383"]}