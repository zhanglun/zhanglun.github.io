{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blogs/JavaScript中不使用new的构造函数/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"blog","name":"博文","url":"/blogs"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"lab","name":"实验室","url":"/labs"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"77f3ba25-1e83-5c61-b22f-b8066288b159","html":"<p class=\"para\">在JavaScript 中，调用构造函数的方法很简单。</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">function Point(x, y){\r\n  this.x = x;\r\n  this.y = y;\r\n}\r\n\r\n// 调用Point构造函数\r\n// 使用new 关键字\r\nvar p1 = new Point(20, 30);\r\n// 不使用new 关键字\r\nvar p2 = Point(20, 30);</code>\n        </deckgo-highlight-code>\n<p class=\"para\">但是，要知道: new关键词的使用与否，产生的效果是不一样的。输出p1和p2可以很清楚的看到，\r\np1指向的是一个对象，这个对象的构造函数是Point()，而p2返回的是<code>undefined</code>。仔细一想其实也很好理解。不带new关键字的调用，实质上与调用普通的方法函数无异，关键之处在于调用时，所处的作用域为全局作用域，this指向了window，也就是说，这次调用发生之后，平白无故的为window对象增添了两个属性x和y。</p>\n<p class=\"para\">为了解决这种问题，可以在构造函数中检查当前作用域，也就是this指向何处。</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">function Point(x,y) {\r\n  if (this instanceof Point) {\r\n    this.x = x;\r\n    this.y = y\r\n  } else {\r\n    return new Point(x,y);\r\n  }\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">这样一来，即使在不使用new的情况下，构造函数也会自动使用new关键字。</p>\n<p class=\"para\">说到这，让我有了探究new 操作符和this相关的知识点！！！</p>\n<h3 class=\"heading\" id=\"JavaScript中的new\" style=\"position:relative;\"><a href=\"#JavaScript%E4%B8%AD%E7%9A%84new\" aria-label=\"JavaScript中的new permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript中的new</h3>\n<p class=\"para\">new操作符用来创建对象类型的一个实例，无论是用户自定义的对象类型还是内建对象类型，前提是得要有对象的构造函数。</p>\n<p class=\"para\">基本语法如下：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">new constructor[([arguments])]  //可以看到调用时，构造函数后面的括号和参数都可选的</code>\n        </deckgo-highlight-code>\n<p class=\"para\">使用new创建一个用户自定义对象的实例是有以下两个步骤：</p>\n<ol>\n<li>编写构造函数，定义对象类型</li>\n<li>使用new操作符创建该对象的一个实例</li>\n</ol>\n<p class=\"para\">在自定义对象类型的时候，需要创建一个函数，指明对象的名字（也就是函数名）以及属性。要知道，一个对象的属性可以来自另外的一个对象。来看看下面的例子。</p>\n<p class=\"para\">当语句<code>new foo(...)</code>在执行的时候，会发生下面的事情：</p>\n<ol>\n<li>创建一个新的对象，继承自<code>foo.prototype</code>。</li>\n<li>foo的constructor被调用，如果有指定的参数就传入参数；同时<code>this</code>与新创建的对象绑定在一起。在没有指定参数的情况下，<code>new foo</code> 和<code>new foo()</code>是相等的。在Backbone的教程中经常看到不带括号的调用。</li>\n<li>新的对象通过contructor函数，作为整个表达式的结果返回。如果contructor函数没有明确指出返回特定的对象，那么返回在第一步中创建的对象。一般来说，constructor没有返回一个值，但是可以指定返回的值来覆盖原本的对象。</li>\n</ol>\n<p class=\"para\">###JavaScript中的this</p>\n<p class=\"para\">关于this，水平有限，只是稍微了解一点js中的this。在大多数情况，this的值由函数的地阿英方式决定。this在执行期间不能被复制，每次函数调用的时候this的值也有可能会不同。它可以是全局的，当前对象或者任意对象，完全取决函数的调用方式。</p>\n<h4 class=\"heading\" id=\"全局上下文\" style=\"position:relative;\"><a href=\"#%E5%85%A8%E5%B1%80%E4%B8%8A%E4%B8%8B%E6%96%87\" aria-label=\"全局上下文 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>全局上下文</h4>\n<p class=\"para\">在全局上下文中，this指代的是全局对象。</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">console.log(this.doucment === document);   //true\r\nconsole.log(this === window);   // true\r\nthis.name = &#39;window name&#39;\r\nconsole.log(window.name);  // window name </code>\n        </deckgo-highlight-code>\n<h4 class=\"heading\" id=\"函数上下文\" style=\"position:relative;\"><a href=\"#%E5%87%BD%E6%95%B0%E4%B8%8A%E4%B8%8B%E6%96%87\" aria-label=\"函数上下文 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>函数上下文</h4>\n<p class=\"para\">在函数内部，this的值取决于函数是如何调用的。</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">function fun(){\r\n  return this;\r\n}\r\nfun() === window; // 全局对象</code>\n        </deckgo-highlight-code>\n<p class=\"para\">fun()调用时并不能决定this的值，因为代码不在严格模式下，this的值总是一个对象且默认为全局对象。而在严格模式下，this 的值根据运行时的上下文决定，如果没有定义this将是undefined。</p>\n<p class=\"para\">我们常看到类似这样的代码，声明一个全局的对象作为命名空间将一些属性方法什么的都绑定到这个对象上，借此来减少全局变量。</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">var o = {\r\n  prop: 37,\r\n  f: function() {\r\n    return this.prop;\r\n  }\r\n};\r\n\r\nconsole.log(o.f()); // logs 37</code>\n        </deckgo-highlight-code>\n<p class=\"para\">当函数以对象中的方法的当时调用时，它们的this由调用该函数的对象进行设置。所以在上面的代码中，当f以对象o的方法调用时，this指向的便是o对象。在何处或者如何定义函数完全不会影响到this的行为。因为this的值去决定于调用函数的对象，这意味下面这么做this的行为也是一致的：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">var o = {prop: 37};\r\nfunction independent(){\r\n  return this.prop;\r\n}\r\n\r\no.f = independent;\r\n\r\nconsole.log(o.f()); // 输出37</code>\n        </deckgo-highlight-code>\n<p class=\"para\">类似的，this的绑定只受最靠近的成员引用的影响。在下面的这个例子中，我们以对象o中的b对象中的g方法来调用independent方法。在这次执行期间，函数中的this将指向o.b。事实上，这与对象本身的成员没有多大关系，最靠近的引用才是最重要的。</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">o.b = {g: independent, prop: 42};\r\nconsole.log(o.b.g()); // logs 42</code>\n        </deckgo-highlight-code>\n<p class=\"para\">相同的概念在定义在原型链中的方法也是一致的。如果该方法存在于一个对象的原型链上，那么this指向的是调用这个方法的对象，表现得好像是这个方法就存在于这个对象上一样。</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">var o = {f:function(){ return this.a + this.b; }};\r\nvar p = Object.create(o);\r\np.a = 1;\r\np.b = 4;\r\n\r\nconsole.log(p.f()); // 5</code>\n        </deckgo-highlight-code>\n<p class=\"para\">在这个例子中，对象p没有属于它自己的f属性，它的f属性继承自它的原型。但是这对于最终在o中找到f属性的查找过程来说没有关系；查找过程首先从p.f的引用开始，所以函数中的this指向p。也就是说，因为f是作为p的方法调用的，所以它的this指向了p。这是JavaScript的原型继承中的一个有趣的特性。</p>\n<h4 class=\"heading\" id=\"构造函数中的this\" style=\"position:relative;\"><a href=\"#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84this\" aria-label=\"构造函数中的this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>构造函数中的this</h4>\n<p class=\"para\">当一个函数被作为一个构造函数来使用（使用new关键字），它的this与即将被创建的新对象绑定。</p>\n<p class=\"para\">注意：当构造器返回的默认值是一个this引用的对象时，可以手动设置返回其他的对象，如果返回值不是一个对象，返回this。</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">function A(){\r\n  this.name = &#39;zhanglun&#39;;\r\n}\r\nvar a = new A();\r\n\r\nconsole.log(a);  // A {name: &#39;zhanglun&#39;}\r\n\r\n// 手动设置返回一个1\r\nfunction B(){\r\n  this.name = &#39;zhanglun&#39;;\r\n  return 1\r\n}\r\nvar b = new B();\r\n\r\nconsole.log(b);  // B {name: &#39;zhanglun&#39;}\r\n\r\nfunction C(){\r\n  this.name = &#39;zhanglun&#39;;\r\n  return {}\r\n}\r\nvar c = C();\r\n\r\nconsole.log(c); // Object {}\r\n</code>\n        </deckgo-highlight-code>\n<h4 class=\"heading\" id=\"call-and-apply\" style=\"position:relative;\"><a href=\"#call-and-apply\" aria-label=\"call and apply permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>call and apply</h4>\n<p class=\"para\">当一个函数的函数体中使用了this关键字时，通过所有函数都从Function对象的原型中继承的call()方法和apply()方法调用时，它的值可以绑定到一个指定的对象上。</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">function add(c, d){\r\n  return this.a + this.b + c + d;\r\n}\r\n\r\nvar o = {a:1, b:3};\r\n\r\nadd.call(o, 5, 7); // 1 + 3 + 5 + 7 = 16\r\n\r\nadd.apply(o, [10, 20]); // 1 + 3 + 10 + 20 = 34</code>\n        </deckgo-highlight-code>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#javascript%E4%B8%AD%E7%9A%84new\">JavaScript中的new</a></p>\n<ul>\n<li><a href=\"#%E5%85%A8%E5%B1%80%E4%B8%8A%E4%B8%8B%E6%96%87\">全局上下文</a></li>\n<li><a href=\"#%E5%87%BD%E6%95%B0%E4%B8%8A%E4%B8%8B%E6%96%87\">函数上下文</a></li>\n<li><a href=\"#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84this\">构造函数中的this</a></li>\n<li><a href=\"#call-and-apply\">call and apply</a></li>\n</ul>\n</li>\n</ul>","headings":[{"id":"JavaScript中的new","depth":3,"value":"JavaScript中的new"},{"id":"全局上下文","depth":4,"value":"全局上下文"},{"id":"函数上下文","depth":4,"value":"函数上下文"},{"id":"构造函数中的this","depth":4,"value":"构造函数中的this"},{"id":"call-and-apply","depth":4,"value":"call and apply"}],"frontmatter":{"title":"JavaScript 中不使用 new 的构造函数（以及由此引发的联想）","date":"2015-01-28","cover":null,"description":null,"categories":["技术学习"],"tags":["笔记"]}},"previous":{"fields":{"slug":"/blogs/2015-11-22-CSS布局的未来：网格布局/"},"frontmatter":{"title":"CSS 布局的未来：网格布局"}},"next":{"fields":{"slug":"/blogs/规范之路-行高的工作原理/"},"frontmatter":{"title":"规范之路-line-height的工作原理","tags":["CSS","笔记"],"categories":["重构"],"status":null}}},"pageContext":{"id":"77f3ba25-1e83-5c61-b22f-b8066288b159","previousPostId":"eff54c19-478d-5a29-ba74-9de0a6c865a5","nextPostId":"1a9d7d18-602e-527e-b9b0-623914e6049b"}},
    "staticQueryHashes": ["2841359383"]}