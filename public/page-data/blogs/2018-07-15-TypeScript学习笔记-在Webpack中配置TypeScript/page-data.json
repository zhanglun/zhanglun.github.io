{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blogs/2018-07-15-TypeScript学习笔记-在Webpack中配置TypeScript/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"blog","name":"博文","url":"/blogs"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"lab","name":"实验室","url":"/labs"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"f3a7a13e-7910-5515-a997-a8f86f090b3b","html":"<p class=\"para\">上篇说到TypeScript简单的基本知识，包括什么是TypeScript、TypeScript的安装以及TypeScript中的基本类型。今天来了解一下如何在Webpack中配置TypeScript。</p>\n<!--more-->\n<h2 class=\"heading subtitle heading\" id=\"tsconfigjson\" style=\"position:relative;\"><a href=\"#tsconfigjson\" aria-label=\"tsconfigjson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tsconfig.json</h2>\n<p class=\"para\">首先，先来认识一下 TypeScript 中的配置文件<code>tsconfig.json</code>。之前提到过，TypeScript 在全局安装之后，便可以通过 <code>tsc</code> 命令来执行.ts文件的编译。<code>tsconfig.json</code> 可以指定编译时的各种参数。如果一个目录下存在一个 <code>tsconfig.json</code> 文件，那么它意味着这个目录是TypeScript项目的根目录。</p>\n<p class=\"para\">使用<code>tsc</code>命令时，在不带任何输入文件的情况下，编译器会从当前目录开始去查找 <code>tsconfig.json</code> 文件，逐级向上搜索父目录。如果带上命令行参数—project（或-p），则指定一个包含 <code>tsconfig.json</code>。在命令行上指定的编译选项会覆盖在 <code>tsconfig.json</code> 文件里的相应选项。文件的目录。如果命令行指定了配置文件，将会采用指定的文件作为配置输入，即使当前目录中已经存在 <code>tsconfig.json</code>。</p>\n<p class=\"para\">来看一个简单的<code>tsconfig.json</code>配置：</p>\n<deckgo-highlight-code language=\"json\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">{\n   &quot;compilerOptions&quot;: {\n    &quot;module&quot;: &quot;system&quot;,  // 指定生成哪个模块系统代码： &quot;None&quot;， &quot;CommonJS&quot;， &quot;AMD&quot;， &quot;System&quot;， &quot;UMD&quot;， &quot;ES6&quot;或 &quot;ES2015&quot;。 只有 &quot;AMD&quot;和 &quot;System&quot;能和 --outFile一起使用。 &quot;ES6&quot;和 &quot;ES2015&quot;可使用在目标输出为 &quot;ES5&quot;或更低的情况下。\n    &quot;noImplicitAny&quot;: true,\n    &quot;removeComments&quot;: true,\n    &quot;preserveConstEnums&quot;: true,\n    &quot;outFile&quot;: &quot;./dist/&quot;,\n    &quot;sourceMap&quot;: true\n  },\n  &quot;include&quot;: [\n    &quot;src/**/*&quot;\n  ],\n  &quot;exclude&quot;: [\n    &quot;node_modules&quot;,\n    &quot;**/*.spec.ts&quot;\n  ]\n}\n</code>\n        </deckgo-highlight-code>\n<p class=\"para\"><code>compilerOptions</code> 可以为空，此时编译器会使用默认值。这里有完整的<a href=\"https://www.typescriptlang.org/docs/handbook/compiler-options.html\" class=\"link-underline\">compilerOptions</a>。</p>\n<p class=\"para\"><code>files</code> 指定一个包含相对或绝对文件路径的列表。 <code>include</code> 和 <code>exclude</code> 属性指定一个文件glob匹配模式列表。 支持的glob通配符有：</p>\n<ul>\n<li>* 匹配0或多个字符（不包括目录分隔符）</li>\n<li>? 匹配一个任意字符（不包括目录分隔符）</li>\n<li>**/ 递归匹配任意子目录</li>\n</ul>\n<p class=\"para\">如果一个glob模式里的某部分只包含 * 或 .*，那么仅有支持的文件扩展名类型被包含在内（比如默认.ts，.tsx，和.d.ts， 如果 allowJs设置能true还包含.js和.jsx）。</p>\n<p class=\"para\">如果 <code>files</code> 和 <code>include</code> 都没有被指定，<strong>编译器默认包含当前目录和子目录下所有的 TypeScript 文件（.ts, .d.ts 和 .tsx）</strong>，排除在”exclude”里指定的文件。JS文件（.js和.jsx）也被包含进来如果allowJs被设置成true。 如果指定了 “files”或”include”，编译器会将它们结合一并包含进来。 使用 “outDir”指定的目录下的文件永远会被编译器排除，除非你明确地使用”files”将其包含进来（这时就算用exclude指定也没用）。</p>\n<p class=\"para\">使用 <code>include</code> 引入的文件可以使用 <code>exclude</code> 属性过滤。 然而，通过 <code>files</code> 属性明确指定的文件却总是会被包含在内，不管 <code>exclude</code> 如何设置。 如果没有特殊指定， <code>exclude</code> 默认情况下会排除 <code>node_modules</code>，<code>bower_components</code>，<code>jspm_packages</code>和<code>&#x3C;outDir></code>目录。</p>\n<p class=\"para\">任何被 <code>files</code> 或 <code>include</code> 指定的文件所引用的文件也会被包含进来。 A.ts引用了B.ts，因此B.ts不能被排除，除非引用它的A.ts在 <code>exclude</code> 列表中。</p>\n<p class=\"para\">需要注意编译器不会去引入那些可能做为输出的文件；比如，假设我们包含了index.ts，那么index.d.ts和index.js会被排除在外。 通常来讲，不推荐只有扩展名的不同来区分同目录下的文件。</p>\n<p class=\"para\"><code>tsconfig.json</code> 文件可以是个空文件，那么所有默认的文件（如上面所述）都会以默认配置选项编译。</p>\n<h2 class=\"heading subtitle heading\" id=\"与Webpack集成\" style=\"position:relative;\"><a href=\"#%E4%B8%8EWebpack%E9%9B%86%E6%88%90\" aria-label=\"与Webpack集成 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>与Webpack集成</h2>\n<p class=\"para\">如果你已经有webpack的使用经验的话，这一步将会非常简单。设置好 <code>tsconfig.json</code> 之后，只需要针对 <code>ts</code> 文件配置对应的Loader即可。</p>\n<p class=\"para\">1、首先需要安装必备的几个package:</p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">npm install --save-dev typescript ts-loader</code>\n        </deckgo-highlight-code>\n<p class=\"para\">2、 设置基本的 <code>tsconfig.json</code> 配置，来支持 JSX，并将 TypeScript 编译到 ES5……</p>\n<p class=\"para\"><strong>tsconfig.json</strong></p>\n<deckgo-highlight-code language=\"json\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">{\n  &quot;compilerOptions&quot;: {\n    &quot;outDir&quot;: &quot;./dist/&quot;,\n    &quot;noImplicitAny&quot;: true,\n    &quot;module&quot;: &quot;commonjs&quot;,\n    &quot;target&quot;: &quot;es6&quot;,\n    &quot;jsx&quot;: &quot;react&quot;,\n    &quot;allowJs&quot;: true,\n    &quot;sourceMap&quot;: true   \n  }\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">3、在 webpack 配置中处理 TypeScript：</p>\n<p class=\"para\"><strong>webpack.config.js</strong></p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">const path = require(&#39;path&#39;);\n\nmodule.exports = {\n  entry: &#39;./src/index.ts&#39;,\n  devtool: &#39;inline-source-map&#39;,\n  module: {\n    rules: [\n      {\n        test: /\\.ts|.tsx$/,\n        exclude: [\n          path.resolve(__dirname, &#39;node_modules&#39;),\n        ],\n        use: () =&gt; {\n          return [\n            {\n              loader: [&#39;ts-loader&#39;],\n            },\n          ];\n        },\n      },\n    ]\n  },\n  resolve: {\n    extensions: [ &#39;.tsx&#39;, &#39;.ts&#39;, &#39;.js&#39; ]\n  },\n  output: {\n    filename: &#39;bundle.js&#39;,\n    path: path.resolve(__dirname, &#39;dist&#39;)\n  }\n};</code>\n        </deckgo-highlight-code>\n<p class=\"para\">这会直接将 webpack 的入口起点指定为 ./index.ts，然后通过 ts-loader _加载所有的 .ts 和 .tsx 文件，并且在当前目录输出_一个 bundle.js 文件。</p>\n<p class=\"para\">以上，是在webpack中集成TypeScript的一种基本模式，后续根据项目需要修改相关配置。</p>","tableOfContents":"<ul>\n<li><a href=\"#tsconfigjson\">tsconfig.json</a></li>\n<li><a href=\"#%E4%B8%8Ewebpack%E9%9B%86%E6%88%90\">与Webpack集成</a></li>\n</ul>","headings":[{"id":"tsconfigjson","depth":2,"value":"tsconfig.json"},{"id":"与Webpack集成","depth":2,"value":"与Webpack集成"}],"frontmatter":{"title":"TypeScript学习笔记-在Webpack中配置TypeScript","date":"2018-07-15","cover":null,"description":null,"categories":[],"tags":["TypeScript"]}},"previous":{"fields":{"slug":"/blogs/2018-10-08-在CentOS上部署Pyspider爬虫项目/"},"frontmatter":{"title":"在 CentOS 上部署 pyspider 爬虫项目"}},"next":{"fields":{"slug":"/blogs/2018-07-08-TypeScript学习笔记-入门:安装与基础知识/"},"frontmatter":{"title":"TypeScript学习笔记-入门:安装与基础知识","tags":["TypeScript"],"categories":[],"status":null}}},"pageContext":{"id":"f3a7a13e-7910-5515-a997-a8f86f090b3b","previousPostId":"23a1881a-4b13-5f29-bc5a-1c94ce4c92e9","nextPostId":"e690f724-5e16-5f67-8fa6-eb6f8b574876"}},
    "staticQueryHashes": ["2841359383"]}