{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blogs/Node学习笔记-Server-Side Templates/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"blog","name":"博文","url":"/blogs"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"lab","name":"实验室","url":"/labs"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"6efe7f95-18fa-5e94-ab80-c16fa076dfa0","html":"<blockquote class=\"quote\">\n<p class=\"para\">因为各种版本的更新，文中的例子可能失效无法运行。毕竟<em><strong>Node for Front-End Developer</strong></em>这本书已经出现很久了。</p>\n</blockquote>\n<h2 class=\"heading subtitle heading\" id=\"Creating-a-Dynamic-Page\" style=\"position:relative;\"><a href=\"#Creating-a-Dynamic-Page\" aria-label=\"Creating a Dynamic Page permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a Dynamic Page</h2>\n<p class=\"para\">不像其他的服务端语言开发，Node没有暗示你需要使用任何的模板引擎来创建动态页面。有很多JS模板引擎，而且这个数量还在增加。所以有很多选择的对象。使用哪一个模板引擎并不重要，重要的是你需要什么样子的引擎，什么样子的引擎适合你。</p>\n<p class=\"para\">当你在选择模板引擎的时候，你可能需要考虑吧下面的这几个问题：</p>\n<ul>\n<li>是否需要除了JavaScript之外其他的语言\n<ul>\n<li>如果是，你将没法在客户端上使用</li>\n</ul>\n</li>\n<li>是否依赖已经存在DOM结构\n<ul>\n<li>如果是，你需要在Node中预先编写一端DOM来使用它，这个很easy，但是多走了一步</li>\n</ul>\n</li>\n<li>在模板第一次渲染之前，是否允许模板一次编译完成并缓存\n<ul>\n<li>如果你想在前台解析所有的模板或者你渲染的模板会重复使用多次，你可能会比较关心这个</li>\n</ul>\n</li>\n<li>模板中可以使用多少逻辑\n<ul>\n<li>一些模板的提供少量的逻辑处理，有些允许在模板中编写JS代码块。不同模板的不同特性将影响到你的结构，值得去做点研究</li>\n</ul>\n</li>\n</ul>\n<p class=\"para\">为了简单化，我们使用Mustache模板引擎。如果你没有使用过任何的JS模板引擎，Mustache是一个好的开始，因为它站在逻辑与非逻辑中间，它提供了一系列方法，但是又能使用完整的JavaScript。再者，它的语法也用在其他的一些模板引擎中，对你来说是个好事。</p>\n<p class=\"para\">我们的第一个服务端模板是这样一个包含表单的页面，用以编辑用户的相关信息 和一个接受提交的页面。</p>\n<deckgo-highlight-code language=\"html\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">&lt;!--edit.html--&gt;\r\n\r\n&lt;h1&gt;{{pageheader}}&lt;/h1&gt;\r\n&lt;form action=&quot;/&quot; method=&quot;POST&quot;&gt;\r\n    &lt;label&gt;First name:\r\n        &lt;input type=&quot;text&quot; name=&quot;firstName&quot; value=&quot;{{firstName}}&quot; /&gt;\r\n    &lt;/label&gt;\r\n    &lt;label&gt;Last name:\r\n        &lt;input type=&quot;text&quot; name=&quot;lastName&quot; value=&quot;{{lastName}}&quot; /&gt;\r\n    &lt;/label&gt;\r\n    &lt;input type=&quot;submit&quot; value=&quot;Save&quot; /&gt;\r\n&lt;/form&gt;\r\n\r\n&lt;!--result.html--&gt;\r\n&lt;h1&gt;Edit finish!&lt;/h1&gt;\r\n&lt;p&gt;Hello，Mr.{{firstname}}&lt;/p&gt;</code>\n        </deckgo-highlight-code>\n<p class=\"para\">双花括号是模板的定义符号，告诉Mustache在页面渲染的时候在何处填充传递过来的数据。\r\n使用Mustache之前，需要使用npm安装Mustache，具体的可以去<a href=\"http://mustache.github.io/\" class=\"link-underline\">官网</a>查看,然后修改代码去渲染一个模板文件。</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">var http = require(&quot;http&quot;),\r\n    path = require(&quot;path&quot;),\r\n    connect = require(&quot;connect&quot;);\r\n\r\nvar app = connect();\r\n\r\nvar bodyParser = require(&quot;body-parser&quot;);\r\napp.use(bodyParser.urlencoded({ extended: false }))\r\napp.use(bodyParser.json())\r\n\r\n\r\nvar mu = require(&quot;mu2&quot;);\r\nmu.root = __dirname + &quot;/public/&quot;;\r\n\r\napp.use(&#39;/edit&#39;, function(req, res){\r\n\r\n    var view={\r\n        pagetitle:&quot;edit your profile&quot;,\r\n        pageheader:&quot;This page is perpare for everyone!&quot;,\r\n    };\r\n    var readable = mu.compileAndRender(&#39;edit.html&#39;, view);\r\n    readable.pipe(res);\r\n});\r\n\r\napp.use(&quot;/api/users/edit&quot;, function(req, res){\r\n    mu.clearCache(); // 暂时禁用模版缓存\r\n    res.writeHead({\r\n        &quot;Content-Type&quot;:&quot;text/html&quot;\r\n    });\r\n    if(req.method == &quot;POST&quot;){\r\n        if (!req.body){\r\n            res.writeHead(400);\r\n            res.end(&quot;Server is missing!&quot;);\r\n        }\r\n        // POST 的数据\r\n        var userName = {\r\n            firstname: req.body.firstName,\r\n            lastname: req.body.lastName\r\n        };\r\n\r\n        var readable = mu.compileAndRender(&#39;result.html&#39;, userName);\r\n\r\n        readable.pipe(res); // 关于stream的更多用法，要找时间看看\r\n    }\r\n\r\n    if(req.method == &quot;GET&quot;){\r\n\r\n        res.writeHead(200);\r\n        res.end(&quot;Hey! Don&#39;t visit this page !&quot;);   \r\n    }\r\n});\r\n\r\nhttp.createServer(app).listen(3000);\r\n</code>\n        </deckgo-highlight-code>\n<p class=\"para\">假设我们将 edit.html 文件保存在 public 目录中，上述的代码将会将内容转换为文本流保存到一个变量中，一旦模板完全加载，便将传递过来的信息渲染成HTML。然后再将最后的HTML输出。</p>\n<p class=\"para\"><strong>注意：</strong> Mustache的具体使用方法请看官方给出的教程：<a href=\"http://mustache.github.io/\" class=\"link-underline\">官网</a>。</p>\n<h2 class=\"heading subtitle heading\" id=\"Partial-Templates\" style=\"position:relative;\"><a href=\"#Partial-Templates\" aria-label=\"Partial Templates permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Partial Templates</h2>\n<p class=\"para\">在站点中，都会有很多相同的部分，比如导航，页脚或者其他的一些页面组件会在多个页面上出现。笨一点的话就是把HTML每个都复制粘贴一遍，但是将它们作为一个个简单的可共享的模板进行管理比起复制粘贴来说，更加的方便，有利于管理和维护。</p>\n<p class=\"para\">对于一些静态文件，如果我们不想重复的在每个模板中引用，我们可以为站点设置一个默认的模板，里面包含了静态文件的引用。对于页面上不同的内容，可以为其留下空间，在需要的时候利用它们。\r\n不同模板的嵌套采用不同的处理方法，当然具体的用法还是参照官网最直接。</p>\n<p class=\"para\">不只是html模板，如果我们想动态生成CSS（比如修改主题）或者JavaScript，同样可以使用模板来操作，修改文件类型就可以了。因为读取文件的时候将其看到做是一些字符串，这对Node的解析来说没有什么区别。</p>\n<p class=\"para\">例如，我们想利用Mustache根据用户定义的值来修改CSS文件，实现的方法与前面描述的加载HTML模板简直是一模一样，只不过requirejs请求的文件变成了CSS文件而已。假设从一个POST请求中接收到了修改样式的参数，然后根据这些参数来请求不同的CSS。</p>\n<p class=\"para\">Node里面的各种模块好蛋疼 ==!(未完……)</p>","tableOfContents":"<ul>\n<li><a href=\"#creating-a-dynamic-page\">Creating a Dynamic Page</a></li>\n<li><a href=\"#partial-templates\">Partial Templates</a></li>\n</ul>","headings":[{"id":"Creating-a-Dynamic-Page","depth":2,"value":"Creating a Dynamic Page"},{"id":"Partial-Templates","depth":2,"value":"Partial Templates"}],"frontmatter":{"title":"Node学习笔记-Server-Side Templates","date":"2014-11-03","cover":null,"description":null,"categories":["Node.js"],"tags":["笔记","Node.js"]}},"previous":{"fields":{"slug":"/blogs/Node学习笔记-Data Sources and Flow Control/"},"frontmatter":{"title":"Node学习笔记-Data Sources and Flow Control"}},"next":{"fields":{"slug":"/blogs/Node学习笔记-Serving the content/"},"frontmatter":{"title":"Node学习笔记-Serving the content","tags":["笔记","Node.js"],"categories":["Node.js"],"status":null}}},"pageContext":{"id":"6efe7f95-18fa-5e94-ab80-c16fa076dfa0","previousPostId":"f1d9670a-36de-599d-962c-35d000d9401a","nextPostId":"f1cda0b7-0c5c-5abb-8d56-12a49068aa58"}},
    "staticQueryHashes": ["2841359383"]}