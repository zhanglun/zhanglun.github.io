{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blogs/学习sass时了解到的一些好玩特性/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"blog","name":"博文","url":"/blogs"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"lab","name":"实验室","url":"/labs"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"cf7ad3cb-f6b5-538d-b751-7bd322ec1570","html":"<p class=\"para\">很久很久以前，我根据网上的博文总结写了一篇博客<a href=\"http://zhanglun.github.io/2014/03/10/sass%E8%AF%AD%E6%B3%95/\" class=\"link-underline\">《sass基本语法》</a>。在那之后平时虽然不太用到sass（因为没项目做，只能自己写着玩玩），但是也还一直在试着使用sass，提高熟练度。现在写写在学习过程中的总结。</p>\n<!--more-->\n<p class=\"para\">众所周知，<strong><a href=\"http://sass-lang.com/\" class=\"link-underline\">sass</a></strong> 是众多CSS预处理器中的一员，基于ruby语言开发的。它可以使用变量，嵌套，混入，继承，运算，函数等编程语言具有的特性进行CSS的开发，使得CSS的开发变得简单粗暴清晰可维护。相比书写CSS文件，书写sass多了很多不曾有过的快感。前面的提到的那些CSS没有的特性，灵活运用之后，可能会让你大吃一惊。</p>\n<p class=\"para\">###计算布局</p>\n<p class=\"para\">sass允许我们在书写过程中使用“加减乘除”运算，我们可以这样写 <code>width:$page_width*0.1</code>，width的值将不再是硬编码的一个固定的数值，而是变量$page_width中定义的值的0.1倍。当编译成CSS文件时，width会输出一个确定的值。比如说我们定义一个页面的内容区域宽度为<code>500px</code>，然后我们可以以这个宽度为基础，用一定的比例来设置侧边栏的宽度:$page_width*0.2。当我们想修改页面内容区域的宽度的时候，侧边栏会按照设定的比例变化而不用手动修改。要注意的是，如果使用不同单位进行运算，sass会试着编译，如果没有编译成功便会输出error。比如：你不能用20px和2em相加，这没有意义。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">//使用加减乘除标准运算，定义变量\r\n$width: 10px;\r\n$double_width: $width * 2;\r\n$half_width: $width / 2;\r\n$width_plus_2: $width + 2;\r\n$width_minus_2: $width - 2;\r\n\r\n//在行间使用计算式\r\n$width: 500px;\r\n$sidebar_percent: 0.2;\r\n#page {\r\n    width: $width;\r\n    #sidebar {\r\n        width: $width * $sidebar_percent;\r\n    }\r\n    #content {\r\n        width: $width * (1 - $sidebar_percent);\r\n    }\r\n}\r\n//编译输出\r\n#page {\r\n    width: 500px;\r\n}\r\n#page #sidebar {\r\n    width: 100px;\r\n}\r\n#page #content {\r\n    width: 400px;\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">###使用高级方法设置颜色</p>\n<p class=\"para\">如果我们想修改颜色，比如提供亮度，增加饱和度，我们要打开调色盘，然后选中找到你想要的颜色，然后找到对应的颜色代码，复制，粘贴……而sass通过添加一些函数让整个过程变得简单轻松。下面是sass中常用的颜色函数</p>\n<p class=\"para\"><strong>Lighten/Darken函数，修改亮度</strong></p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">#page{\r\n    color:lighten(#336699,20%);\r\n}\r\n//编译后的CSS\r\n#page{\r\n    color:#6699cc;\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\"><strong>Saturate/Desaturate函数，修改饱和度</strong></p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$main_color:#336699;\r\n#page{\r\n    color:saturate($main_color,30%);\r\n}\r\n//编译后的CSS\r\n#page{\r\n    color:#1466b8;\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\"><strong>adjust-hue函数，修改色度</strong></p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$main_color:#336699;\r\n#page{\r\n    color:adjust-hue($main_color,180);\r\n}\r\n#page{\r\n    color:adjust-hue(desaturate($main_color,10%),90);\r\n}\r\n\r\n//编译之后的CSS\r\n#page {\r\n    color: #996633;\r\n}\r\n\r\n#page {\r\n    color: #8f3d8f; \r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\"><strong>grayscale函数，100%\\降低饱和度，这个方法与下面代码是一样的效果。</strong></p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">desaturate(#336699,100%);</code>\n        </deckgo-highlight-code>\n<p class=\"para\"><strong>Mix函数，混合颜色</strong></p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">#page{\r\n    color:mix(#336699,#993266);\r\n}\r\n//编译后的CSS\r\n#page {\r\n    color: #664c7f;\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">有了这些，颜色方案再怎么改也不怕了！！</p>\n<p class=\"para\">###导入其他sass文件</p>\n<p class=\"para\">在开发的过程中，将一个大样式表拆分成若干个小的样式表对网页的性能的影响不言而喻。如果一个简单的页面去包含了五六个样式表，这会严重影响到页面的加载速度。 通过&#x3C;@import “filename”>可以将很多文件转换成一个文件。这样一来，开发过程中，将模块拆分开方便开发，而最终还是只有一个样式表被引用到页面中。</p>\n<p class=\"para\">注意，使用<code>@import</code>引入其他文件时，如果不希望引入的文件也生成CSS文件，只要将引入的文件名前面加上一个下划线。在main.scss中colors.scss引入之后会编译生成mian.css和colors.css两个文件。将colors.scss文件名改成“_color.scss”，main.scss中依旧是“@import “colors”;”（不用加上文件名前面的下划线），然后重新编译，便不会输出colors.css文件。切记切记。</p>\n<p class=\"para\">###创建一个字体库</p>\n<p class=\"para\">在普通的CSS文件中，我们通常这样定义字体：</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">font-family: &quot;helvetica neue&quot;, arial, helvetica, freesans,&quot;liberation sans&quot;, &quot;numbus sans l&quot;, sans-serif;</code>\n        </deckgo-highlight-code>\n<p class=\"para\">我们必须按照我们顺序列出我们需要的字体。如果我们想在页面中切换使用的字体，我们要从这里复制，粘贴到那里……现在我们有简单的方法了。可以在页面的顶部定义变量，使用变量代替那些冗长的字体名。当你想使用这些字体时，只需使用事先定义好的变量。为了方便管理，可以将默认的字体的定义放在文件的头部，或者单独写在一个文件中，使用<code>@import</code>引入。</p>\n<p class=\"para\">###使用@extend保持语义化</p>\n<p class=\"para\">保持语义化是一门哲学，使得事物合乎逻辑。我们根据功能取名字而不是样式，比如：不会使用<code>.bule_button</code>，而是使用<code>.checkout_button</code>，后者远比前者有用。如果你写了一些属性制作一个蓝色按钮，需要将他们应用到很多不同功能的按钮上，你会怎么做？难道一遍遍的复制，粘贴吗？sass中的<code>@extend</code>可以从class或者ID中复制属性和属性值，然后将它们添加到另一个class或者ID的属性列中。</p>\n<p class=\"para\">首先要去确保在别处已经定义了class：</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">.blue_button {\r\n    background: #336699;\r\n    font-weight: bold;\r\n    color: white;\r\n    padding: 5px; \r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">然后可以将其拓展到其他的class或者ID：</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">.checkout_button {\r\n    @extend .blue_button     \r\n}\r\n//编译后的CSS\r\n.blue_button, .checkout_button {\r\n    background: #336699;\r\n    font-weight: bold;\r\n    color: white;\r\n    padding: 5px; \r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">你会注意到输出的CSS有两个选择器。<code>@extend</code>所做的是合并所有的属性和属性值，同时也会合并拓展的对象和自身的class或者ID。</p>\n<p class=\"para\">###使用@mixin保持代码的整洁</p>\n<p class=\"para\">利用mixin可以将一部分CSS从代码中抽出，定义成一个模块重复使用。可以在公用的样式中定义一个mixin模块，需要的时候直接调用就好了。同时，mixin还可以传递参数。</p>\n<p class=\"para\">使用<code>@mixin</code>定义一个mixin模块，后面紧接着mixin的名，可以传递参数，同时给参数设定一个默认值。 但是要注意，参数也是要用$开始，而且参数名和参数值是用<strong>冒号</strong>分开。如果一个属性有多个值，比如box-shadow等，那参数就用变量名加上三个点表示” <strong>$variable…</strong> ” 。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">//声明一个mixin模块\r\n//boxRect\r\n@mixin boxRect($W:20px,$H:20px){\r\n\twidth:$W;\r\n\theight:$H;\r\n}\r\n//box-shadow\r\n@mixin shadow($shadow...){\r\n\t-webkit-box-shadow:$shadow;\r\n\t-moz-box-shadow:$shadow;\r\n\t-o-box-shadow:$shadow;\r\n\tbox-shadow:$shadow;\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">定义了mixin模块之后，使用<code>@include</code>。mixins也能够帮助保持代码的语义化；。可以定义一个<code>blue_text</code>模块，然后把它应用到更加语义化的class或者ID中，比如<code>product_title</code>。通过<code>@import</code>将mixin模块引入主文件中，很好地分割样式表，保持主样式表的整洁。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">//定义一个模块\r\n@mixin blue_text {\r\n    color: #336699;\r\n    font-family: helvetica, arial, sans-serif;\r\n    font-size: 20px;\r\n    font-variant: small-caps; \r\n}\r\n//使用模块\r\n.product_title {\r\n    @include blue_text;     \r\n}\r\n//编译后的CSS\r\n.product_title {\r\n    color: #336699;\r\n    font-family: helvetica, arial, sans-serif;\r\n    font-size: 20px;\r\n    font-variant: small-caps; \r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">###利用mixin创建动态的属性名和选择器</p>\n<p class=\"para\">用<code>#{}</code>包裹住变量名就可以了！！！！！！</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">@mixin car_make($car_make, $car_color) {\r\n// 用$car_make动态生成以&quot;_make&quot;结尾的class\r\n    .car.#{$car_make}_make {\r\n        color: $car_color;\r\n        width: 100px;\r\n        .image {\r\n            background:url(&quot;images/#{$car_make}/#{$car_color}.png&quot;);\r\n        }\r\n    }\r\n}\r\n@include car_make(&quot;volvo&quot;, &quot;green&quot;);\r\n@include car_make(&quot;corvette&quot;, &quot;red&quot; );\r\n@include car_make(&quot;bmw&quot;, &quot;black&quot;);\r\n//编译后的CSS\r\n.car.volvo_make {\r\n    color: &quot;green&quot;;\r\n    width: 100px; \r\n}\r\n.car.volvo_make .image {\r\n    background: url(&quot;images/volvo/green.png&quot;); }\r\n.car.corvette_make {\r\n    color: &quot;red&quot;;\r\n    width: 100px; \r\n}\r\n.car.corvette_make .image {\r\n    background: url(&quot;images/corvette/red.png&quot;);              \r\n}\r\n.car.bmw_make {\r\n    color: &quot;black&quot;;\r\n    width: 100px; \r\n}\r\n.car.bmw_make .image {\r\n    background: url(&quot;images/bmw/black.png&quot;); \r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">###使用@each为不同变量复制相同的样式</p>\n<p class=\"para\">假设有很多url相似的图片，我们需要用图片的名字作为class的一部分引用图片。通常我们要分开书写每一个选择器，复制，粘贴……使用@each可以解决这个问题。</p>\n<p class=\"para\">在<code>@each</code>后面接着形参，然后是我们想使用的变量，即实参。参数要用<code>#{}</code>包裹。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">@each $member in thom, jonny, colin, phil {\r\n    .#{$member}_picture {\r\n        background-image: url(&quot;/image/#{$member}.jpg&quot;); \r\n    }\r\n}\r\n//编译后的CSS\r\n.thom_picture {\r\n    background-image: url(&quot;/image/thom.jpg&quot;); \r\n}\r\n.jonny_picture {\r\n    background-image: url(&quot;/image/jonny.jpg&quot;);     \r\n}\r\n.colin_picture {\r\n    background-image: url(&quot;/image/colin.jpg&quot;); \r\n}\r\n.phil_picture {\r\n    background-image: url(&quot;/image/phil.jpg&quot;); \r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">###使用@if让mixin模块更灵活</p>\n<p class=\"para\">通常书写一个模块的目的是想跨项目使用，希望可以对传入的参数作出反应。比如有一个mixin模块<code>width</code>，当一个参数是一个比0小的数字是，希望他不做任何事情。在很多时候，我们都希望自己的模块可以根据参数做出灵活的处理。而<code>@if</code>可以帮我们做到。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">//使用@if创建一个mixin模块\r\n@mixin country_color($country) {\r\n    @if $country == france {\r\n        color: blue; \r\n    }\r\n    @else if $country == spain {\r\n        color: yellow; \r\n    }\r\n    @else if $country == italy {\r\n        color: green; \r\n    }\r\n    @else {\r\n        color: red; \r\n    }\r\n}\r\n.england {\r\n    @include country_color(england); \r\n}\r\n.france {\r\n    @include country_color(france); \r\n}\r\n//编译后的CSS\r\n.england {\r\n    color: red; \r\n}\r\n.france {\r\n    color: blue;\r\n}</code>\n        </deckgo-highlight-code>\n<blockquote class=\"quote\">\n<p class=\"para\">未完待续……</p>\n</blockquote>","tableOfContents":"","headings":[],"frontmatter":{"title":"学习sass时了解到的一些好玩特性","date":"2014-05-08","cover":null,"description":null,"categories":["前端"],"tags":["Sass","CSS"]}},"previous":{"fields":{"slug":"/blogs/Node学习笔记-Node.js核心API之Events/"},"frontmatter":{"title":"Node学习笔记-Nodejs中的核心API之Events"}},"next":{"fields":{"slug":"/blogs/(译)node.js 的 eventemitter 教程/"},"frontmatter":{"title":"【译】Node.js的 EventEmitter 教程","tags":["译文","Node.js"],"categories":["博客译文"],"status":null}}},"pageContext":{"id":"cf7ad3cb-f6b5-538d-b751-7bd322ec1570","previousPostId":"b32c041c-6e49-594e-be3d-dd63080eaf5a","nextPostId":"220ece9d-9ca3-587c-86d1-2cce5a9f786b"}},
    "staticQueryHashes": ["2841359383"]}