{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blogs/(译)node.js的全局变量/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"blog","name":"博文","url":"/blogs"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"lab","name":"实验室","url":"/labs"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"a27f30e5-aba7-5152-889e-bf9b09f9438c","html":"<blockquote class=\"quote\">\n<p class=\"para\">原文标题：Global Variables in Node.js</p>\n</blockquote>\n<p class=\"para\">原文链接：<a href=\"http://www.hacksparrow.com/global-variables-in-node-js.html\" class=\"link-underline\">http://www.hacksparrow.com/global-variables-in-node-js.html\r\n</a></p>\n<!--more-->\n<p class=\"para\">你可能正在使用一些 Node.js 的模块，或者一个框架比如 <code>Express.js</code> ，并且突然感觉你需要创建一些全局变量。在 Node.js 中你会如何创建全局变量？</p>\n<p class=\"para\">在这个问题上，大多数的建议是“不使用 <code>var</code> 声明变量”，或者是“把变量添加到 <code>global</code> 对象上”，亦或者是“将变量添加到 <code>GLOBAL</code> 对象上”。你选择哪一个？</p>\n<p class=\"para\">首先，让我们来分析一下这个<code>global</code> 对象。打开一个终端，切换到 <code>Node REPL (prompt)</code></p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ node\r\n&gt;</code>\n        </deckgo-highlight-code>\n<p class=\"para\">输入”global”，看看这个对象到底有些什么。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">&gt; global</code>\n        </deckgo-highlight-code>\n<p class=\"para\">我的天啊（原文：Holy mother of Flying Spaghetti Monster!!!）！这是一个庞大的对象！实际上，你看到了 Node.js 的灵魂。在一个 Node.js 的进程中，所有的其他对象都是依附在 <code>global</code> 对象上。如果你熟悉浏览器中的 JavaScript 环境，<code>global</code> 对象和 <code>Window</code> 对象相似。</p>\n<p class=\"para\">现在我们知道了 <code>global</code> 对象是什么，现在让我们来玩弄它：</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">&gt; global.name\r\nundefined\r\n&gt; global.name = &#39;El Capitan&#39;\r\n&gt; global.name\r\n&#39;El Capitan&#39;\r\n&gt; GLOBAL.name\r\n&#39;El Capitan&#39;\r\n&gt; delete global.name\r\ntrue\r\n&gt; GLOBAL.name\r\nundefined\r\n&gt; name = &#39;El Capitan&#39;\r\n&#39;El Capitan&#39;\r\n&gt; global.name\r\n&#39;El Capitan&#39;\r\n&gt; GLOBAL.name\r\n&#39;El Capitan&#39;\r\n&gt; var name = &#39;Sparrow&#39;\r\nundefined\r\n&gt; global.name</code>\n        </deckgo-highlight-code>\n<p class=\"para\">有趣的观察！（Interesting observations!）</p>\n<p class=\"para\">看起来似乎 <code>global</code> 和 <code>GLOBAL</code> 是同一个东西。实际上，<code>GLOBAL</code> 是 <code>global</code> 的一个别名。</p>\n<p class=\"para\">更让人惊讶的是：无论是使用 <code>var</code> 声明的变量还是未使用 <code>var</code> 声明的变量都添加到了 &#x3C;code<code>global</code> 对象>global</code> 对象上。在 Node.js 中，不使用 <code>var</code> 关键字声明变量是一种创建全局变量的基本的方法。这种方法在模块中的实现稍微有些不同，接下来我会解释。</p>\n<p class=\"para\">当你创建了一个 Node.js 进程，在这个进程中的所有模块都分享同一个  <code>global</code> 对象。结合上面的观察，你对 <code>global</code> 对象的工作方式有一定的理解。然而，有一点不同之处在于，在你创建的模块中，使用 <code>var</code> 关键字声明的变量只属于这个模块，属于局部变量。那些未使用 <code>var</code> 关键字声明的变量则附加到 <code>global</code> 对象上。</p>\n<p class=\"para\">所以现在你知道了：“不使用 <code>var</code> 声明变量”，“把变量添加到 <code>global</code> 对象上”和“将变量添加到 <code>GLOBAL</code> 对象上”是相同的事情。</p>\n<p class=\"para\">在模块中全局声明的变量可以通过它的变量名直接被任何其他的模块引用，而不用通过 <code>global</code> 对象的引用，意味着：</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">name == global.name == GLOBAL.name</code>\n        </deckgo-highlight-code>\n<p class=\"para\">但是这并不意味着你应该这么做。为什么？看看这个：</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">var company = &#39;Yahoo&#39;;\r\nconsole.log(global.company); // &#39;Google&#39;\r\nconsole.log(company); // &#39;Yahoo&#39;</code>\n        </deckgo-highlight-code>\n<p class=\"para\">当时使用  <code>gloabal.campany</code> ，你知道你在处理全局变量，此外，在模块中作为局部变量使用时节约了变量名 <code>campany</code> 。如果你打算在你的 Node.js 程序中使用全局变量，关于 <code>global</code> 对象的方法的讨论效果很好。但是，别过度使用全局变量。说了这么多，难道还有不使用全局变量的替代解决方法？</p>\n<p class=\"para\">是的，有这么一个，并且它涉及到  <code>module.exports</code> 的使用。让我用一个例子来证明：</p>\n<p class=\"para\"><em>main.js</em> 中的内容：</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">exports.company = &#39;Google&#39;;\r\nvar m = require(&#39;./mod&#39;);</code>\n        </deckgo-highlight-code>\n<p class=\"para\"><em>mod.js</em> 中的内容：</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">var company = require(&#39;./main&#39;).company;\r\nconsole.log(company);</code>\n        </deckgo-highlight-code>\n<p class=\"para\">现在来看看它怎么运作的：</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">$ node main.js\r\nGoogle</code>\n        </deckgo-highlight-code>\n<p class=\"para\">你拥有了一个变量，这个变量来自另一个没有使用全局对象的可使用的模块。你可以在其他的模块中引用 <em>main.js</em> 以此来使用 变量名  <code>campany</code>。</p>\n<p class=\"para\">注意：引用一个已经引用了另外一个模块的模块，只会创建一个包含前一个模块的引用，这并不意味着会严重增加内存的使用。同时，因为不存在真正的重复包含，模块中所有的初始化函数都不会重复执行一次。</p>\n<p class=\"para\">所以，结论是：在 Node.js 中有两种创建全局变量的方法，一种是使用 <code>global</code> 对象，另一种是使用 <code>module.export</code> 。我的建议是什么？小应用使用 <code>global</code> 对象，大型应用使用 <code>module.export</code>。</p>\n<p class=\"para\">(完)</p>\n<p class=\"para\"><strong>翻译水平有待提高，所翻译的博文并不是按照原文一句一句翻译，而是添加了自己对文章的理解。如有不正之处，欢迎指正！</strong>\r\n<strong>个人笔记，仅供参考。</strong></p>\n<blockquote class=\"quote\">\n<p class=\"para\">参考:</p>\n</blockquote>\n<p class=\"para\"><a href=\"http://www.hacksparrow.com/global-variables-in-node-js.html\" class=\"link-underline\">http://www.hacksparrow.com/global-variables-in-node-js.html\r\n</a></p>","tableOfContents":"","headings":[],"frontmatter":{"title":"【译】Node.js的全局变量","date":"2014-04-28","cover":null,"description":null,"categories":["博客译文"],"tags":["译文","Node.js"]}},"previous":{"fields":{"slug":"/blogs/(译)node.js 的 eventemitter 教程/"},"frontmatter":{"title":"【译】Node.js的 EventEmitter 教程"}},"next":{"fields":{"slug":"/blogs/(译)node.js的模块- exports 和 module.exports/"},"frontmatter":{"title":"【译】Node.js的模块-exports和module.exports","tags":["译文","Node.js"],"categories":["博客译文"],"status":null}}},"pageContext":{"id":"a27f30e5-aba7-5152-889e-bf9b09f9438c","previousPostId":"220ece9d-9ca3-587c-86d1-2cce5a9f786b","nextPostId":"61c585be-d577-55f9-a983-3cd509546299"}},
    "staticQueryHashes": ["2841359383"]}