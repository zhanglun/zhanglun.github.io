{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blogs/2020-01-16-为Promise增加abort方法/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"blog","name":"博文","url":"/blogs"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"lab","name":"实验室","url":"/labs"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"f8fdb2ed-e1d8-5fd3-ad61-01d72a338c44","html":"<p class=\"para\">对于Promise而言只有三个状态： <code>Pending</code>， <code>Resolve</code> 和 <code>Reject</code>。在任意时刻，一个Promise只能是处于这三个状态中的任意一个，且一旦状态变为<code>Resolve</code>或者<code>Reject</code>之后，状态不能再修改。\n有时候我们需要在Promsie从Pending状态变成<code>Resolve</code>或者<code>Reject</code>之前，停止执行对应的Promsie。就像是将Promise的状态修改为<code>Stop</code>或者<code>Abort</code>。常见的例子：</p>\n<ol>\n<li>发送异步请求时，在请求返回之前直接结束当前任务的逻辑</li>\n<li>多个任务并发时，停止执行未处理完成的任务</li>\n</ol>\n<p class=\"para\">既然Promise不支持，那我们能否通过其提供的接口来实现一个<code>Abort</code>方法呢？可以使用<code>Promise.race</code>方法的特点来模拟实现。<code>Promise.race(iterable)</code> 方法返回一个 promise，一旦迭代器中的某个promise解决或拒绝，返回的 promise就会解决或拒绝。</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">const promise1 = new Promise((resolve, reject) =&gt; {\n  setTimeout(resolve, 500, &#39;one&#39;);\n});\n\nconst promise2 = new Promise((resolve, reject) =&gt; {\n  setTimeout(resolve, 100, &#39;two&#39;);\n});\n\nPromise.race([promise1, promise2]).then((value) =&gt; {\n  console.log(value);\n  // Both resolve, but promise2 is faster\n});</code>\n        </deckgo-highlight-code>\n<p class=\"para\">可以使用<code>Promise.race()</code>来构造一个“竞争关系”，将想abort的Promise和一个内置的Promise，放在race中执行，而内置的Promsie立马返回 <code>Resovled</code> 或者 <code>Reject</code> ，从而将另外一个Pomise的执行停止。</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">let PromiseWithAbort = function(promise){\n  let _abort = null;\n  let Pabort = new Promise((resolved, reject)=&gt;{\n    _abort = function(reason =&#39;abort !&#39;){\n      console.warn(reason);\n      reject(reason);\n    }\n  });\n\n  let race = Promise.race([promise, Pabort]);\n  \n  race.abort = _abort;\n  console.log(promise, Pabort);\n\n  return race;\n}\n\nlet p1= new Promise(res=&gt;{\n  setTimeout(()=&gt;{\n    res(&#39;p1 success&#39;);\n  },2000)\n})\n\nlet testP = PromiseWithAbort(p1);\n\ntestP.then(res=&gt;{\n  console.log(&#39;success:&#39;, res);\n},error=&gt;{\n  console.log(&#39;error:&#39;, error);\n})\n\ntestP.abort();</code>\n        </deckgo-highlight-code>\n<p class=\"para\">或者重新包装一个新的Promise</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">class PromiseWithAbort {\n  constructor(fn){\n    let _abort = null;\n    let _p = new Promise((resolved, reject)=&gt;{\n      fn.call(null,resolved, reject);\n      _abort = function(error = &#39;abort&#39;){ \n        reject(error); \n      }\n    })\n\n    _p.abort = _abort;\n\n    return _p;\n  }\n}\n\nlet testP = new PromiseWithAbort((resolved, reject)=&gt;{\n  setTimeout(() =&gt; {\n    res(1);\n  },1000);\n});\n\ntestP.then( (resolved)=&gt;{\n  console.log(&#39;resolved:&#39;, resolved);\n}, (reject) =&gt;{\n  console.log(&#39;reject:&#39;, reject);\n});\n\ntestP.abort();\n//结果： rej: abort</code>\n        </deckgo-highlight-code>","tableOfContents":"","headings":[],"frontmatter":{"title":"为Promise增加abort方法","date":"2020-01-16","cover":null,"description":null,"categories":[],"tags":[]}},"previous":{"fields":{"slug":"/blogs/2020-03-21-使用 CSS Variable 实现主题色切换/"},"frontmatter":{"title":"使用 CSS variables 实现主题色切换"}},"next":{"fields":{"slug":"/blogs/浅谈TreeShaking在前端中的应用/"},"frontmatter":{"title":"浅谈TreeShaking在前端中的应用 - Rollup VS Webpack","tags":[],"categories":[],"status":null}}},"pageContext":{"id":"f8fdb2ed-e1d8-5fd3-ad61-01d72a338c44","previousPostId":"130f2871-cd90-59b6-9b30-fb7d03267f70","nextPostId":"851e2188-4c4b-5a9f-8e22-e734f76b7404"}},
    "staticQueryHashes": ["2841359383"]}