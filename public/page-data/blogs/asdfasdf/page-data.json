{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blogs/asdfasdf/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"blog","name":"博文","url":"/blogs"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"lab","name":"实验室","url":"/labs"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"44af9d7b-978b-5e08-87f8-8abd57c51458","html":"<p class=\"para\"><a href=\"https://www.notion.so/images/page-cover/nasa_robert_stewart_spacewalk_2.jpg\" class=\"link-underline\">https://www.notion.so/images/page-cover/nasa_robert_stewart_spacewalk_2.jpg</a></p>\n<blockquote class=\"quote\">\n<p class=\"para\">本系列内容来自《架构师修炼之道》。在自己的笔记中以半摘录的方式，用 blockquote 穿插自己的思考和感悟，以加深对内容的理解和消化。</p>\n</blockquote>\n<p class=\"para\">全书整体分为三个部分</p>\n<ul>\n<li>\n<p class=\"para\">第一部分介绍软件架构的基础知识和架构师必备的设计思维</p>\n</li>\n<li>\n<p class=\"para\">第二部分讲解架构师需要掌握的核心技能和知识</p>\n</li>\n<li>\n<p class=\"para\">第三部分讨论一系列使用的架构设计方法</p>\n</li>\n</ul>\n<p class=\"para\">前两部分适合从头到尾通读，第三部分用于参考和检索。</p>\n<p class=\"para\">”软件架构导论“是第一部分的大标题，从标题可以看到，这一部分是介绍一些基本概念，架构原则和一些基础的设计知识等内容。作为深入架构设计的铺垫，这些内容必不可少。</p>\n<h2 class=\"heading subtitle heading\" id=\"1-成为软件架构师\" style=\"position:relative;\"><a href=\"#1-%E6%88%90%E4%B8%BA%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%B8%88\" aria-label=\"1 成为软件架构师 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1 成为软件架构师</h2>\n<h3 class=\"heading\" id=\"11-软件架构师的职责\" style=\"position:relative;\"><a href=\"#11-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%B8%88%E7%9A%84%E8%81%8C%E8%B4%A3\" aria-label=\"11 软件架构师的职责 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1 软件架构师的职责</h3>\n<p class=\"para\">什么是软件架构师？除了编程之外，还多诸多其他职责。从工程角度看待问题，将系统拆解成为众多可实现的模块，同时兼顾大局，保证系统整体有效运作；权衡软件功能和软件质量，管控技术栈，尽可能减少技术债务；锻炼和提升整个团队的架构设计能力；等等</p>\n<p class=\"para\">架构师在团队里面的角色很独特。不是项目经理，却需要把控软件交付周期。不是产品经理，却要保证软件满足业务目标。编程的同时，还需要做更多的架构设计。</p>\n<p class=\"para\"><img src=\"images/1931f31ed3fc52bf.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&#x26;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220521%2Fus-west-2%2Fs3%2Faws4_request&#x26;X-Amz-Date=20220521T033932Z&#x26;X-Amz-Expires=3600&#x26;X-Amz-Signature=f42f6d2aa0024bb25cc42e947648b3728daa12c4d33610b29b3cff178dacb118&#x26;X-Amz-SignedHeaders=host&#x26;x-id=GetObject\" alt=\"\"></p>\n<h3 class=\"heading\" id=\"111-从工程角度定义问题\" style=\"position:relative;\"><a href=\"#111-%E4%BB%8E%E5%B7%A5%E7%A8%8B%E8%A7%92%E5%BA%A6%E5%AE%9A%E4%B9%89%E9%97%AE%E9%A2%98\" aria-label=\"111 从工程角度定义问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1.1 从工程角度定义问题</h3>\n<p class=\"para\">软件的所有利益相关方都有着自己对项目的预期。所以架构师需要和产品经理、项目经理一起协作，共同定义项目的需求和目标。虽然大部分场景下都是产品经理定义功能特性，也就是我们说的”需求“，但是架构师需要关注另一种需求——质量属性。除此之外，还需要密切关注影响架构设计方向的约束和特性。</p>\n<h3 class=\"heading\" id=\"112-分解系统分配职责\" style=\"position:relative;\"><a href=\"#112-%E5%88%86%E8%A7%A3%E7%B3%BB%E7%BB%9F%E5%88%86%E9%85%8D%E8%81%8C%E8%B4%A3\" aria-label=\"112 分解系统分配职责 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1.2 分解系统，分配职责</h3>\n<p class=\"para\">有的软件系统，挤成一团，臃肿笨重，一起发布迭代。如果将软件拆分成各种”零件“，大家各司其职，开发和交付的过程都会变得顺利很多。</p>\n<p class=\"para\">架构师只有把软件系统进行分解，才能制定出一个满足质量属性和其他系统需求的策略。比如，你可以指定一个组件实现用户注册的功能，指定另外一个组件负责图像的识别；可以分配不同的团队开发不同的模块；可以将数据读写分离，使系统具备更高的可靠性，可用性，可伸缩性。</p>\n<h3 class=\"heading\" id=\"113-关注大局\" style=\"position:relative;\"><a href=\"#113-%E5%85%B3%E6%B3%A8%E5%A4%A7%E5%B1%80\" aria-label=\"113 关注大局 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1.3 关注大局</h3>\n<p class=\"para\">软件系统所处的环境中包含用户，企业，开发团队三类角色。企业雇佣和管理开发团队，开发团队开发并设计软件系统，将其运行在选用的硬件中。用户使用软件，从中获取乐趣与利润。企业则从用户中获取利润与收益。整个环境中包含的角色，软件，硬件等㩐诸多因素。</p>\n<p class=\"para\">从全局角度考虑整体系统意味着架构师需要处理的不仅仅是技术问题，人员，过程，业务需求等技术和非技术因素都将影响最后的软件系统。即使一个小小的决策也可能会产生深远的影响。所以架构师必须高瞻远瞩，纵观全局，不能只着眼于局部细节的设计。</p>\n<p class=\"para\">软件设计是一个不断挣扎的过程，在想要达成的目标与必须接受的现实之间寻找平衡。必须深思熟虑并做出取舍。</p>\n<h3 class=\"heading\" id=\"114-在质量属性之间做取舍\" style=\"position:relative;\"><a href=\"#114-%E5%9C%A8%E8%B4%A8%E9%87%8F%E5%B1%9E%E6%80%A7%E4%B9%8B%E9%97%B4%E5%81%9A%E5%8F%96%E8%88%8D\" aria-label=\"114 在质量属性之间做取舍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1.4 在质量属性之间做取舍</h3>\n<p class=\"para\">举个例子，假设需求目标要求系统的并发必须高达N/qps，（假设N是一个很大的值），我们可以通过加机器的方式来提高负载。但是这样一来硬件成本也就增加了。这就是一个典型的取舍：用高成本来换取高可用</p>\n<p class=\"para\">软件开发过程中，类似的取舍很常见。架构师需要找出备选方案，再与各方一起协商如何取舍最合理。系统的拆解和分割也不一定会有预期般的干净利落，过程中可能会犯错。开发过程中也会不断地往架构中引入技术债。</p>\n<h3 class=\"heading\" id=\"115-管理技术债务\" style=\"position:relative;\"><a href=\"#115-%E7%AE%A1%E7%90%86%E6%8A%80%E6%9C%AF%E5%80%BA%E5%8A%A1\" aria-label=\"115 管理技术债务 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1.5 管理技术债务</h3>\n<p class=\"para\">所有的软件都有技术债务。软件架构师知道系统是如何分解的，关注大局，指导划分出的各个模块协调工作，还需要将业务目标和技术决策放在一起考虑。只有这样才能游刃有余地管理技术债务。</p>\n<p class=\"para\">技术债务就像一条鸿沟，一边是当前的软件系统设计，另一边是你想要的，能够持续产生价值的设计。债务的多少可以通过填平这一鸿沟所需的代价衡量。</p>\n<blockquote class=\"quote\">\n<p class=\"para\">这一点深有体会。现在维护的系统中，充斥着过去多个团队的设计理念和技术选型，并一直影响着后续接受维护的开发人员。技术债务就像是泛滥的洪水，硬生生地阻挡在我和我目标架构中间。目前唯一的策略是， 治理泛滥洪水的同时修建一些健壮的桥梁，帮助早日抵达目标。而这些都是偿还技术债务的代价。</p>\n</blockquote>\n<p class=\"para\">有时候，开发团队会适当引入技术债务来帮助快速实现业务目标，后续再逐步偿还代价。架构师在这个过程中，需要明确技术债务，帮助开发团队决定何时采用，如何管理。</p>\n<h3 class=\"heading\" id=\"116-提升团队的架构技能\" style=\"position:relative;\"><a href=\"#116-%E6%8F%90%E5%8D%87%E5%9B%A2%E9%98%9F%E7%9A%84%E6%9E%B6%E6%9E%84%E6%8A%80%E8%83%BD\" aria-label=\"116 提升团队的架构技能 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1.6 提升团队的架构技能</h3>\n<p class=\"para\">架构师是整个团队的导师和顾问。设计酷炫却无人理解的架构毫无意义。作为团队的架构专家，架构师有责任向团队分享知识，帮助他们成功地开发出软件</p>\n<p class=\"para\">架构师应当适时地传授设计技巧和架构理念。可以和组员结对设计，写文档授业解惑，还可以提出建设性的批评。把架构设计当作是一项社交活动，让团队成员参与到设计过程中来，这是最有效提升团队架构技能的方法。</p>\n<blockquote class=\"quote\">\n<p class=\"para\">个人感觉在这里架构师的角色有一点leadership的意思，带领大家往前冲，达成目标。有leadership的加持，应该能够帮助成为更好的架构师吧？</p>\n</blockquote>\n<h2 class=\"heading subtitle heading\" id=\"12-什么是软件架构\" style=\"position:relative;\"><a href=\"#12-%E4%BB%80%E4%B9%88%E6%98%AF%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84\" aria-label=\"12 什么是软件架构 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2 什么是软件架构</h2>\n<blockquote class=\"quote\">\n<p class=\"para\">所谓的架构，是指构成一个系统的主要元素及它们之间的主要关联，这些元素和关联能够反映该系统的本质特征。从抽象的系统层面来看，软件架构、系统架构、解决方案架构和企业架构，本质上是一致的，区别在于关注的主体不同。</p>\n</blockquote>\n<p class=\"para\">软件架构是关于如何组织软件的一系列重大设计决策的集合，旨在实现期望的质量属性和其他软件特性。</p>\n<p class=\"para\">设计决策的重要性体现在许多方面。可能对软件的质量属性、开发进度、成本产生影响。可能会影响到很多人，甚至影响到上下游的其他软件系统。</p>\n<p class=\"para\">好的架构能提升需求方要求的质量属性，抑制或者消除潜在的隐患。帮助开发团队多快好省地输出成果，不用连续加班。</p>\n<h3 class=\"heading\" id=\"121-定义基本结构\" style=\"position:relative;\"><a href=\"#121-%E5%AE%9A%E4%B9%89%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\" aria-label=\"121 定义基本结构 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2.1 定义基本结构</h3>\n<p class=\"para\">软件有它的主体结构。这个结构定义了软件系统的组织和协调方式。体现在你编写的代码和运行的软件中，甚至体现在你与他人的协作中。</p>\n<p class=\"para\">将两个元素以某种关系连接在一起。为了避免空想架构导致无法落地，可以使用三种类型的元素和关系来构建架构。在《Software Architecture in Practice》一书中将这三种类型定义为模块（module）、组件连接器（component &#x26; connector 简称 C&#x26;C）和分配（allocation）。将相同类型的元素和关系连接在一起，就形成了结构。</p>\n<p class=\"para\">|示例元素|示例关系\n---|---|---\n模块|类、包、层、存储过程、模块、配置文件、数据库表|使用、允许使用、依赖\n组件连接器|对象、连接、线程、进程、层、过滤器|调用、订阅、管道、发布、返回\n分配|服务器、传感器、台式机、负载均衡器、团队、用户、Docker 容器|运行于、负责、开发、存储、支付</p>\n<p class=\"para\">模块结构存在于设计阶段。编写代码的过程也是你与模块结构进行交互的过程。即使软件没有运行，模块结构依然存在于文件系统中。</p>\n<p class=\"para\">组件连接器结构在软件运行时出现。在运行时，组件可以创建与其他组件的连接、产生新进程以及实例化新对象。系统不运行时C&#x26;C结构便不复存在。只能从其运行留下的日志文件或者数据库条目中窥见其身影。</p>\n<p class=\"para\">分配结构展示了模块与C&#x26;C之间，以及这些元素与现实物理元素之间的协同与响应关系。分配结构又称映射结构，因为它显示了元素之间的映射关系。比如某一个元素时运行在客户端，还是运行在服务器上？A团队负责构建系统的哪个部分？分配结构恩卡依回答这些问题。</p>\n<p class=\"para\">不同类型的结构适合用来思考不同的系统特性。比如模块接口可以考虑测试性和可维护性。C&#x26;C结构则考虑运行时的问题，比如可以性和性能。如果你发现自己使用了混合结构（如静态元素使用了动态关系），那说明你的理解还有不足之处。</p>\n<h2 class=\"heading subtitle heading\" id=\"13-称为团队的架构师\" style=\"position:relative;\"><a href=\"#13-%E7%A7%B0%E4%B8%BA%E5%9B%A2%E9%98%9F%E7%9A%84%E6%9E%B6%E6%9E%84%E5%B8%88\" aria-label=\"13 称为团队的架构师 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.3 称为团队的架构师</h2>\n<p class=\"para\">有的团队有明确的架构师角色，而有的没有。虽然有的团队没有这样的头衔，但是仔细观察你会发现，有人在不知不觉中承担了这份工作。</p>\n<p class=\"para\">架构师可以是团队的领导者，也可以是那些以特定方式思考软件设计的人。架构师的名片上不一定印着”软件架构师“。每个团队都需要至少一名架构师，优秀的团队则不止一位。</p>\n<p class=\"para\">如果团队没有架构师，那么我们的机会就来了。只要乐意，你可以随时将架构思维引入团队的设计讨论，询问关于质量属性的问题，指明团队如何取舍，主动设计决策并开始接受更多架构设计职责。</p>\n<p class=\"para\">如果团队有架构师，可以主动帮忙，多多合作。开发软件系统是浩大的工程，关注细节的人越多，团队成功的可能性越大。</p>\n<h3 class=\"heading\" id=\"131-从程序员向架构师转变\" style=\"position:relative;\"><a href=\"#131-%E4%BB%8E%E7%A8%8B%E5%BA%8F%E5%91%98%E5%90%91%E6%9E%B6%E6%9E%84%E5%B8%88%E8%BD%AC%E5%8F%98\" aria-label=\"131 从程序员向架构师转变 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.3.1 从程序员向架构师转变</h3>\n<p class=\"para\">在成为架构师之前，应该参与开发过3-5个系统，且承担的技术职责应该不断增加。随着架构职责增加，你会发现编程的时间越来越少。这是正常的，但是架构师不能完全放弃编程。</p>\n<p class=\"para\">为了记录和评估你从程序员到架构师的转变过程，你可以建立一个档案吗，记录你在每个项目中担任的角色，简要描述系统情况以及开发过程中学到的知识。这种回顾对所有技术领导者，尤其是架构师来说是必不可少的。</p>\n<p class=\"para\">针对档案中的每一个项目，回答一下问题：</p>\n<ul>\n<li>\n<p class=\"para\">项目的利益方是谁，主要业务目标是什么？</p>\n</li>\n<li>\n<p class=\"para\">项目的整体解决方案是什么样的？</p>\n</li>\n<li>\n<p class=\"para\">涉及到哪些技术？</p>\n</li>\n<li>\n<p class=\"para\">最大的风险是什么？你是如何克服的？</p>\n</li>\n<li>\n<p class=\"para\">如果有机会重新做一遍项目，你会如何改进？</p>\n</li>\n</ul>\n<p class=\"para\">无论你希望获得职位晋升，还是提高专业水平，都要有耐心。时刻做好准备，把握一切设计架构的机会。</p>\n<blockquote class=\"quote\">\n<p class=\"para\">确实如此。站在技术的角度来说，如果想要能够往上走一个层级（这个层级指的是内在的能力，评价标准是个人过往的经验核能力。不是国内各公司的职级体系），确实需要有耐心，时刻准备。</p>\n</blockquote>\n<p class=\"para\">架构师不仅是团队中的角色，更是一种思维方式。即使是程序员，每天也会做出很多设计决定，其中有一部分是具有架构意义的。所以无论是谁，都应该慎重决策。</p>\n<h2 class=\"heading subtitle heading\" id=\"14-开发出色的软件\" style=\"position:relative;\"><a href=\"#14-%E5%BC%80%E5%8F%91%E5%87%BA%E8%89%B2%E7%9A%84%E8%BD%AF%E4%BB%B6\" aria-label=\"14 开发出色的软件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.4 开发出色的软件</h2>\n<blockquote class=\"quote\">\n<p class=\"para\">书中提到架构可以从6个方面指引开发团队打造出色的软件，并在后续的章节中详细讲解了这几个方面。</p>\n</blockquote>\n<ul>\n<li>\n<p class=\"para\">架构将大问题分解为容易处理的小问题。</p>\n</li>\n<li>\n<p class=\"para\">软件就爱够告诉大家如何协同工作。</p>\n</li>\n<li>\n<p class=\"para\">软件架构为讨论负责设计提供了基本词汇</p>\n</li>\n<li>\n<p class=\"para\">软件架构关注的不仅仅是功能</p>\n</li>\n<li>\n<p class=\"para\">软件架构让你避免犯重大错误</p>\n</li>\n<li>\n<p class=\"para\">架构让软件更灵活</p>\n</li>\n</ul>\n<h2 class=\"heading subtitle heading\" id=\"结束语\" style=\"position:relative;\"><a href=\"#%E7%BB%93%E6%9D%9F%E8%AF%AD\" aria-label=\"结束语 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>结束语</h2>\n<p class=\"para\">以上是《架构师修炼之道》一书的第一章节的内容，主要阐述了什么是架构师、什么是软件架构、以及软件架构对软件开发一些帮助。通过细品本章内容，我也意识到，其实我的工作已经是半个架构师了。书中提到的技术债务有亲身经历，好的架构可以为项目带来的帮助和提升这一点也是感同身受。</p>\n<p class=\"para\">下一章将介绍如何借助设计思维来确定架构设计该怎么做</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-%E6%88%90%E4%B8%BA%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%B8%88\">1 成为软件架构师</a></p>\n<ul>\n<li><a href=\"#11-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%B8%88%E7%9A%84%E8%81%8C%E8%B4%A3\">1.1 软件架构师的职责</a></li>\n<li><a href=\"#111-%E4%BB%8E%E5%B7%A5%E7%A8%8B%E8%A7%92%E5%BA%A6%E5%AE%9A%E4%B9%89%E9%97%AE%E9%A2%98\">1.1.1 从工程角度定义问题</a></li>\n<li><a href=\"#112-%E5%88%86%E8%A7%A3%E7%B3%BB%E7%BB%9F%E5%88%86%E9%85%8D%E8%81%8C%E8%B4%A3\">1.1.2 分解系统，分配职责</a></li>\n<li><a href=\"#113-%E5%85%B3%E6%B3%A8%E5%A4%A7%E5%B1%80\">1.1.3 关注大局</a></li>\n<li><a href=\"#114-%E5%9C%A8%E8%B4%A8%E9%87%8F%E5%B1%9E%E6%80%A7%E4%B9%8B%E9%97%B4%E5%81%9A%E5%8F%96%E8%88%8D\">1.1.4 在质量属性之间做取舍</a></li>\n<li><a href=\"#115-%E7%AE%A1%E7%90%86%E6%8A%80%E6%9C%AF%E5%80%BA%E5%8A%A1\">1.1.5 管理技术债务</a></li>\n<li><a href=\"#116-%E6%8F%90%E5%8D%87%E5%9B%A2%E9%98%9F%E7%9A%84%E6%9E%B6%E6%9E%84%E6%8A%80%E8%83%BD\">1.1.6 提升团队的架构技能</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#12-%E4%BB%80%E4%B9%88%E6%98%AF%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84\">1.2 什么是软件架构</a></p>\n<ul>\n<li><a href=\"#121-%E5%AE%9A%E4%B9%89%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\">1.2.1 定义基本结构</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#13-%E7%A7%B0%E4%B8%BA%E5%9B%A2%E9%98%9F%E7%9A%84%E6%9E%B6%E6%9E%84%E5%B8%88\">1.3 称为团队的架构师</a></p>\n<ul>\n<li><a href=\"#131-%E4%BB%8E%E7%A8%8B%E5%BA%8F%E5%91%98%E5%90%91%E6%9E%B6%E6%9E%84%E5%B8%88%E8%BD%AC%E5%8F%98\">1.3.1 从程序员向架构师转变</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#14-%E5%BC%80%E5%8F%91%E5%87%BA%E8%89%B2%E7%9A%84%E8%BD%AF%E4%BB%B6\">1.4 开发出色的软件</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%BB%93%E6%9D%9F%E8%AF%AD\">结束语</a></p>\n</li>\n</ul>","headings":[{"id":"1-成为软件架构师","depth":2,"value":"1 成为软件架构师"},{"id":"11-软件架构师的职责","depth":3,"value":"1.1 软件架构师的职责"},{"id":"111-从工程角度定义问题","depth":3,"value":"1.1.1 从工程角度定义问题"},{"id":"112-分解系统分配职责","depth":3,"value":"1.1.2 分解系统，分配职责"},{"id":"113-关注大局","depth":3,"value":"1.1.3 关注大局"},{"id":"114-在质量属性之间做取舍","depth":3,"value":"1.1.4 在质量属性之间做取舍"},{"id":"115-管理技术债务","depth":3,"value":"1.1.5 管理技术债务"},{"id":"116-提升团队的架构技能","depth":3,"value":"1.1.6 提升团队的架构技能"},{"id":"12-什么是软件架构","depth":2,"value":"1.2 什么是软件架构"},{"id":"121-定义基本结构","depth":3,"value":"1.2.1 定义基本结构"},{"id":"13-称为团队的架构师","depth":2,"value":"1.3 称为团队的架构师"},{"id":"131-从程序员向架构师转变","depth":3,"value":"1.3.1 从程序员向架构师转变"},{"id":"14-开发出色的软件","depth":2,"value":"1.4 开发出色的软件"},{"id":"结束语","depth":2,"value":"结束语"}],"frontmatter":{"title":"《架构修炼师之道》摘录01-成为软件架构师","date":"2021-07-09","cover":"https://images.unsplash.com/photo-1585647347384-2593bc35786b?ixlib=rb-1.2.1&q=85&fm=jpg&crop=entropy&cs=srgb","description":null,"categories":["解决方案"],"tags":["笔记","架构"]}},"previous":{"fields":{"slug":"/blogs/《架构修炼师之道》摘录01-成为软件架构师/"},"frontmatter":{"title":"《架构修炼师之道》摘录01-成为软件架构师"}},"next":{"fields":{"slug":"/blogs/2021-04-23-ParseInt()的迷幻行为/"},"frontmatter":{"title":"ParseInt()的迷幻行为","tags":["Javascript"],"categories":["技术研究"],"status":null}}},"pageContext":{"id":"44af9d7b-978b-5e08-87f8-8abd57c51458","previousPostId":"aa2fc259-b2c7-57af-b29c-1cf08e696aa2","nextPostId":"e3d68767-ea0a-5e8e-b97a-870c83e23193"}},
    "staticQueryHashes": ["2841359383"]}