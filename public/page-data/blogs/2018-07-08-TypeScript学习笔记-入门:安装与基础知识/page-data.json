{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blogs/2018-07-08-TypeScript学习笔记-入门:安装与基础知识/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"blog","name":"博文","url":"/blogs"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"lab","name":"实验室","url":"/labs"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"e690f724-5e16-5f67-8fa6-eb6f8b574876","html":"<p class=\"para\">TypeScript 是由微软推出的开源编程语言，官网的定义如下：</p>\n<blockquote class=\"quote\">\n<p class=\"para\">TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. Any browser. Any host. Any OS. Open source.</p>\n</blockquote>\n<blockquote class=\"quote\">\n<p class=\"para\">TypeScript 是 JavaScript 的类型的超集，它可以编译成纯 JavaScript。编译出来的 JavaScript 可以运行在任何浏览器上。TypeScript 编译工具可以运行在任何服务器和任何系统上。TypeScript 是开源的。</p>\n</blockquote>\n<!--more-->\n<h3 class=\"heading\" id=\"安装-TypeScript\" style=\"position:relative;\"><a href=\"#%E5%AE%89%E8%A3%85-TypeScript\" aria-label=\"安装 TypeScript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安装 TypeScript</h3>\n<p class=\"para\">使用 npm 安装 typescript。一步到位，可通过 <code>tsc --help</code> 查看帮助。</p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">npm install -g typescript</code>\n        </deckgo-highlight-code>\n<h3 class=\"heading\" id=\"简单的例子\" style=\"position:relative;\"><a href=\"#%E7%AE%80%E5%8D%95%E7%9A%84%E4%BE%8B%E5%AD%90\" aria-label=\"简单的例子 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>简单的例子</h3>\n<p class=\"para\">前面说到，TypeScript 是 JavaScript 的超集。何谓超集？来回顾一下初中数学：</p>\n<blockquote class=\"quote\">\n<p class=\"para\">如果一个集合S2中的每一个元素都在集合S1中，且集合S1中可能包含S2中没有的元素，则集合S1就是S2的一个超集，反过来，S2是S1的子集。</p>\n</blockquote>\n<p class=\"para\">而这也体现在TypeScript的语言上，TypeScript 包含 JavaSscript 的所有。也就是说，即使是按照 JavaScript 编写的代码，也能够被视作 TypeScript 来编译执行。举一个简单的例子：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">// hello.ts\n\nfunction sayHello(name) {\n  return `Hello, ${name}`;\n}\n\nsayHeloo(&#39;zhanglun`&#39;);</code>\n        </deckgo-highlight-code>\n<p class=\"para\">上述代码在TypeScript编译器会中会被编译输出如下：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">// hello.js\nfunction sayHello(name) {\n  return &quot;Hello, &quot; + name;\n}\nsayHello(&#39;zhanglun&#39;);</code>\n        </deckgo-highlight-code>\n<h3 class=\"heading\" id=\"加入类型检查\" style=\"position:relative;\"><a href=\"#%E5%8A%A0%E5%85%A5%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5\" aria-label=\"加入类型检查 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>加入类型检查</h3>\n<p class=\"para\">上面的例子只是提到了 TypeScript代码 转换为 JavaScript 代码。接下来说一说 TypeScript 区别于 JavaScript 的精髓所在：类型检查。</p>\n<p class=\"para\">众所周知，JavaScript 是一门弱类型语言的，在代码执行的过程中，时常会执行一些隐身类型转换，而这往往会产生一些难以预料的问题，同时难以排查出存在问题的代码。而 TypeScript 加入了编译的过程，在编译过程中进行静态类型检查。如果发现有错误，编译的时候就会报错。</p>\n<blockquote class=\"quote\">\n<p class=\"para\">TypeScript 中，使用 : 指定变量的类型，: 的前后有没有空格都可以。</p>\n</blockquote>\n<p class=\"para\">举一个简单的例子：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">function sayHello(person: string) {\n  return &#39;Hello, &#39; + person;\n}\n\nlet user = [0, 1, 2];\n\nconsole.log(sayHello(user));</code>\n        </deckgo-highlight-code>\n<p class=\"para\">这段代码的编译会出错。</p>\n<deckgo-highlight-code language=\"bash\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">hello.ts:7:22 - error TS2345: Argument of type &#39;number[]&#39; is not assignable to parameter of type &#39;string&#39;.\n\n7 console.log(sayHello(user));</code>\n        </deckgo-highlight-code>\n<p class=\"para\">TypeScript 编译过程即使报错了，还是会生成编译结果，我们仍然可以使用这个编译之后的文件。</p>\n<p class=\"para\">如果要在报错的时候终止 JavaScript 文件的生成，可以在 tsconfig.json 中配置 noEmitOnError 即可。更新 config 相关配置请移步<a href=\"http://www.typescriptlang.org/docs/handbook/tsconfig-json.html\" class=\"link-underline\">官方手册</a>。</p>\n<h3 class=\"heading\" id=\"类型声明\" style=\"position:relative;\"><a href=\"#%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E\" aria-label=\"类型声明 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>类型声明</h3>\n<p class=\"para\">JavaScript 的类型分为两种：原始数据类型（Primitive data types）和对象类型（Object types）。</p>\n<p class=\"para\">原始数据类型包括：布尔值、数值、字符串、null、undefined 以及 ES6 中的新类型 Symbol。</p>\n<p class=\"para\">在 TypeScript 中，声明上述各种变量稍有不同。</p>\n<h4 class=\"heading\" id=\"Boolean\" style=\"position:relative;\"><a href=\"#Boolean\" aria-label=\"Boolean permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Boolean</h4>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">let isDone:boolean = false; // 声明一个变量，这个变量是一个boolen\nlet createdByNewBoolean: boolean = new Boolean(1); // index.ts(1,5): error TS2322: Type &#39;Boolean&#39; is not assignable to type &#39;boolean&#39;。 new Boolean() 返回的是一个 Boolean 对象。\nlet createdByBoolean: boolean = Boolean(1); // 直接调用 Boolean 也可以返回一个 boolean 类型：</code>\n        </deckgo-highlight-code>\n<h4 class=\"heading\" id=\"Number\" style=\"position:relative;\"><a href=\"#Number\" aria-label=\"Number permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Number</h4>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">let decLiteral: number = 6;\nlet hexLiteral: number = 0xf00d;\n\n// ES6 中的二进制表示法\nlet binaryLiteral: number = 0b1010;\n\n// ES6 中的八进制表示法\nlet octalLiteral: number = 0o744;\nlet notANumber: number = NaN;\nlet infinityNumber: number = Infinity;</code>\n        </deckgo-highlight-code>\n<h4 class=\"heading\" id=\"String\" style=\"position:relative;\"><a href=\"#String\" aria-label=\"String permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String</h4>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">let myName: string = &#39;Tom&#39;;\nlet myAge: number = 25;\n\n// 模板字符串\nlet sentence: string = `Hello, my name is ${myName}.\nI&#39;ll be ${myAge + 1} years old next month.`;</code>\n        </deckgo-highlight-code>\n<h4 class=\"heading\" id=\"Void\" style=\"position:relative;\"><a href=\"#Void\" aria-label=\"Void permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Void</h4>\n<p class=\"para\">JavaScript 没有空值（Void）的概念，在 TypeScirpt 中，可以用 void 表示没有任何返回值的函数：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">function alertName(): void {\n    alert(&#39;My name is Tom&#39;);\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">声明一个 void 类型的变量没有什么用，因为你只能将它赋值为 undefined 和 null：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">let unusable: void = undefined;</code>\n        </deckgo-highlight-code>\n<h4 class=\"heading\" id=\"Null-和-Undefined\" style=\"position:relative;\"><a href=\"#Null-%E5%92%8C-Undefined\" aria-label=\"Null 和 Undefined permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Null 和 Undefined</h4>\n<p class=\"para\">在 TypeScript 中，可以使用 null 和 undefined 来定义这两个原始数据类型：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">let u: undefined = undefined;\nlet n: null = null;</code>\n        </deckgo-highlight-code>\n<p class=\"para\">undefined 类型的变量只能被赋值为 undefined，null 类型的变量只能被赋值为 null。</p>\n<p class=\"para\">与 void 的区别是，undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的变量，可以赋值给 number 类型的变量：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">// 这样不会报错\nlet num: number = undefined;\n// 这样也不会报错\nlet u: undefined;\nlet num: number = u;</code>\n        </deckgo-highlight-code>\n<p class=\"para\">而 void 类型的变量不能赋值给 number 类型的变量：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">let u: void;\nlet num: number = u;\n\n// index.ts(2,5): error TS2322: Type &#39;void&#39; is not assignable to type &#39;number&#39;.</code>\n        </deckgo-highlight-code>\n<h4 class=\"heading\" id=\"任意值\" style=\"position:relative;\"><a href=\"#%E4%BB%BB%E6%84%8F%E5%80%BC\" aria-label=\"任意值 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>任意值</h4>\n<p class=\"para\">TypeScript 提供了一个 any 类型，表示允许赋值为任意类。声明一个变量为任意值之后，对它的任何操作，返回的内容的类型都是任意值。要注意的是： 变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型。</p>\n<p class=\"para\">如果是一个普通类型，在赋值过程中改变类型是不被允许的：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">let myFavoriteNumber: string = &#39;seven&#39;;\n\nmyFavoriteNumber = 7;\n\n// index.ts(2,1): error TS2322: Type &#39;number&#39; is not assignable to type &#39;string&#39;.</code>\n        </deckgo-highlight-code>\n<p class=\"para\">但如果是 any 类型，则允许被赋值为任意类型。</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">let myFavoriteNumber: any = &#39;seven&#39;;\n\nmyFavoriteNumber = 7;</code>\n        </deckgo-highlight-code>\n<h4 class=\"heading\" id=\"聪明的类型推导\" style=\"position:relative;\"><a href=\"#%E8%81%AA%E6%98%8E%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC\" aria-label=\"聪明的类型推导 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>聪明的类型推导</h4>\n<p class=\"para\">如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型。</p>\n<p class=\"para\">以下代码虽然没有指定类型，但是会在编译的时候报错：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">let myFavoriteNumber = &#39;seven&#39;;\n\nmyFavoriteNumber = 7;\n\n// index.ts(2,1): error TS2322: Type &#39;number&#39; is not assignable to type &#39;string&#39;.</code>\n        </deckgo-highlight-code>\n<p class=\"para\">事实上，它等价于：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">let myFavoriteNumber: string = &#39;seven&#39;;\n\nmyFavoriteNumber = 7;\n\n// index.ts(2,1): error TS2322: Type &#39;number&#39; is not assignable to type &#39;string&#39;.</code>\n        </deckgo-highlight-code>\n<p class=\"para\">TypeScript 会在没有明确的指定类型的时候推测出一个类型，这就是类型推论。</p>\n<p class=\"para\">如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 any 类型而完全不被类型检查：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">let myFavoriteNumber;\n\nmyFavoriteNumber = &#39;seven&#39;;\nmyFavoriteNumber = 7;</code>\n        </deckgo-highlight-code>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E5%AE%89%E8%A3%85-typescript\">安装 TypeScript</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%AE%80%E5%8D%95%E7%9A%84%E4%BE%8B%E5%AD%90\">简单的例子</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%8A%A0%E5%85%A5%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5\">加入类型检查</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E\">类型声明</a></p>\n<ul>\n<li><a href=\"#boolean\">Boolean</a></li>\n<li><a href=\"#number\">Number</a></li>\n<li><a href=\"#string\">String</a></li>\n<li><a href=\"#void\">Void</a></li>\n<li><a href=\"#null-%E5%92%8C-undefined\">Null 和 Undefined</a></li>\n<li><a href=\"#%E4%BB%BB%E6%84%8F%E5%80%BC\">任意值</a></li>\n<li><a href=\"#%E8%81%AA%E6%98%8E%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC\">聪明的类型推导</a></li>\n</ul>\n</li>\n</ul>","headings":[{"id":"安装-TypeScript","depth":3,"value":"安装 TypeScript"},{"id":"简单的例子","depth":3,"value":"简单的例子"},{"id":"加入类型检查","depth":3,"value":"加入类型检查"},{"id":"类型声明","depth":3,"value":"类型声明"},{"id":"Boolean","depth":4,"value":"Boolean"},{"id":"Number","depth":4,"value":"Number"},{"id":"String","depth":4,"value":"String"},{"id":"Void","depth":4,"value":"Void"},{"id":"Null-和-Undefined","depth":4,"value":"Null 和 Undefined"},{"id":"任意值","depth":4,"value":"任意值"},{"id":"聪明的类型推导","depth":4,"value":"聪明的类型推导"}],"frontmatter":{"title":"TypeScript学习笔记-入门:安装与基础知识","date":"2018-07-08","cover":null,"description":null,"categories":[],"tags":["TypeScript"]}},"previous":{"fields":{"slug":"/blogs/2018-07-15-TypeScript学习笔记-在Webpack中配置TypeScript/"},"frontmatter":{"title":"TypeScript学习笔记-在Webpack中配置TypeScript"}},"next":{"fields":{"slug":"/blogs/2018-02-04-个人服务器常用基础配置/"},"frontmatter":{"title":"个人服务器常用基础配置","tags":["Linux","配置"],"categories":["工具使用"],"status":null}}},"pageContext":{"id":"e690f724-5e16-5f67-8fa6-eb6f8b574876","previousPostId":"f3a7a13e-7910-5515-a997-a8f86f090b3b","nextPostId":"4cbe0ec2-2969-5d37-ae1d-701639d63791"}},
    "staticQueryHashes": ["2841359383"]}