{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blogs/(译)node.js的模块- exports 和 module.exports/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"blog","name":"博文","url":"/blogs"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"lab","name":"实验室","url":"/labs"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"61c585be-d577-55f9-a983-3cd509546299","html":"<blockquote class=\"quote\">\n<p class=\"para\">原文标题：Node.js Module – exports vs module.exports</p>\n</blockquote>\n<p class=\"para\">原文链接：<a href=\"http://www.hacksparrow.com/node-js-exports-vs-module-exports.html\" class=\"link-underline\">http://www.hacksparrow.com/node-js-exports-vs-module-exports.html\r\n</a></p>\n<!--more-->\n<p class=\"para\">##exports 和 module.exports 有什么区别？</p>\n<p class=\"para\">你一定很熟悉 Node.js 模块中的用来在你的模块中创建函数的 exports 对象，就像下面这样。</p>\n<p class=\"para\">创建一个叫做 <code>rocker.js</code> 的文件：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">exports.name = function() {\r\n    console.log(&#39;My name is Lemmy Kilmister&#39;);\r\n};</code>\n        </deckgo-highlight-code>\n<p class=\"para\">然后可以在另外一个文件中调用 <code>rocker.js</code> :</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">var rocker = require(&#39;./rocker.js&#39;);\r\nrocker.name(); // &#39;My name is Lemmy Kilmister&#39;</code>\n        </deckgo-highlight-code>\n<p class=\"para\">但是，<code>module.exports</code> 到底什么？它是合法的吗？</p>\n<p class=\"para\">令人吃惊的是：<code>module.exports</code> 是真实存在的。<code>exports</code>  只不过是 <code>module.exports</code> 的帮手而已。你的模块直接返回返回 <code>module.exports</code> 给调用者，而不是 <code>exports</code> 。所有的 <code>exports</code> 做的工作实际上是收集属性，如果 <code>module.exports</code> 当前没有任何属性，<code>exports</code>便将收集到的属性添加到 <code>module.exports</code> 上。如果 <code>module.exports</code>\r\n已经存在若干属性，所以 <code> exports</code> 上的属性都会被忽略。</p>\n<p class=\"para\">修改 <code>rocker.js</code> 文件：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">module.exports = &#39;ROCK IT!&#39;;\r\nexports.name = function() {\r\n    console.log(&#39;My name is Lemmy Kilmister&#39;);\r\n};</code>\n        </deckgo-highlight-code>\n<p class=\"para\">在另一个文件中调用 <code>rocker.js</code>:</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">var rocker = require(&#39;./rocker.js&#39;);\r\nrocker.name(); // TypeError: Object ROCK IT! has no method &#39;name&#39;</code>\n        </deckgo-highlight-code>\n<p class=\"para\">上述例子中的 <code>rocker</code> 模块完全将 <code>exports.name</code> 忽略了，只返回了一个 String 字符串：<code>‘ROCK IT!’</code> 。 从这个例子你大概明白了：你的模块并不一定总是一个模块的实例(module instance)，它可以是任何合法的 JavaScript 对象——boolean, number, date, JSON, string, function, array 和其他的。你的模块可以是任何你设置的  <code>module.exports</code> 的值。如果你没有明确地为  <code>module.exports</code> 设置任何值，那么 <code>exports</code> 中的属性会自动添加到 <code>module.exports<code> 中，然后并返回它。</p>\n<p class=\"para\">在这种情况下，你的模块是一个类：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">module.exports = function(name, age) {\r\n    this.name = name;\r\n    this.age = age;\r\n    this.about = function() {\r\n        console.log(this.name +&#39; is &#39;+ this.age +&#39; years old&#39;);\r\n    };\r\n};</code>\n        </deckgo-highlight-code>\n<p class=\"para\">而你可以像这样使用：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">var Rocker = require(&#39;./rocker.js&#39;);\r\nvar r = new Rocker(&#39;Ozzy&#39;, 62);\r\nr.about(); // Ozzy is 62 years old</code>\n        </deckgo-highlight-code>\n<p class=\"para\">在这时候你的模块是一个数组：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">module.exports = [\r\n    &#39;Lemmy Kilmister&#39;, \r\n    &#39;Ozzy Osbourne&#39;, \r\n    &#39;Ronnie James Dio&#39;, \r\n    &#39;Steven Tyler&#39;, \r\n    &#39;Mick Jagger&#39;\r\n];</code>\n        </deckgo-highlight-code>\n<p class=\"para\">而你可以这样使用：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">var rocker = require(&#39;./rocker.js&#39;);\r\nconsole.log(&#39;Rockin in heaven: &#39; + rocker[2]); //Rockin in heaven: Ronnie James Dio</code>\n        </deckgo-highlight-code>\n<p class=\"para\">现在你应该明白了点什么：<br>\n如果你想让你的模块返回一个特殊的对象类型，比如构造函数，那么你得使用 module.exports ；如果你只想模块作为一个典型的模块实例（module instance），那么就用<code>exports</code>。</p>\n<p class=\"para\">把属性添加到 <code>module.exports</code> 中和添加到 <code>exports</code> 中的结果是一样的。比如像这样：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">module.exports.name = function() {\r\n    console.log(&#39;My name is Lemmy Kilmister&#39;);\r\n};</code>\n        </deckgo-highlight-code>\n<p class=\"para\">其实和下面的是一样的：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">exports.name = function() {\r\n    console.log(&#39;My name is Lemmy Kilmister&#39;);\r\n};</code>\n        </deckgo-highlight-code>\n<p class=\"para\">但是要注意，他们不是同一个东西。就像之前说的一样，<code>exports</code>  只不过是 <code>module.exports</code> 的帮手而已。话虽如此，<code>exports</code>还是推荐的对象，除非你想把你模块的对象类型从传统的模块实例（module instance）修改为其他的。</p>\n<p class=\"para\">只要你没有使用赋值运算重写<code>module.exports</code>对象，任何添加到 <code>module.exports</code>和<code>exports</code>的属性都能够在 <code>require</code>模块中。</p>\n<p class=\"para\">比如这是你的模块中的内容：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">module.exports.age = 68;\r\nexports.name = &#39;Lemmy Kilmister&#39;;</code>\n        </deckgo-highlight-code>\n<p class=\"para\">下面的代码可以很好的工作：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">var rocker = require(&#39;./rocker.js&#39;);\r\nconsole.log(&#39;%s is %s&#39;, rocker.name, rocker.age); // Lemmy Kilmister is 68</code>\n        </deckgo-highlight-code>\n<p class=\"para\">但是，如果你在你的模块中重写了<code>module.exports</code>中的任何地方，代码便会出错：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">module.exports = &#39;LOL&#39;;\r\nmodule.exports.age = 68;\r\nexports.name = &#39;Lemmy Kilmister&#39;;</code>\n        </deckgo-highlight-code>\n<p class=\"para\">或者这样：</p>\n<deckgo-highlight-code language=\"js\" theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">module.exports.age = 68;\r\nexports.name = &#39;Lemmy Kilmister&#39;;\r\nmodule.exports = &#39;WTF&#39;;</code>\n        </deckgo-highlight-code>\n<p class=\"para\">顺序没有关系，<code>rocker.age</code> 和 <code>rocker.name</code> 将显示为 <code>undefined</code>。</p>\n<p class=\"para\">并且注意：只是因为 <code>module.exports</code> 和  <code>exports</code> 都能输出模块，并不意味这你可以组合使用。我的建议是，坚持使用 <code>exports.*</code>，明白<code>module.exports</code></p>\n<p class=\"para\">我希望这篇文章能帮助你理解exports和module.exports之间的不同，并且能进一步的理解模块在Node.js中是怎么工作的。</p>\n<p class=\"para\">(完)</p>\n<p class=\"para\"><strong>翻译水平有待提高，所翻译的博文并不是按照原文一句一句翻译，而是添加了自己对文章的理解。如有不正之处，欢迎指正！</strong>\r\n<strong>个人笔记，仅供参考。</strong></p>\n<blockquote class=\"quote\">\n<p class=\"para\">参考:</p>\n</blockquote>\n<p class=\"para\"><a href=\"http://www.hacksparrow.com/node-js-exports-vs-module-exports.html\" class=\"link-underline\">http://www.hacksparrow.com/node-js-exports-vs-module-exports.html\r\n</a></p>","tableOfContents":"","headings":[],"frontmatter":{"title":"【译】Node.js的模块-exports和module.exports","date":"2014-04-26","cover":null,"description":null,"categories":["博客译文"],"tags":["译文","Node.js"]}},"previous":{"fields":{"slug":"/blogs/(译)node.js的全局变量/"},"frontmatter":{"title":"【译】Node.js的全局变量"}},"next":{"fields":{"slug":"/blogs/Node学习笔记-Node.js中的模块和包/"},"frontmatter":{"title":"Node学习笔记-Node.js中的模块","tags":["笔记","Node.js"],"categories":["Node.js"],"status":null}}},"pageContext":{"id":"61c585be-d577-55f9-a983-3cd509546299","previousPostId":"a27f30e5-aba7-5152-889e-bf9b09f9438c","nextPostId":"b95017c1-3fa9-5841-80ae-b639a3e9971b"}},
    "staticQueryHashes": ["2841359383"]}