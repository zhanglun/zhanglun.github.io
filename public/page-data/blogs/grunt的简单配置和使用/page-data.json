{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/blogs/grunt的简单配置和使用/",
    "result": {"data":{"site":{"siteMetadata":{"title":"张小伦的网络日志","description":"欢迎来到张小伦的网络日志 \n\t\t一个记录生活，分享心得的博客","menu":[{"id":"home","name":"首页","url":"/"},{"id":"blog","name":"博文","url":"/blogs"},{"id":"category","name":"分类","url":"/categories"},{"id":"archive","name":"归档","url":"/archives"},{"id":"lab","name":"实验室","url":"/labs"},{"id":"about","name":"关于我","url":"/about"}]}},"markdownRemark":{"id":"b6f9fd59-b824-5327-b39d-cb590fcd76ad","html":"<p class=\"para\">Grunt 和 Grunt 的插件都是通过 Node.js 的包管理器 npm 来安装和管理的。为了方便使用 Grunt ，你应该在全局范围内安装 Grunt 的命令行接口(CLI)。要做到这一点，你可能需要使用 sudo (OS X，*nix，BSD 等平台中)权限或者作为超级管理员( Windows 平台)来运行 shell 命令。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">npm install -g grunt-cli</code>\n        </deckgo-highlight-code>\n<p class=\"para\">使用全局安装之后，可以在任何一个目录中运行 grunt 命令。</p>\n<p class=\"para\">###如何工作</p>\n<p class=\"para\">每次运行 grunt 时，它都会使用 node 的 require() 系统查找本地已安装好的 grunt。在本地装好 Grunt 之后，运行 gurnt 命令时，CLI 就会加载这个本地安装好的 Grunt 库，然后应用你项目中的 Gruntfile 中的配置(这个文件用于配置项目中使用的任务)，并执行你所指定的所有任务。而 Grunt 库的安装则依赖 package.json 文件。</p>\n<p class=\"para\">假设已经安装好 Grunt CLI 并且项目也已经使用一个 package.json 和一个 Gruntfile 文件配置好了，那么接下来用 Grunt 进行工作就非常容易了：</p>\n<ol>\n<li>进入到项目的根目录(在命令行面板定位到项目根目录。在 windows 系统下，也可以进入项目根目录的文件夹后，按Shift+鼠标右键，打开右键菜单，选择“在此处打开命令窗口(W)”)。</li>\n<li>运行 npm install 安装项目相关依赖(插件，Grunt 内置任务等依赖)。</li>\n<li>使用 grunt (命令)运行 Grunt。</li>\n</ol>\n<p class=\"para\">###构建一个新的 Grunt 项目</p>\n<p class=\"para\">最简单的配置需要两个文件：<code>package.json</code> 和 <code>Gruntfile</code></p>\n<p class=\"para\"><strong>package.json</strong>：这个文件被用来存储已经作为 npm 模块发布的项目元数据(也就是依赖模块)。你将在这个文件中列出你的项目所依赖的Grunt(通常我们在这里配置Grunt版本)和Grunt插件(相应版本的插件)。使用命令 <code>npm install</code> 安装依赖模块。</p>\n<p class=\"para\"><strong>Gruntfile</strong>：通常这个文件被命名为Gruntfile.js或者Gruntfile.coffee，它用于配置或者定义Grunt任务和加载Grunt插件。</p>\n<p class=\"para\">####package.json</p>\n<p class=\"para\"><code>package.json</code> 与 <code>Gruntfile</code> 相邻，都归属在项目的根目录中。在目录中运行 <code>npm install</code> 安装需要的依赖模块。其创建方式有几种：</p>\n<ol>\n<li><code>grunt-init</code> 命令创建 Grunt 模板时，会自动为项目创建一个 <code>package.json</code> 文件。</li>\n<li><code>npm init</code> 会自动创建一个基本的 <code>package.json</code> 文件。</li>\n<li>新建一个文件，重命名为 <code>package.json</code>。</li>\n</ol>\n<p class=\"para\">一个 <code>package.json</code> 文件示例：</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">{\r\n    &quot;name&quot;: &quot;my-project-name&quot;, // 项目名称\r\n    &quot;version&quot;: &quot;0.1.0&quot;, // 项目版本\r\n    &quot;devDependencies&quot;: { // 项目依赖\r\n        &quot;grunt&quot;: &quot;~0.4.1&quot;, // Grunt库\r\n        &quot;grunt-contrib-jshint&quot;: &quot;~0.6.0&quot;, //grunt中的工具\r\n        &quot;grunt-contrib-nodeunit&quot;: &quot;~0.2.0&quot;, //grunt中的工具\r\n        &quot;grunt-contrib-uglify&quot;: &quot;~0.2.2&quot; //grunt中的工具，可以按照这种方式在 dependencies 中添加自己想要的工具\r\n    }\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">####Gruntfile</p>\n<p class=\"para\"><code>Gruntfile.js</code> 和 <code>Gruntfile.coffee</code> 文件都是归属于项目根目录中的一个有效的 JavaScript 或者 CoffeeScript 文件。\r\n一个 Gruntfile 由下面几部分组成：</p>\n<ul>\n<li>“wrapper” 函数，一个包装函数</li>\n<li>项目和任务配置</li>\n<li>加载的 Grunt 插件和任务</li>\n<li>自定义任务</li>\n</ul>\n<h5 class=\"heading\" id=\"wrapper-函数\" style=\"position:relative;\"><a href=\"#wrapper-%E5%87%BD%E6%95%B0\" aria-label=\"wrapper 函数 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>wrapper 函数</h5>\n<p class=\"para\">每个 Gruntfile 都使用这个基本格式，同时所有的 Grunt 戴玛都必须指点在这个函数里面：</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">module.exports=function(){\r\n    //在这里添加 Grunt 相关\r\n}</code>\n        </deckgo-highlight-code>\n<p class=\"para\">#####项目和任务配置\r\n通常 Grunt 任务所依赖的配置素据都被定义在一个对象中，而这个对象将会被传递给 <code>grunt.initConfig</code> 方法。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">// 项目配置\r\ngrunt.initConfig({\r\n    pkg: grunt.file.readJSON(&#39;package.json&#39;),\r\n    uglify: {\r\n        options: {\r\n            banner: &#39;/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(&quot;yyyy-mm-dd&quot;) %&gt; */\\n&#39;\r\n        },\r\n        build: {\r\n            src: &#39;src/&lt;%=pkg.name %&gt;.js&#39;,\r\n            dest: &#39;build/&lt;%= pkg.name %&gt;.min.js&#39;\r\n        }\r\n    }\r\n});</code>\n        </deckgo-highlight-code>\n<p class=\"para\">在上面的代码中，<code>grunt.file.readJSON('package.json')</code> 会把存储在 <code>package.json</code> 中的 JSON 元数据导入到 Grunt 配置中。由于 <code>&#x3C;% %></code> 模板字符串可以引用任意的配置属性，因此可以通过这种方式来制定诸如<strong>文件路径</strong>和<strong>文件列表类型的配置数据</strong>。</p>\n<p class=\"para\">与大多数的任务一样， grunt-contrib-uglify 插件的 <code>uglify</code> 任务要求他的配置被指定在一个同名属性中。在这个例子中，我们指定了一个 <code>banner</code> 选项，用于在文件顶部生成一个注释。紧接着是一个名为 <code>build</code> 的 uglify 目标，用于将一个js文件压缩为一个目标文件，比如：将 src 目录中的 <code>jQuery-1.9.0.js</code> 压缩成 <code>jQuery-1.9.0.min.js</code>，然后存储到 dest 目录中。\r\n插件一般都托管在 github 上，其使用方法都会有说明。比如 <a href=\"https://github.com/gruntjs/grunt-contrib-uglify\" class=\"link-underline\">grunt-contrib-uglify</a></p>\n<p class=\"para\">#####加载 grunt 插件和任务</p>\n<p class=\"para\">只要一个插件被作为一个依赖指定在项目的 <code>package.json</code> 文件中，并且通过 <code>npm install</code> 安装好，都可以在 <code>Gruntfile</code> 文件中使用下面的简单命令启用.</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">//加载提供 &quot;uglify&quot; 任务的插件\r\ngrunt.loadNpmTasks(&quot;grunt-contrib-uglify&quot;);</code>\n        </deckgo-highlight-code>\n<p class=\"para\"><strong>tips:</strong> 使用 <code>grunt --help</code> 命令可以列出所有可用的任务</p>\n<p class=\"para\">同时，你可以通过定义一个 <code>default</code> 任务来配置 Grunt，让他默认运行一个过着多个任务。</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">// 默认任务\r\ngrunt.registerTask(&#39;default&#39;, [&#39;uglify&#39;]);</code>\n        </deckgo-highlight-code>\n<p class=\"para\">可以将你允许默认运行的任务名称以数组的形式作为参数传递。</p>\n<p class=\"para\">如果你想要的任务没有对应的 Grunt 插件提供相应的功能，你可以在 Gruntfile 内定义自定义的任务：</p>\n<deckgo-highlight-code  theme=\"one-dark\" line-numbers=\"true\"  >\n          <code slot=\"code\">module.exports=function(){\r\n    //一个很基础的default任务\r\n    grunt.registerTask(&quot;default&quot;,&quot;load some stuff.&quot;,function(){\r\n        grunt.log.write(&quot;Loggin some stuff……&quot;).ok();\r\n    });\r\n};</code>\n        </deckgo-highlight-code>\n<p class=\"para\">自定义的项目特定的任务可以不定义在 Gruntfile 中；它们可以定义在一个外部 .js 文件中，然后通过 grunt.loadTasks 方法来加载。</p>\n<p class=\"para\">参考自：<a href=\"http://www.gruntjs.org/docs/getting-started.html\" class=\"link-underline\">Grunt新手教程</a></p>","tableOfContents":"<ul>\n<li><a href=\"#wrapper-%E5%87%BD%E6%95%B0\">wrapper 函数</a></li>\n</ul>","headings":[{"id":"wrapper-函数","depth":5,"value":"wrapper 函数"}],"frontmatter":{"title":"Grunt的简单配置和使用","date":"2014-08-08","cover":null,"description":null,"categories":[],"tags":["Grunt","工具"]}},"previous":{"fields":{"slug":"/blogs/踩坑日记-ie中的haslayout属性/"},"frontmatter":{"title":"踩坑日记-IE中的 hasLayout 属性"}},"next":{"fields":{"slug":"/blogs/git使用笔记(二)-撤销操作/"},"frontmatter":{"title":"git 使用笔记(二)-撤销操作","tags":["Git","笔记"],"categories":[],"status":null}}},"pageContext":{"id":"b6f9fd59-b824-5327-b39d-cb590fcd76ad","previousPostId":"f55be8e2-b682-5c16-8dd7-1c7747b0e5b1","nextPostId":"a4ceb0d6-3e7f-5ab0-b636-c6df117ed976"}},
    "staticQueryHashes": ["2841359383"]}